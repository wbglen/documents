<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0038)https://veiking.iteye.com/blog/2429172 -->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="zh-CN" dir="ltr"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>
    springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客
  </title>
  <meta name="description" content="一、Spring Security 应用的概述     鉴于目前微服务的兴起，Spring周边方案的普及，以及 Spring Security 强大的和高度可定制的优良特性，最近关注了一下相� ...">
  <meta name="keywords" content="Springboot, Security, Spring, SpringMVC, MyBatis springBoot+security+mybatis 实现用户权限的数据库动态管理">
  <link rel="shortcut icon" href="https://veiking.iteye.com/images/favicon.ico" type="image/x-icon">
  <link rel="search" type="application/opensearchdescription+xml" href="https://veiking.iteye.com/open_search.xml" title="ITeye">
  <link href="https://veiking.iteye.com/rss" rel="alternate" title="Veiking的博客" type="application/rss+xml">
  <link href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/blog.css" media="screen" rel="stylesheet" type="text/css">
<link href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/blue.css" media="screen" rel="stylesheet" type="text/css">
  <script type="text/javascript" async="" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/auto_dup"></script><script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/hm.js"></script><script type="text/javascript" async="" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/analytics.js"></script><script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/hm(1).js"></script><script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/application.js" type="text/javascript"></script>
  <script>
    var _hmt = _hmt || [];
    (function() {
        var hm = document.createElement("script");
        hm.src = "//hm.baidu.com/hm.js?e19a8b00cf63f716d774540875007664";
        var s = document.getElementsByTagName("script")[0];
        s.parentNode.insertBefore(hm, s);
    })();
</script>
<style>
/* 折叠效果 */
.hide-main-content{
    position: relative;
}
.hide-article-box {
    display: none;
    position: absolute;
    z-index: 9999;
    bottom: -1px;
    width: 100%;
    padding-top: 160px;
    background-image: -webkit-gradient(linear,left top, left bottom,from(rgba(255,255,255,0)),color-stop(70%, #fff));
    background-image: linear-gradient(-180deg,rgba(255,255,255,0) 0%,#fff 70%);
}
.hide-article-box #btn-readmore{
    color: #ca0c16;
    border: 1px solid #ca0c16;
    margin: 10px auto;
    padding: 0 8px;
    display: block;
    font-size: 14px;
    border-radius: 4px;
    text-align: center;
    background-color: transparent;
    height: 34px;
    width: 74px;
    line-height: 32px;
    min-width: 72px;
    cursor: pointer;
}
.hide-article-box #btn-readmore:hover{
    background: #ca0c16;
    color:#fff;
    text-decoration: none;
}
</style>
<!-- 因INS广告原因 需要提前引入jquery -->
<script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/jquery-1.11.1.min.js" type="text/javascript"></script>
<script type="text/javascript">var jQuery = jQuery.noConflict();// 解决jq与prototype.js命名空间冲突的问题</script>
<script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/fixed-sidebar.js" type="text/javascript"></script>

    <link href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/SyntaxHighlighter.css" media="screen" rel="stylesheet" type="text/css">
  <script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/shCoreCommon.js" type="text/javascript"></script>
<script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/hotkey.js" type="text/javascript"></script>
  <script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/code_favorites.js" type="text/javascript"></script>
<script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/weiboshare.js" type="text/javascript"></script>

  <!-- 请置于所有广告位代码之前 -->
  <script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/ds.js"></script>
  <link ref="canonical" href="http://veiking.iteye.com/blog/2429172">
  <script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/c.js"></script><style type="text/css">.dp-xml .cdata { color: #ff1493; }.dp-xml .tag, .dp-xml .tag-name { color: #069; font-weight: bold; }.dp-xml .attribute { color: red; }.dp-xml .attribute-value { color: blue; }</style><style type="text/css">.dp-xml .cdata { color: #ff1493; }.dp-xml .tag, .dp-xml .tag-name { color: #069; font-weight: bold; }.dp-xml .attribute { color: red; }.dp-xml .attribute-value { color: blue; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-sql .func { color: #ff1493; }.dp-sql .op { color: #808080; }</style><style type="text/css">.dp-sql .func { color: #ff1493; }.dp-sql .op { color: #808080; }</style><style type="text/css">.dp-xml .cdata { color: #ff1493; }.dp-xml .tag, .dp-xml .tag-name { color: #069; font-weight: bold; }.dp-xml .attribute { color: red; }.dp-xml .attribute-value { color: blue; }</style><style type="text/css">.dp-xml .cdata { color: #ff1493; }.dp-xml .tag, .dp-xml .tag-name { color: #069; font-weight: bold; }.dp-xml .attribute { color: red; }.dp-xml .attribute-value { color: blue; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-xml .cdata { color: #ff1493; }.dp-xml .tag, .dp-xml .tag-name { color: #069; font-weight: bold; }.dp-xml .attribute { color: red; }.dp-xml .attribute-value { color: blue; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><style type="text/css">.dp-j .annotation { color: #646464; }.dp-j .number { color: #C00000; }</style><link rel="stylesheet" type="text/css" href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/recommend.css"><link rel="stylesheet" type="text/css" href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/iconfont.css"></head><body><div id="BAIDU_DUP_fp_wrapper" style="position: absolute; left: -1px; bottom: -1px; z-index: 0; width: 0px; height: 0px; overflow: hidden; visibility: hidden; display: none;"><iframe id="BAIDU_DUP_fp_iframe" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/o.html" style="width: 0px; height: 0px; visibility: hidden; display: none;"></iframe></div><svg aria-hidden="true" style="position: absolute; width: 0px; height: 0px; overflow: hidden;"><symbol id="fanyi" viewBox="0 0 1084 1024"><path d="M602.416429 647.439059v75.390494h120.470588v-120.470588h-75.029082l195.493647-193.939577V481.882353h180.597459c33.322165 0 60.289506 26.967341 60.289506 60.235294 0 0.722824-0.012047 1.439624-0.036141 2.1504v236.640377c0.024094 0.710776 0.036141 1.427576 0.036141 2.1504 0 33.261929-26.967341 60.235294-60.235294 60.235294H843.357606v120.470588c0 33.261929-26.967341 60.229271-60.235294 60.22927s-60.235294-26.967341-60.235295-60.235294v-120.470588H542.090782c-33.267953 0-60.235294-26.967341-60.235294-60.235294l0.006024-16.022588 120.554917-119.597177z m240.935153-45.080094v120.470588h120.380235v-120.470588h-120.380235z m-403.534306-46.585977l-27.732329-67.861082H186.479676l-70.716235 167.936c-12.9024 30.659765-48.224376 45.056-78.884141 32.141553-30.659765-12.908424-45.049976-48.2304-32.141553-78.890165l240.941176-572.223247A60.253365 60.253365 0 0 1 301.782076 0.006024a60.253365 60.253365 0 0 1 56.380236 37.466352l174.242635 426.429742 352.798117-350.033318c23.612235-23.431529 61.7472-23.280941 85.17873 0.331294 23.431529 23.612235 23.280941 61.753224-0.331294 85.184753L200.394029 963.029835c-23.612235 23.431529-61.753224 23.280941-85.184753-0.331294-23.431529-23.612235-23.280941-61.753224 0.337318-85.184753l324.270682-321.7408z m-138.842353-339.787294L237.209841 367.441318H362.860664L300.974923 215.979671z"></path></symbol><symbol id="shouji" viewBox="0 0 1024 1024"><path d="M768 670.72V102.4H256v568.32h512z m0 51.2H256v199.68h512v-199.68z m102.4-619.52v819.2c0 56.55552-45.84448 102.4-102.4 102.4H256c-56.55552 0-102.4-45.84448-102.4-102.4V102.4C153.6 45.84448 199.44448 0 256 0h512c56.55552 0 102.4 45.84448 102.4 102.4zM512 870.4c-28.27776 0-51.2-22.92224-51.2-51.2s22.92224-51.2 51.2-51.2 51.2 22.92224 51.2 51.2-22.92224 51.2-51.2 51.2z"></path></symbol><symbol id="yuedushu" viewBox="0 0 1462 1024"><path d="M731.428571 1024c-259.320686 0-495.879314-146.753829-709.668571-440.246857-29.015771-39.840914-29.015771-103.665371 0-143.506286C235.556571 146.761143 472.107886 0 731.428571 0c259.320686 0 495.879314 146.753829 709.668572 440.246857 29.015771 39.840914 29.015771 103.665371 0 143.506286C1227.300571 877.238857 990.749257 1024 731.428571 1024z m0-841.142857c-195.2256 0-375.632457 107.132343-545.865142 329.142857 170.232686 222.010514 350.639543 329.142857 545.865142 329.142857 195.2256 0 375.632457-107.132343 545.865143-329.142857C1107.053714 289.989486 926.646857 182.857143 731.428571 182.857143z m0 621.714286c-161.579886 0-292.571429-130.991543-292.571428-292.571429s130.991543-292.571429 292.571428-292.571429 292.571429 130.991543 292.571429 292.571429-130.991543 292.571429-292.571429 292.571429z m0-182.857143c60.591543 0 109.714286-49.122743 109.714286-109.714286 0-60.591543-49.122743-109.714286-109.714286-109.714286-60.591543 0-109.714286 49.122743-109.714285 109.714286 0 60.591543 49.122743 109.714286 109.714285 109.714286z"></path></symbol></svg><script onload="window[&#39;cambrian_sync_loader_success1552181593863116&#39;]()" onerror="window[&#39;cambrian_sync_loader_fail_1552181593863116&#39;]()" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/main.8b2bc869.js"></script>
  <script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/recommend.js"></script><script language="javascript" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/iconfont.js"></script>



  <div id="header">
    <div id="blog_site_nav">
  <a href="https://www.iteye.com/" class="homepage">首页</a>
  <a href="https://www.iteye.com/news">资讯</a>
  <a href="https://www.iteye.com/magazines">精华</a>
  <a href="https://www.iteye.com/forums">论坛</a>
  <a href="https://www.iteye.com/ask">问答</a>
  <a href="https://www.iteye.com/blogs">博客</a>
  <a href="https://www.iteye.com/blogs/subjects">专栏</a>
  <a href="https://www.iteye.com/groups">群组</a>
<!--  <a href="#" onclick="return false;" id="msna"><u>更多</u> <small>▼</small></a>-->
<!--  <div class="quick_menu" style="display:none;">-->
<!--    <a target="_blank" href="https://job.iteye.com/iteye">知识库</a>-->
<!--    <a href="https:///search">搜索</a>-->
<!--  </div>-->
</div>

    <div id="user_nav">

      <a href="https://veiking.iteye.com/login" class="welcome" title="登录">您还未登录 !</a>
    <a href="https://veiking.iteye.com/login">登录</a>
    <!--<a href="/signup" class="nobg">注册</a>-->
    <!--<a href="https://passport.csdn.net/account/mobileregister?from=https://www.iteye.com">注册</a>-->
  </div>


  </div>

  <div id="page">
<!--    <div id="branding" class="clearfix">-->
<!--      <div id="blog_name">-->
<!--        <h1><a href="/">-->
<!--            </a></h1>-->
<!--      </div>-->
<!--      <div id='fd'></div>-->
<!--      <div id="blog_navbar">-->
<!--        <ul>-->
          
          
          
          
          
          
<!--        </ul>-->

<!--        <div class="search">-->
<!--          <form action="/blog/search" method="get">-->
<!--            <input class="search_text" id="query" name="query" style="margin-left: 10px;width: 110px;" type="text"-->
<!--              value="" />-->
<!--            <input class="submit_search" type="submit" value="" />-->
<!--          </form>-->
<!--        </div>-->
<!--        <div id="fd"></div>-->
<!--      </div>-->
<!--    </div>-->
    `
    <div id="content" class="clearfix">
      <div id="local">
        <div class="local_top"></div>
        <div id="blog_owner">
  <div id="blog_owner_logo"><a href="https://veiking.iteye.com/"><img alt="Veiking的博客" class="logo" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/9b0c4ffd-4816-34bb-a8dc-49910c1df079.jpg" title="Veiking的博客: Veiking的博客" width=""></a></div>
  <div id="blog_owner_name">Veiking</div>
</div>

        <div id="blog_actions">
          <ul>
            <li>浏览:
              90022 次</li>
            
            <li>性别:
              <img alt="Icon_minigender_1" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_minigender_1.gif" title="男">
            </li>
            
            
            <li>来自:
              深圳
            </li>
            
            <li>
              <img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/offline.gif">
            </li>
            
          </ul>
        </div>

        <div id="user_visits" class="clearfix">
          <h5>最近访客 <span style="font-weight:normal;font-size:12px;padding-left:30px;">
              <a href="https://veiking.iteye.com/blog/user_visits">更多访客&gt;&gt;</a></span></h5>
          
          <div class="user_visit">
            <div class="logo"><a href="https://itmi.iteye.com/" target="_blank"><img alt="ITMI的博客" class="logo" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/user-logo-thumb.gif" title="ITMI的博客: " width="48px"></a></div>
            <div class="left">
              <a href="https://itmi.iteye.com/" target="_blank" title="ITMI">ITMI</a>
            </div>
          </div>
          
          <div class="user_visit">
            <div class="logo"><a href="https://sunny-hu.iteye.com/" target="_blank"><img alt="sunny_hu的博客" class="logo" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/user-logo-thumb.gif" title="sunny_hu的博客: " width="48px"></a></div>
            <div class="left">
              <a href="https://sunny-hu.iteye.com/" target="_blank" title="sunny_hu">sunny_hu</a>
            </div>
          </div>
          
          <div class="user_visit">
            <div class="logo"><a href="https://844700118.iteye.com/" target="_blank"><img alt="844700118的博客" class="logo" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/user-logo-thumb.gif" title="844700118的博客: " width="48px"></a></div>
            <div class="left">
              <a href="https://844700118.iteye.com/" target="_blank" title="844700118">844700118</a>
            </div>
          </div>
          
          <div class="user_visit">
            <div class="logo"><a href="https://jun506.iteye.com/" target="_blank"><img alt="jun506的博客" class="logo" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/user-logo-thumb.gif" title="jun506的博客: " width="48px"></a></div>
            <div class="left">
              <a href="https://jun506.iteye.com/" target="_blank" title="jun506">jun506</a>
            </div>
          </div>
          
        </div>

        <div id="user_title_list" class="clearfix">
          <h5>博主相关</h5>
          <li>
            <a href="https://veiking.iteye.com/">博客</a>
          </li>

          <li>
            <a href="https://veiking.iteye.com/weibo">微博</a>
          </li>

          <li>
            <a href="https://veiking.iteye.com/album">相册</a>
          </li>

          <li>
            <a href="https://veiking.iteye.com/link">收藏</a>
          </li>

          <li>
            <a href="https://veiking.iteye.com/blog/guest_book">留言</a>
          </li>

          <li>
            <a href="https://veiking.iteye.com/blog/profile">关于我</a>
          </li>
        </div>

        

                <div id="blog_menu">
          <h5>文章分类</h5>
          <ul>
            <li>
              <a href="https://veiking.iteye.com/">全部博客 (18)</a>
            </li>
            
            <li>
              <a href="https://veiking.iteye.com/category/353187">Spring (9)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/353208">设计模式 (2)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/353220">Java (14)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/359429">github (1)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/360163">实用算法 (1)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/370547">SpringMVC (3)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/370577">Maven (5)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/370789">MyBatis (4)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/370793">Exception (5)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/370794">MySQL (4)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/370795">JDBC (2)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/370860">log4j (2)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/370927">Junit (1)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/371185">JPA (1)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/371186">Hibernate (0)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/372025">Quartz (2)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/372106">集群 (0)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/381156">Springboot (1)</a>
              </li>
              
            <li>
              <a href="https://veiking.iteye.com/category/381157">Security (1)</a>
              </li>
              
          </ul>
        </div>
        <div id="month_blogs">
          <h5>社区版块</h5>
          <ul>
            <li>
              <a href="https://veiking.iteye.com/blog/news">我的资讯</a> (
              0)</li>
            <li>
              <a href="https://veiking.iteye.com/blog/post">我的论坛</a> (
              0)
            </li>
            <li>
              <a href="https://veiking.iteye.com/blog/answered_problems">我的问答</a> (
              0)</li>
          </ul>
        </div>
        <div id="month_blogs">
          <h5>存档分类</h5>
          <ul>
            
            <li>
              <a href="https://veiking.iteye.com/blog/monthblog/2018-08">2018-08</a>
              (
              1)</li>
            
            <li>
              <a href="https://veiking.iteye.com/blog/monthblog/2017-05">2017-05</a>
              (
              1)</li>
            
            <li>
              <a href="https://veiking.iteye.com/blog/monthblog/2017-04">2017-04</a>
              (
              1)</li>
            
            <li>
              <a href="https://veiking.iteye.com/blog/monthblog_more">更多存档...</a>
            </li>
          </ul>
        </div>
        
        

        <div id="guest_books">
          <h5>最新评论</h5>
          <ul>
            
          </ul>
        </div>

        <div class="local_bottom"></div>
        
        <div id="nav_show_top_stop" style="position: fixed; top: 1069.48px;">
            <div>
              <!-- 广告位：PC端-iteye博客详情页左侧Button1-200*200 -->
              
              <!-- Ads ID 423 -->
              
            </div>
            <div>
              <!-- 广告位：PC端-iteye博客详情页左侧Button2-200*200 -->
              
              <!-- Ads ID 424 -->
              
            </div>
          </div>
      </div>
      
      <div id="main" class="">
        



        


<div class="h-entry" style="display:none">
  <a href="https://veiking.iteye.com/" class="p-author" target="_blank">Veiking</a>
</div>


<div class="blog_main">
  <script type="application/ld+json">
    {
        "@context": "https://zhanzhang.baidu.com/contexts/cambrian.jsonld",
        "@id": "http://veiking.iteye.com/blog/2429172",
        "title": "springBoot+security+mybatis 实现用户权限的数据库动态管理",
        "images": [],
        "description": "",
        "pubDate": "2018-08-22T21:52:14"
    }
  </script>
  <div class="blog_title">
    <h3>
      <a href="https://veiking.iteye.com/blog/2429172">springBoot+security+mybatis 实现用户权限的数据库动态管理</a>
      <em class="actions">      </em>
    </h3>
    <ul class="blog_categories"><strong>博客分类：</strong> <li><a href="https://veiking.iteye.com/category/381156">Springboot</a></li><li><a href="https://veiking.iteye.com/category/381157">Security</a></li><li><a href="https://veiking.iteye.com/category/353220">Java</a></li><li><a href="https://veiking.iteye.com/category/353187">Spring</a></li><li><a href="https://veiking.iteye.com/category/370547">SpringMVC</a></li><li><a href="https://veiking.iteye.com/category/370789">MyBatis</a></li><li><a href="https://veiking.iteye.com/category/370577">Maven</a></li><li><a href="https://veiking.iteye.com/category/370794">MySQL</a></li> </ul>
        <div class="news_tag"><a href="http://www.iteye.com/blogs/tag/Springboot">Springboot</a><a href="http://www.iteye.com/blogs/tag/Security">Security</a><a href="http://www.iteye.com/blogs/tag/Spring">Spring</a><a href="http://www.iteye.com/blogs/tag/SpringMVC">SpringMVC</a><a href="http://www.iteye.com/blogs/tag/MyBatis">MyBatis</a></div>
  </div>

  <div id="blog_content" class="hide-main-content">
    <div class="hide-article-box text-center" style="display: none;">
      <a class="btn" id="btn-readmore">阅读更多</a>
    </div>
    
<br><strong><span style="font-size: large;">一、Spring Security 应用的概述</span></strong>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 鉴于目前微服务的兴起，Spring周边方案的普及，以及 Spring Security 强大的和高度可定制的优良特性，最近关注了一下相关内容，顺便留个笔记心得，希望对大家有所帮助。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; Spring Security 权限方案针对不同场景需求有多种不同的使用方法，在此，我们最终描述的是如何采用数据库存储配置，并通过自定义过滤器的实现方式，来进行对权限的权利，希望这个过程能加深对Spring Security的理解，如有初学者阅读，建议先简单了解下Spring Security 框架，以避免遭遇太多的疑惑。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 先说大概，Spring Security，包括绝大部分的安全框架，都可以简单理解为两个核心：一个是认证，即看看这个请求用户存在不存在啊，密码对不对啊等，认证，来确保请求用户的合法性；另一个就是鉴权，即看看这个访问的资源，有没有权限，这个决定用户能做什么，不能做什么。敲黑板，两个重点核心：认证！鉴权！下面，我们将尝试下，看看在 Spring Security 框架内是如何完成这些功能的。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 在这里，我们不准备剖析 Spring Security 底层的基本逻辑，有些还需要就源码进行解读，这里只讲应用层面的东西。 </span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 先说认证，与本次实现密切相关的几个类或接口，是UserDetails、UserDetailsService、AuthenticationProvider，我们可以这么理解：UserDetails是用来封装用户的，用户的帐号信息啊、一些权限啊，帐号状态啊等信息，从数据库那里拿到，首先是要封装成UserDetails的样子，才可以在Spring Security框架中使用的；UserDetailsService，顾名思义，处理UserDetails的Service，它是提供去查询账号信息并封装成UserDetails的服务；AuthenticationProvider的主要工作是负责认证，从登录请求那里拿到帐号密码之类，然后再跟从数据库资源那里得到的UserDetails进行对比确认，如果发现不对劲儿，该报错报错，该提示提示，如果OK，则把这些信息揉巴成一团，封装成一个包含所有信息的认证对象，交给 Spring Security 框架进行管理，供后边有需要的时候随时取用。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 接下来说鉴权，Spring Security 的鉴权方式有多种，我们大概捋一下，这里我们重点讲述如何通过自定义过滤器的鉴权方式，来实现数据库配置权限的动态管理，与此密切相关的几个核心类或接口分别是：AbstractSecurityInterceptor（Filter）、FilterInvocationSecurityMetadataSource和AccessDecisionManager。我们可以这么理解，FilterInvocationSecurityMetadataSource是权限资源管理器，它的主要工作就是根据请求的资源（路径），从数据库获取相对应的权限信息；AccessDecisionManager类似权限管理判断器，负责校验当前认证用户的权限，是否可以访问；AbstractSecurityInterceptor就是前边这两个角色负责表演的地方，拿到访问资源所需的权限，和认证用户的权限，对比，出结果，如果出现对比不成功，分分钟抛要一个拒绝访问的异常，403forbidden了！</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 在这里先把这几个类或者接口，默默的混个眼熟，认证相关：UserDetails、UserDetailsService、AuthenticationProvider；鉴权相关：AbstractSecurityInterceptor（Filter）、FilterInvocationSecurityMetadataSource和AccessDecisionManager，谁是干啥的，谁跟谁什么关系，大概就是那么个意思了，也能猜出 Spring Security 是怎么工作的。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 接下来还会介绍下 Spring Security 的核心配置类：WebSecurityConfigurerAdapter，它的主要职责就是配置配置哪些资源不需要权限限制啊，哪些需要啊等等，以及做一些综合性的配置操作，以及 Spring Security 本身的注册等。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 以上是 Spring Security 应用的一个概述，目的是有个简单的了解，提前混个眼熟，便于思路连续性的展开。</span>
<br>
<br><strong><span style="font-size: large;">二、springBoot项目初建</span></strong>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 在eclipse上怎么创建maven项目，我们就不多说了，方式很多种；这里讲，本次 Spring Security 的实现要用到的依赖主要有 Spring MVC、Spring Security、Mybatis、thymeleaf，我们用自己最熟悉的方式建个maven项目，然后修改pom.xml文件如下：</span>
<br>
<br>pom.xml
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Xml代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%3Cproject%20xmlns%3D%22http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0%22%20xmlns%3Axsi%3D%22http%3A%2F%2Fwww.w3.org%2F2001%2FXMLSchema-instance%22%0A%09xsi%3AschemaLocation%3D%22http%3A%2F%2Fmaven.apache.org%2FPOM%2F4.0.0%20http%3A%2F%2Fmaven.apache.org%2Fxsd%2Fmaven-4.0.0.xsd%22%3E%0A%09%3CmodelVersion%3E4.0.0%3C%2FmodelVersion%3E%0A%09%0A%09%09%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%0A%09%09%3CartifactId%3Espring-boot-starter-parent%3C%2FartifactId%3E%0A%09%09%3Cversion%3E2.0.1.RELEASE%3C%2Fversion%3E%0A%09%3C%2Fparent%3E%0A%09%3CgroupId%3Esec_test%3C%2FgroupId%3E%0A%09%3CartifactId%3Esec%3C%2FartifactId%3E%0A%09%3Cversion%3E0.0.1-SNAPSHOT%3C%2Fversion%3E%0A%09%3Cpackaging%3Ewar%3C%2Fpackaging%3E%0A%0A%09%3Cproperties%3E%0A%09%09%3Cproject.build.sourceEncoding%3EUTF-8%3C%2Fproject.build.sourceEncoding%3E%0A%09%09%3Cspring-boot.version%3E2.0.1.RELEASE%3C%2Fspring-boot.version%3E%0A%09%3C%2Fproperties%3E%0A%0A%09%3Cdependencies%3E%0A%09%09%3C!--%20spring-boot%20--%3E%0A%09%09%3Cdependency%3E%0A%09%09%09%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%0A%09%09%09%3CartifactId%3Espring-boot-starter-web%3C%2FartifactId%3E%0A%09%09%3C%2Fdependency%3E%0A%09%09%3Cdependency%3E%0A%09%09%09%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%0A%09%09%09%3CartifactId%3Espring-boot-starter-security%3C%2FartifactId%3E%0A%09%09%3C%2Fdependency%3E%0A%09%09%3Cdependency%3E%0A%09%09%09%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%0A%09%09%09%3CartifactId%3Espring-boot-starter-thymeleaf%3C%2FartifactId%3E%0A%09%09%3C%2Fdependency%3E%0A%09%09%3Cdependency%3E%0A%09%09%09%3CgroupId%3Eorg.thymeleaf.extras%3C%2FgroupId%3E%0A%09%09%09%3CartifactId%3Ethymeleaf-extras-springsecurity4%3C%2FartifactId%3E%0A%09%09%3C%2Fdependency%3E%0A%09%09%3Cdependency%3E%0A%09%09%09%3CgroupId%3Eorg.mybatis.spring.boot%3C%2FgroupId%3E%0A%09%09%09%3CartifactId%3Emybatis-spring-boot-starter%3C%2FartifactId%3E%0A%09%09%09%3Cversion%3E1.3.2%3C%2Fversion%3E%0A%09%09%3C%2Fdependency%3E%0A%09%09%3Cdependency%3E%0A%09%09%09%3CgroupId%3Emysql%3C%2FgroupId%3E%0A%09%09%09%3CartifactId%3Emysql-connector-java%3C%2FartifactId%3E%0A%09%09%09%3Cscope%3Eruntime%3C%2Fscope%3E%0A%09%09%3C%2Fdependency%3E%0A%09%09%3Cdependency%3E%0A%09%09%09%3CgroupId%3Ecom.alibaba%3C%2FgroupId%3E%0A%09%09%09%3CartifactId%3Edruid%3C%2FartifactId%3E%0A%09%09%09%3Cversion%3E1.0.19%3C%2Fversion%3E%0A%09%09%3C%2Fdependency%3E%0A%09%09%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Fcom.google.code.gson%2Fgson%20--%3E%0A%09%09%3Cdependency%3E%0A%09%09%09%3CgroupId%3Ecom.google.code.gson%3C%2FgroupId%3E%0A%09%09%09%3CartifactId%3Egson%3C%2FartifactId%3E%0A%09%09%09%3Cversion%3E2.8.5%3C%2Fversion%3E%0A%09%09%3C%2Fdependency%3E%0A%09%09%3C!--%20https%3A%2F%2Fmvnrepository.com%2Fartifact%2Forg.projectlombok%2Flombok%20--%3E%0A%09%09%3Cdependency%3E%0A%09%09%09%3CgroupId%3Eorg.projectlombok%3C%2FgroupId%3E%0A%09%09%09%3CartifactId%3Elombok%3C%2FartifactId%3E%0A%09%09%09%3Cversion%3E1.16.20%3C%2Fversion%3E%0A%09%09%09%3Cscope%3Eprovided%3C%2Fscope%3E%0A%09%09%3C%2Fdependency%3E%0A%09%3C%2Fdependencies%3E%0A%0A%09%3Cbuild%3E%0A%09%09%3CfinalName%3E%24%7Bproject.name%7D%3C%2FfinalName%3E%0A%09%09%3CpluginManagement%3E%0A%09%09%09%3Cplugins%3E%0A%09%09%09%09%3Cplugin%3E%0A%09%09%09%09%09%3CartifactId%3Emaven-compiler-plugin%3C%2FartifactId%3E%0A%09%09%09%09%09%3Cconfiguration%3E%0A%09%09%09%09%09%09%3Csource%3E1.8%3C%2Fsource%3E%0A%09%09%09%09%09%09%3Ctarget%3E1.8%3C%2Ftarget%3E%0A%09%09%09%09%09%3C%2Fconfiguration%3E%0A%09%09%09%09%3C%2Fplugin%3E%0A%09%09%09%09%3Cplugin%3E%0A%09%09%09%09%09%3CgroupId%3Eorg.springframework.boot%3C%2FgroupId%3E%0A%09%09%09%09%09%3CartifactId%3Espring-boot-maven-plugin%3C%2FartifactId%3E%0A%09%09%09%09%3C%2Fplugin%3E%0A%09%09%09%3C%2Fplugins%3E%0A%09%09%3C%2FpluginManagement%3E%0A%09%3C%2Fbuild%3E%0A%3C%2Fproject%3E%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-xml"><li><span><span class="tag">&lt;</span><span class="tag-name">project</span><span>&nbsp;</span><span class="attribute">xmlns</span><span>=</span><span class="attribute-value">"http://maven.apache.org/POM/4.0.0"</span><span>&nbsp;</span><span class="attribute">xmlns:xsi</span><span>=</span><span class="attribute-value">"http://www.w3.org/2001/XMLSchema-instance"</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="attribute">xsi:schemaLocation</span><span>=</span><span class="attribute-value">"http://maven.apache.org/POM/4.0.0&nbsp;http://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">modelVersion</span><span class="tag">&gt;</span><span>4.0.0</span><span class="tag">&lt;/</span><span class="tag-name">modelVersion</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>org.springframework.boot</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>spring-boot-starter-parent</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>2.0.1.RELEASE</span><span class="tag">&lt;/</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">parent</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>sec_test</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>sec</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>0.0.1-SNAPSHOT</span><span class="tag">&lt;/</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">packaging</span><span class="tag">&gt;</span><span>war</span><span class="tag">&lt;/</span><span class="tag-name">packaging</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">properties</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">project.build.sourceEncoding</span><span class="tag">&gt;</span><span>UTF-8</span><span class="tag">&lt;/</span><span class="tag-name">project.build.sourceEncoding</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">spring-boot.version</span><span class="tag">&gt;</span><span>2.0.1.RELEASE</span><span class="tag">&lt;/</span><span class="tag-name">spring-boot.version</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">properties</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">dependencies</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">&lt;!--&nbsp;spring-boot&nbsp;--&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>org.springframework.boot</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>spring-boot-starter-web</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>org.springframework.boot</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>spring-boot-starter-security</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>org.springframework.boot</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>spring-boot-starter-thymeleaf</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>org.thymeleaf.extras</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>thymeleaf-extras-springsecurity4</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>org.mybatis.spring.boot</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>mybatis-spring-boot-starter</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>1.3.2</span><span class="tag">&lt;/</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>mysql</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>mysql-connector-java</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">scope</span><span class="tag">&gt;</span><span>runtime</span><span class="tag">&lt;/</span><span class="tag-name">scope</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>com.alibaba</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>druid</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>1.0.19</span><span class="tag">&lt;/</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">&lt;!--&nbsp;https://mvnrepository.com/artifact/com.google.code.gson/gson&nbsp;--&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>com.google.code.gson</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>gson</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>2.8.5</span><span class="tag">&lt;/</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comments">&lt;!--&nbsp;https://mvnrepository.com/artifact/org.projectlombok/lombok&nbsp;--&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>org.projectlombok</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>lombok</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>1.16.20</span><span class="tag">&lt;/</span><span class="tag-name">version</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">scope</span><span class="tag">&gt;</span><span>provided</span><span class="tag">&lt;/</span><span class="tag-name">scope</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">dependency</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">dependencies</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">build</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">finalName</span><span class="tag">&gt;</span><span>${project.name}</span><span class="tag">&lt;/</span><span class="tag-name">finalName</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">pluginManagement</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">plugins</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">plugin</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>maven-compiler-plugin</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">configuration</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">source</span><span class="tag">&gt;</span><span>1.8</span><span class="tag">&lt;/</span><span class="tag-name">source</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">target</span><span class="tag">&gt;</span><span>1.8</span><span class="tag">&lt;/</span><span class="tag-name">target</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">configuration</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">plugin</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">plugin</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>org.springframework.boot</span><span class="tag">&lt;/</span><span class="tag-name">groupId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>spring-boot-maven-plugin</span><span class="tag">&lt;/</span><span class="tag-name">artifactId</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">plugin</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">plugins</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">pluginManagement</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">build</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">project</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre class="xml" name="code" style="display: none;">&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&gt;
	&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
	
		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
		&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
		&lt;version&gt;2.0.1.RELEASE&lt;/version&gt;
	&lt;/parent&gt;
	&lt;groupId&gt;sec_test&lt;/groupId&gt;
	&lt;artifactId&gt;sec&lt;/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
	&lt;packaging&gt;war&lt;/packaging&gt;

	&lt;properties&gt;
		&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
		&lt;spring-boot.version&gt;2.0.1.RELEASE&lt;/spring-boot.version&gt;
	&lt;/properties&gt;

	&lt;dependencies&gt;
		&lt;!-- spring-boot --&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;
			&lt;artifactId&gt;thymeleaf-extras-springsecurity4&lt;/artifactId&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;
			&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;
			&lt;version&gt;1.3.2&lt;/version&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;mysql&lt;/groupId&gt;
			&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
			&lt;scope&gt;runtime&lt;/scope&gt;
		&lt;/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;com.alibaba&lt;/groupId&gt;
			&lt;artifactId&gt;druid&lt;/artifactId&gt;
			&lt;version&gt;1.0.19&lt;/version&gt;
		&lt;/dependency&gt;
		&lt;!-- https://mvnrepository.com/artifact/com.google.code.gson/gson --&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;com.google.code.gson&lt;/groupId&gt;
			&lt;artifactId&gt;gson&lt;/artifactId&gt;
			&lt;version&gt;2.8.5&lt;/version&gt;
		&lt;/dependency&gt;
		&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
			&lt;artifactId&gt;lombok&lt;/artifactId&gt;
			&lt;version&gt;1.16.20&lt;/version&gt;
			&lt;scope&gt;provided&lt;/scope&gt;
		&lt;/dependency&gt;
	&lt;/dependencies&gt;

	&lt;build&gt;
		&lt;finalName&gt;${project.name}&lt;/finalName&gt;
		&lt;pluginManagement&gt;
			&lt;plugins&gt;
				&lt;plugin&gt;
					&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
					&lt;configuration&gt;
						&lt;source&gt;1.8&lt;/source&gt;
						&lt;target&gt;1.8&lt;/target&gt;
					&lt;/configuration&gt;
				&lt;/plugin&gt;
				&lt;plugin&gt;
					&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
					&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
				&lt;/plugin&gt;
			&lt;/plugins&gt;
		&lt;/pluginManagement&gt;
	&lt;/build&gt;
&lt;/project&gt;
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; Spring boot下，各个版本一般都是向下兼容略有不同，在这种简单的应用上基本体现不出太大的差异，我们遵循各自习惯去配置，开心就好，注意pom文件中，除了几个核心的，额外还有gson和lombok的引入，gson是为了方便输出对象日志；lombok是为了省去bean类中set/get方法，这个可以让代码看起来稍微简练些，首次使用需要提前安装下lombok的插件之类，感兴趣的可以自行百度下，也可以根据自己的习惯决定是否使用。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 接下来我们在 src/main/resources 中创建一个 application.yml 作为springBoot项目的主配置文件，注意，这个.yml和.properties的配置方式，虽各有优劣长短，但功效是一样的，我们这里将采用 .yml 的方式，文件内容如下：</span>
<br>
<br>application.yml
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Xml代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=server%3A%0A%20%20%20port%3A%208090%0A%20%20%20application%3A%0A%20%20%20%20%20%20name%3A%20sec%0A%20%20%20%20%0Aspring%3A%0A%20%20%20thymeleaf%3A%0A%20%20%20%20%20%20mode%3A%20HTML5%0A%20%20%20%20%20%20encoding%3A%20UTF-8%0A%20%20%20%20%20%20content-type%3A%20text%2Fhtml%0A%20%20%20%20%20%20cache%3A%20false%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%E5%BC%80%E5%8F%91%E6%97%B6%E5%85%B3%E9%97%AD%E7%BC%93%E5%AD%98%2C%E4%B8%8D%E7%84%B6%E6%B2%A1%E6%B3%95%E7%9C%8B%E5%88%B0%E5%AE%9E%E6%97%B6%E9%A1%B5%E9%9D%A2!%20%20%20%20%0A%20%20%20%20%20%20prefix%3A%20classpath%3A%2Fpublic%2F%20%20%20%20%20%20%20%20%20%23%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%0A%20%20%20%20%20%20suffix%3A%20.html%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%23%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2%E9%BB%98%E8%AE%A4%E5%90%8E%E7%BC%80%0A%0A%20%20%20datasource%3A%0A%20%20%20%20%20%20url%3A%20jdbc%3Amysql%3A%2F%2F127.0.0.1%3A3306%2Fsec%3FuseUnicode%3Dtrue%26characterEncoding%3DUTF-8%0A%20%20%20%20%20%20username%3A%20root%0A%20%20%20%20%20%20password%3A%20******%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-xml"><li><span><span>server:&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;port:&nbsp;8090&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;application:&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;sec&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>spring:&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;thymeleaf:&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mode:&nbsp;HTML5&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;encoding:&nbsp;UTF-8&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content-type:&nbsp;text/html&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cache:&nbsp;false&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#开发时关闭缓存,不然没法看到实时页面!&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prefix:&nbsp;classpath:/public/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#配置页面文件路径&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;suffix:&nbsp;.html&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#配置页面默认后缀&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;datasource:&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url:&nbsp;jdbc:mysql://127.0.0.1:3306/sec?<span class="attribute">useUnicode</span><span>=</span><span class="attribute-value">true</span><span>&amp;</span><span class="attribute">characterEncoding</span><span>=</span><span class="attribute-value">UTF</span><span>-8&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;username:&nbsp;root&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;password:&nbsp;******&nbsp;&nbsp;</span></li></ol></div><pre class="xml" name="code" style="display: none;">server:
   port: 8090
   application:
      name: sec
    
spring:
   thymeleaf:
      mode: HTML5
      encoding: UTF-8
      content-type: text/html
      cache: false                       #开发时关闭缓存,不然没法看到实时页面!    
      prefix: classpath:/public/         #配置页面文件路径
      suffix: .html                      #配置页面默认后缀

   datasource:
      url: jdbc:mysql://127.0.0.1:3306/sec?useUnicode=true&amp;characterEncoding=UTF-8
      username: root
      password: ******
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 这个配置文件就是设定一下服务端口啊，服务名称啊，还有thymeleaf相关的一些路径配置，以及一些数据源待用的参数，这个文件的配置参数会被系统默认加载，需要时直接取用，很方便。然后在主路径下创建一个含main方法的SecApplication类，做启动入口，如下：</span>
<br>
<br>SecApplication.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking%3B%0A%0Aimport%20org.springframework.boot.SpringApplication%3B%0Aimport%20org.springframework.boot.autoconfigure.SpringBootApplication%3B%0A%2F**%0A%20*%20%E9%A1%B9%E7%9B%AE%E5%90%AF%E5%8A%A8%E5%85%A5%E5%8F%A3%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40SpringBootApplication%0Apublic%20class%20SecApplication%20%7B%0A%09public%20static%20void%20main(String%5B%5D%20args)%20%7B%0A%09%09SpringApplication.run(SecApplication.class%2C%20args)%3B%0A%09%7D%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.boot.SpringApplication;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.boot.autoconfigure.SpringBootApplication;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;项目启动入口</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@SpringBootApplication</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;SecApplication&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SpringApplication.run(SecApplication.<span class="keyword">class</span><span>,&nbsp;args);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
/**
 * 项目启动入口
 * @author Veiking
 */
@SpringBootApplication
public class SecApplication {
	public static void main(String[] args) {
		SpringApplication.run(SecApplication.class, args);
	}
}
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 注意加标签@SpringBootApplication，表示这将是按照 Spring boot 项目的形式运行。然后直接右键运行启动，留意下输出窗口，看看什么情况，启动成功，注意，输出栏的日志里很突兀的大了这样一行代码：Using generated security password: XXXX7e44-e83c-460a-aeef-94249316XXXX ，这个是 Spring Security 自带默认的，用户名为user，密码就是这串UUID一样的串儿，接下来，我们浏览器输入：http://localhost:8090，敲回车，自动跳转到了http://localhost:8090/login的路径，我们可以看到一个框架本身自带的登录页面：</span>
<br>
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/14df6d4c-a972-37af-897a-4f6763a43f90.png">
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 我们在窗口输入默认的用户名密码，提交，就得到了这样一个页面：</span>
<br>
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/0562907e-ea8a-3f5a-a395-77abdfd17e16.png">
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 好了，初步的 Spring Security 项目验证通过，项目创建完成。</span>
<br>
<br><strong><span style="font-size: large;">三、数据库信息的创建</span></strong>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 这一波操作我们要创建本次实现要用的数据库表了，按照一般节奏，我们先来五张表：s_user、s_role、s_permission 和 s_user_role、s_role_permission，简单介绍下，就是用户、角色、权限资源和他们的关联关系表，他们结构如下：</span>
<br>
<br>s_user
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/ad42d585-2349-3eff-be56-15715c3a16f9.png">
<br>s_role
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/395d1b9f-96a4-320a-a865-075280d43027.png">
<br>s_permission
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/f3b345f7-f076-38c0-b5bc-89d84c7265f6.png">
<br>s_user_role
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/8b6413cd-1684-3fdf-96c4-6a7e456fa744.png">
<br>s_role_permission
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/bcc7cb77-3ca8-3bc2-add2-808c965f436f.png">
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 我们顺便贴上结构代码，以便使用：</span>
<br>
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Sql代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=--%20----------------------------%0A--%20Table%20structure%20for%20%60s_user%60%0A--%20----------------------------%0ADROP%20TABLE%20IF%20EXISTS%20%60s_user%60%3B%0ACREATE%20TABLE%20%60s_user%60%20(%0A%20%20%60id%60%20int(11)%20NOT%20NULL%2C%0A%20%20%60name%60%20varchar(32)%20DEFAULT%20NULL%2C%0A%20%20%60password%60%20varchar(32)%20DEFAULT%20NULL%2C%0A%20%20PRIMARY%20KEY%20(%60id%60)%0A)%20ENGINE%3DInnoDB%20DEFAULT%20CHARSET%3Dutf8%3B%0A%0A--%20----------------------------%0A--%20Table%20structure%20for%20%60s_user_role%60%0A--%20----------------------------%0ADROP%20TABLE%20IF%20EXISTS%20%60s_user_role%60%3B%0ACREATE%20TABLE%20%60s_user_role%60%20(%0A%20%20%60fk_user_id%60%20int(11)%20DEFAULT%20NULL%2C%0A%20%20%60fk_role_id%60%20int(11)%20DEFAULT%20NULL%2C%0A%20%20KEY%20%60union_key%60%20(%60fk_user_id%60%2C%60fk_role_id%60)%0A)%20ENGINE%3DInnoDB%20DEFAULT%20CHARSET%3Dutf8%3B%0A%0A--%20----------------------------%0A--%20Table%20structure%20for%20%60s_role%60%0A--%20----------------------------%0ADROP%20TABLE%20IF%20EXISTS%20%60s_role%60%3B%0ACREATE%20TABLE%20%60s_role%60%20(%0A%20%20%60id%60%20int(11)%20NOT%20NULL%2C%0A%20%20%60role%60%20varchar(32)%20DEFAULT%20NULL%2C%0A%20%20%60describe%60%20varchar(32)%20DEFAULT%20NULL%2C%0A%20%20PRIMARY%20KEY%20(%60id%60)%0A)%20ENGINE%3DInnoDB%20DEFAULT%20CHARSET%3Dutf8%3B%0A%0A--%20----------------------------%0A--%20Table%20structure%20for%20%60s_role_permission%60%0A--%20----------------------------%0ADROP%20TABLE%20IF%20EXISTS%20%60s_role_permission%60%3B%0ACREATE%20TABLE%20%60s_role_permission%60%20(%0A%20%20%60fk_role_id%60%20int(11)%20DEFAULT%20NULL%2C%0A%20%20%60fk_permission_id%60%20int(11)%20DEFAULT%20NULL%2C%0A%20%20KEY%20%60union_key%60%20(%60fk_role_id%60%2C%60fk_permission_id%60)%0A)%20ENGINE%3DInnoDB%20DEFAULT%20CHARSET%3Dutf8%3B%0A%0A--%20----------------------------%0A--%20Table%20structure%20for%20%60s_permission%60%0A--%20----------------------------%0ADROP%20TABLE%20IF%20EXISTS%20%60s_permission%60%3B%0ACREATE%20TABLE%20%60s_permission%60%20(%0A%20%20%60id%60%20int(11)%20NOT%20NULL%2C%0A%20%20%60permission%60%20varchar(32)%20DEFAULT%20NULL%2C%0A%20%20%60url%60%20varchar(32)%20DEFAULT%20NULL%2C%0A%20%20%60describe%60%20varchar(32)%20DEFAULT%20NULL%2C%0A%20%20PRIMARY%20KEY%20(%60id%60)%0A)%20ENGINE%3DInnoDB%20DEFAULT%20CHARSET%3Dutf8%3B%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-sql"><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;Table&nbsp;structure&nbsp;for&nbsp;`s_user`</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">DROP</span><span>&nbsp;</span><span class="keyword">TABLE</span><span>&nbsp;IF&nbsp;EXISTS&nbsp;`s_user`;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">CREATE</span><span>&nbsp;</span><span class="keyword">TABLE</span><span>&nbsp;`s_user`&nbsp;(&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`id`&nbsp;<span class="keyword">int</span><span>(11)&nbsp;</span><span class="op">NOT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`<span class="keyword">name</span><span>`&nbsp;</span><span class="keyword">varchar</span><span>(32)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`<span class="keyword">password</span><span>`&nbsp;</span><span class="keyword">varchar</span><span>(32)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;<span class="keyword">PRIMARY</span><span>&nbsp;</span><span class="keyword">KEY</span><span>&nbsp;(`id`)&nbsp;&nbsp;</span></span></li><li><span>)&nbsp;ENGINE=InnoDB&nbsp;<span class="keyword">DEFAULT</span><span>&nbsp;CHARSET=utf8;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;Table&nbsp;structure&nbsp;for&nbsp;`s_user_role`</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">DROP</span><span>&nbsp;</span><span class="keyword">TABLE</span><span>&nbsp;IF&nbsp;EXISTS&nbsp;`s_user_role`;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">CREATE</span><span>&nbsp;</span><span class="keyword">TABLE</span><span>&nbsp;`s_user_role`&nbsp;(&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`fk_user_id`&nbsp;<span class="keyword">int</span><span>(11)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`fk_role_id`&nbsp;<span class="keyword">int</span><span>(11)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;<span class="keyword">KEY</span><span>&nbsp;`union_key`&nbsp;(`fk_user_id`,`fk_role_id`)&nbsp;&nbsp;</span></span></li><li><span>)&nbsp;ENGINE=InnoDB&nbsp;<span class="keyword">DEFAULT</span><span>&nbsp;CHARSET=utf8;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;Table&nbsp;structure&nbsp;for&nbsp;`s_role`</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">DROP</span><span>&nbsp;</span><span class="keyword">TABLE</span><span>&nbsp;IF&nbsp;EXISTS&nbsp;`s_role`;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">CREATE</span><span>&nbsp;</span><span class="keyword">TABLE</span><span>&nbsp;`s_role`&nbsp;(&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`id`&nbsp;<span class="keyword">int</span><span>(11)&nbsp;</span><span class="op">NOT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`role`&nbsp;<span class="keyword">varchar</span><span>(32)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`describe`&nbsp;<span class="keyword">varchar</span><span>(32)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;<span class="keyword">PRIMARY</span><span>&nbsp;</span><span class="keyword">KEY</span><span>&nbsp;(`id`)&nbsp;&nbsp;</span></span></li><li><span>)&nbsp;ENGINE=InnoDB&nbsp;<span class="keyword">DEFAULT</span><span>&nbsp;CHARSET=utf8;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;Table&nbsp;structure&nbsp;for&nbsp;`s_role_permission`</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">DROP</span><span>&nbsp;</span><span class="keyword">TABLE</span><span>&nbsp;IF&nbsp;EXISTS&nbsp;`s_role_permission`;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">CREATE</span><span>&nbsp;</span><span class="keyword">TABLE</span><span>&nbsp;`s_role_permission`&nbsp;(&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`fk_role_id`&nbsp;<span class="keyword">int</span><span>(11)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`fk_permission_id`&nbsp;<span class="keyword">int</span><span>(11)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;<span class="keyword">KEY</span><span>&nbsp;`union_key`&nbsp;(`fk_role_id`,`fk_permission_id`)&nbsp;&nbsp;</span></span></li><li><span>)&nbsp;ENGINE=InnoDB&nbsp;<span class="keyword">DEFAULT</span><span>&nbsp;CHARSET=utf8;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;Table&nbsp;structure&nbsp;for&nbsp;`s_permission`</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">DROP</span><span>&nbsp;</span><span class="keyword">TABLE</span><span>&nbsp;IF&nbsp;EXISTS&nbsp;`s_permission`;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">CREATE</span><span>&nbsp;</span><span class="keyword">TABLE</span><span>&nbsp;`s_permission`&nbsp;(&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`id`&nbsp;<span class="keyword">int</span><span>(11)&nbsp;</span><span class="op">NOT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`permission`&nbsp;<span class="keyword">varchar</span><span>(32)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`url`&nbsp;<span class="keyword">varchar</span><span>(32)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;`describe`&nbsp;<span class="keyword">varchar</span><span>(32)&nbsp;</span><span class="keyword">DEFAULT</span><span>&nbsp;</span><span class="op">NULL</span><span>,&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;<span class="keyword">PRIMARY</span><span>&nbsp;</span><span class="keyword">KEY</span><span>&nbsp;(`id`)&nbsp;&nbsp;</span></span></li><li><span>)&nbsp;ENGINE=InnoDB&nbsp;<span class="keyword">DEFAULT</span><span>&nbsp;CHARSET=utf8;&nbsp;&nbsp;</span></span></li></ol></div><pre class="sql" name="code" style="display: none;">-- ----------------------------
-- Table structure for `s_user`
-- ----------------------------
DROP TABLE IF EXISTS `s_user`;
CREATE TABLE `s_user` (
  `id` int(11) NOT NULL,
  `name` varchar(32) DEFAULT NULL,
  `password` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for `s_user_role`
-- ----------------------------
DROP TABLE IF EXISTS `s_user_role`;
CREATE TABLE `s_user_role` (
  `fk_user_id` int(11) DEFAULT NULL,
  `fk_role_id` int(11) DEFAULT NULL,
  KEY `union_key` (`fk_user_id`,`fk_role_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for `s_role`
-- ----------------------------
DROP TABLE IF EXISTS `s_role`;
CREATE TABLE `s_role` (
  `id` int(11) NOT NULL,
  `role` varchar(32) DEFAULT NULL,
  `describe` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for `s_role_permission`
-- ----------------------------
DROP TABLE IF EXISTS `s_role_permission`;
CREATE TABLE `s_role_permission` (
  `fk_role_id` int(11) DEFAULT NULL,
  `fk_permission_id` int(11) DEFAULT NULL,
  KEY `union_key` (`fk_role_id`,`fk_permission_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for `s_permission`
-- ----------------------------
DROP TABLE IF EXISTS `s_permission`;
CREATE TABLE `s_permission` (
  `id` int(11) NOT NULL,
  `permission` varchar(32) DEFAULT NULL,
  `url` varchar(32) DEFAULT NULL,
  `describe` varchar(32) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 接下来我们新增一些用户数据，admin、veiking、xiaoming，添加一些记录，大概意思是，admin拥有所有权限，veiking只有hello、index相关权限，xiaoming什么权限都没有，添加数据记录的脚本如下：</span>
<br>
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Sql代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=--%20----------------------------%0A--%20Records%20of%20s_user%0A--%20----------------------------%0AINSERT%20INTO%20%60s_user%60%20VALUES%20(&#39;1&#39;%2C%20&#39;admin&#39;%2C%20&#39;admin&#39;)%3B%0AINSERT%20INTO%20%60s_user%60%20VALUES%20(&#39;2&#39;%2C%20&#39;veiking&#39;%2C%20&#39;veiking&#39;)%3B%0AINSERT%20INTO%20%60s_user%60%20VALUES%20(&#39;3&#39;%2C%20&#39;xiaoming&#39;%2C%20&#39;xiaoming&#39;)%3B%0A%0A--%20----------------------------%0A--%20Records%20of%20s_user_role%0A--%20----------------------------%0AINSERT%20INTO%20%60s_user_role%60%20VALUES%20(&#39;1&#39;%2C%20&#39;1&#39;)%3B%0AINSERT%20INTO%20%60s_user_role%60%20VALUES%20(&#39;2&#39;%2C%20&#39;2&#39;)%3B%0A%0A--%20----------------------------%0A--%20Records%20of%20s_role%0A--%20----------------------------%0AINSERT%20INTO%20%60s_role%60%20VALUES%20(&#39;1&#39;%2C%20&#39;R_ADMIN&#39;%2C%20&#39;%E5%A4%A7%E6%80%BB%E7%AE%A1%EF%BC%8C%E6%89%80%E6%9C%89%E6%9D%83%E9%99%90&#39;)%3B%0AINSERT%20INTO%20%60s_role%60%20VALUES%20(&#39;2&#39;%2C%20&#39;R_HELLO&#39;%2C%20&#39;%E8%AF%B4hello%E7%9B%B8%E5%85%B3%E7%9A%84%E6%9D%83%E9%99%90&#39;)%3B%0A%0A--%20----------------------------%0A--%20Records%20of%20s_role_permission%0A--%20----------------------------%0AINSERT%20INTO%20%60s_role_permission%60%20VALUES%20(&#39;1&#39;%2C%20&#39;1&#39;)%3B%0AINSERT%20INTO%20%60s_role_permission%60%20VALUES%20(&#39;1&#39;%2C%20&#39;2&#39;)%3B%0AINSERT%20INTO%20%60s_role_permission%60%20VALUES%20(&#39;1&#39;%2C%20&#39;3&#39;)%3B%0AINSERT%20INTO%20%60s_role_permission%60%20VALUES%20(&#39;2&#39;%2C%20&#39;1&#39;)%3B%0AINSERT%20INTO%20%60s_role_permission%60%20VALUES%20(&#39;2&#39;%2C%20&#39;3&#39;)%3B%0A%0A--%20----------------------------%0A--%20Records%20of%20s_permission%0A--%20----------------------------%0AINSERT%20INTO%20%60s_permission%60%20VALUES%20(&#39;1&#39;%2C%20&#39;P_INDEX&#39;%2C%20&#39;%2Findex&#39;%2C%20&#39;index%E9%A1%B5%E9%9D%A2%E8%B5%84%E6%BA%90&#39;)%3B%0AINSERT%20INTO%20%60s_permission%60%20VALUES%20(&#39;2&#39;%2C%20&#39;P_ADMIN&#39;%2C%20&#39;%2Fadmin&#39;%2C%20&#39;admin%E9%A1%B5%E9%9D%A2%E8%B5%84%E6%BA%90&#39;)%3B%0AINSERT%20INTO%20%60s_permission%60%20VALUES%20(&#39;3&#39;%2C%20&#39;P_HELLO&#39;%2C%20&#39;%2Fhello&#39;%2C%20&#39;hello%E9%A1%B5%E9%9D%A2%E8%B5%84%E6%BA%90&#39;)%3B%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-sql"><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;Records&nbsp;of&nbsp;s_user</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_user`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'1'</span><span>,&nbsp;</span><span class="string">'admin'</span><span>,&nbsp;</span><span class="string">'admin'</span><span>);&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_user`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'2'</span><span>,&nbsp;</span><span class="string">'veiking'</span><span>,&nbsp;</span><span class="string">'veiking'</span><span>);&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_user`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'3'</span><span>,&nbsp;</span><span class="string">'xiaoming'</span><span>,&nbsp;</span><span class="string">'xiaoming'</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;Records&nbsp;of&nbsp;s_user_role</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_user_role`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'1'</span><span>,&nbsp;</span><span class="string">'1'</span><span>);&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_user_role`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'2'</span><span>,&nbsp;</span><span class="string">'2'</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;Records&nbsp;of&nbsp;s_role</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_role`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'1'</span><span>,&nbsp;</span><span class="string">'R_ADMIN'</span><span>,&nbsp;</span><span class="string">'大总管，所有权限'</span><span>);&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_role`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'2'</span><span>,&nbsp;</span><span class="string">'R_HELLO'</span><span>,&nbsp;</span><span class="string">'说hello相关的权限'</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;Records&nbsp;of&nbsp;s_role_permission</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_role_permission`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'1'</span><span>,&nbsp;</span><span class="string">'1'</span><span>);&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_role_permission`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'1'</span><span>,&nbsp;</span><span class="string">'2'</span><span>);&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_role_permission`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'1'</span><span>,&nbsp;</span><span class="string">'3'</span><span>);&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_role_permission`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'2'</span><span>,&nbsp;</span><span class="string">'1'</span><span>);&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_role_permission`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'2'</span><span>,&nbsp;</span><span class="string">'3'</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;Records&nbsp;of&nbsp;s_permission</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="comment">--&nbsp;----------------------------</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_permission`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'1'</span><span>,&nbsp;</span><span class="string">'P_INDEX'</span><span>,&nbsp;</span><span class="string">'/index'</span><span>,&nbsp;</span><span class="string">'index页面资源'</span><span>);&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_permission`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'2'</span><span>,&nbsp;</span><span class="string">'P_ADMIN'</span><span>,&nbsp;</span><span class="string">'/admin'</span><span>,&nbsp;</span><span class="string">'admin页面资源'</span><span>);&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">INSERT</span><span>&nbsp;</span><span class="keyword">INTO</span><span>&nbsp;`s_permission`&nbsp;</span><span class="keyword">VALUES</span><span>&nbsp;(</span><span class="string">'3'</span><span>,&nbsp;</span><span class="string">'P_HELLO'</span><span>,&nbsp;</span><span class="string">'/hello'</span><span>,&nbsp;</span><span class="string">'hello页面资源'</span><span>);&nbsp;&nbsp;</span></span></li></ol></div><pre class="sql" name="code" style="display: none;">-- ----------------------------
-- Records of s_user
-- ----------------------------
INSERT INTO `s_user` VALUES ('1', 'admin', 'admin');
INSERT INTO `s_user` VALUES ('2', 'veiking', 'veiking');
INSERT INTO `s_user` VALUES ('3', 'xiaoming', 'xiaoming');

-- ----------------------------
-- Records of s_user_role
-- ----------------------------
INSERT INTO `s_user_role` VALUES ('1', '1');
INSERT INTO `s_user_role` VALUES ('2', '2');

-- ----------------------------
-- Records of s_role
-- ----------------------------
INSERT INTO `s_role` VALUES ('1', 'R_ADMIN', '大总管，所有权限');
INSERT INTO `s_role` VALUES ('2', 'R_HELLO', '说hello相关的权限');

-- ----------------------------
-- Records of s_role_permission
-- ----------------------------
INSERT INTO `s_role_permission` VALUES ('1', '1');
INSERT INTO `s_role_permission` VALUES ('1', '2');
INSERT INTO `s_role_permission` VALUES ('1', '3');
INSERT INTO `s_role_permission` VALUES ('2', '1');
INSERT INTO `s_role_permission` VALUES ('2', '3');

-- ----------------------------
-- Records of s_permission
-- ----------------------------
INSERT INTO `s_permission` VALUES ('1', 'P_INDEX', '/index', 'index页面资源');
INSERT INTO `s_permission` VALUES ('2', 'P_ADMIN', '/admin', 'admin页面资源');
INSERT INTO `s_permission` VALUES ('3', 'P_HELLO', '/hello', 'hello页面资源');
</pre>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 好了，数据库表相关的内容是准备完成。</span>
<br>
<br><strong><span style="font-size: large;">四、测试页面的准备</span></strong>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 紧接着我们创建一些用来测试检验效果的页面：login.html、index、admin、hello 等页面，其中 login.html 是用来检验登录效果的，代码如下：</span>
<br>
<br>login.html
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Html代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%3C!DOCTYPE%20html%3E%0A%3Chtml%20xmlns%3Ath%3D%22http%3A%2F%2Fwww.thymeleaf.org%22%3E%0A%3Chead%3E%0A%3Cmeta%20content%3D%22text%2Fhtml%3Bcharset%3DUTF-8%22%2F%3E%0A%3Ctitle%3E%E7%99%BB%E5%BD%95%3C%2Ftitle%3E%0A%3Clink%20rel%3D%22stylesheet%22%20th%3Ahref%3D%22%40%7Bcss%2Fbootstrap.min.css%7D%22%2F%3E%0A%3Cstyle%20type%3D%22text%2Fcss%22%3E%0Abody%20%7B%20padding%3A%2020px%3B%20%7D%0A.starter-template%20%7B%20width%3A350px%3B%20padding%3A%200%2040px%3B%20text-align%3A%20center%3B%20%7D%0A%3C%2Fstyle%3E%0A%3C%2Fhead%3E%0A%3Cbody%3E%0A%09%0A%09%09%3Ca%20th%3Ahref%3D%22%40%7B%2Findex%7D%22%3E%20INDEX%3C%2Fa%3E%0A%09%09%3Ca%20th%3Ahref%3D%22%40%7B%2Fadmin%7D%22%3E%20%7C%20ADMIN%3C%2Fa%3E%0A%09%09%3Ca%20th%3Ahref%3D%22%40%7B%2Fhello%7D%22%3E%20%7C%20HELLO%3C%2Fa%3E%0A%09%09%3Cbr%2F%3E%0A%09%0A%0A%09%3Chr%2F%3E%0A%20%20%20%20%3Cdiv%20class%3D%22starter-template%22%3E%0A%20%20%20%20%20%3Cp%20th%3Aif%3D%22%24%7Bparam.logout%7D%22%20class%3D%22bg-warning%22%3E%E5%B7%B2%E6%88%90%E5%8A%9F%E6%B3%A8%E9%94%80%0A%09%E6%9C%89%E9%94%99%E8%AF%AF%EF%BC%8C%E8%AF%B7%E9%87%8D%E8%AF%95%0A%09%3Ch2%3E%E4%BD%BF%E7%94%A8%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%3C%2Fh2%3E%0A%09%3Cform%20name%3D%22form%22%20th%3Aaction%3D%22%40%7B%2Flogin%7D%22%20action%3D%22%2Flogin%22%20method%3D%22POST%22%3E%0A%09%09%3Cdiv%20class%3D%22form-group%22%3E%0A%09%09%09%3Clabel%20for%3D%22username%22%3E%E8%B4%A6%E5%8F%B7%3C%2Flabel%3E%0A%09%09%09%3Cinput%20type%3D%22text%22%20class%3D%22form-control%22%20name%3D%22username%22%20value%3D%22%22%20placeholder%3D%22%E8%B4%A6%E5%8F%B7%22%20%2F%3E%0A%09%09%3C%2Fdiv%3E%0A%09%09%3Cdiv%20class%3D%22form-group%22%3E%0A%09%09%09%3Clabel%20for%3D%22password%22%3E%E5%AF%86%E7%A0%81%3C%2Flabel%3E%0A%09%09%09%3Cinput%20type%3D%22password%22%20class%3D%22form-control%22%20name%3D%22password%22%20placeholder%3D%22%E5%AF%86%E7%A0%81%22%20%2F%3E%0A%09%09%3C%2Fdiv%3E%0A%09%09%3Cdiv%20class%3D%22form-group%22%3E%0A%09%09%09%3Cinput%20type%3D%22submit%22%20id%3D%22login%22%20value%3D%22%E7%99%BB%E5%BD%95%22%20class%3D%22btn%20btn-primary%22%20%2F%3E%0A%09%09%3C%2Fdiv%3E%0A%0A%09%3C%2Fform%3E%0A%20%20%20%20%3C%2Fdiv%3E%0A%3C%2Fbody%3E%0A%3C%2Fhtml%3E%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-xml"><li><span><span>&lt;!DOCTYPE&nbsp;html</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">html</span><span>&nbsp;</span><span class="attribute">xmlns:th</span><span>=</span><span class="attribute-value">"http://www.thymeleaf.org"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">head</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">meta</span><span>&nbsp;</span><span class="attribute">content</span><span>=</span><span class="attribute-value">"text/html;charset=UTF-8"</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">title</span><span class="tag">&gt;</span><span>登录</span><span class="tag">&lt;/</span><span class="tag-name">title</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">link</span><span>&nbsp;</span><span class="attribute">rel</span><span>=</span><span class="attribute-value">"stylesheet"</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{css/bootstrap.min.css}"</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">style</span><span>&nbsp;</span><span class="attribute">type</span><span>=</span><span class="attribute-value">"text/css"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>body&nbsp;{&nbsp;padding:&nbsp;20px;&nbsp;}&nbsp;&nbsp;</span></li><li><span>.starter-template&nbsp;{&nbsp;width:350px;&nbsp;padding:&nbsp;0&nbsp;40px;&nbsp;text-align:&nbsp;center;&nbsp;}&nbsp;&nbsp;</span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">style</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">head</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">body</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{/index}"</span><span class="tag">&gt;</span><span>&nbsp;INDEX</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{/admin}"</span><span class="tag">&gt;</span><span>&nbsp;|&nbsp;ADMIN</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{/hello}"</span><span class="tag">&gt;</span><span>&nbsp;|&nbsp;HELLO</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">br</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">hr</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">div</span><span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">"starter-template"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">p</span><span>&nbsp;</span><span class="attribute">th:if</span><span>=</span><span class="attribute-value">"${param.logout}"</span><span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">"bg-warning"</span><span class="tag">&gt;</span><span>已成功注销&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;有错误，请重试&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">h2</span><span class="tag">&gt;</span><span>使用用户名密码登录</span><span class="tag">&lt;/</span><span class="tag-name">h2</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">form</span><span>&nbsp;</span><span class="attribute">name</span><span>=</span><span class="attribute-value">"form"</span><span>&nbsp;</span><span class="attribute">th:action</span><span>=</span><span class="attribute-value">"@{/login}"</span><span>&nbsp;</span><span class="attribute">action</span><span>=</span><span class="attribute-value">"/login"</span><span>&nbsp;</span><span class="attribute">method</span><span>=</span><span class="attribute-value">"POST"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">div</span><span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">"form-group"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">label</span><span>&nbsp;</span><span class="attribute">for</span><span>=</span><span class="attribute-value">"username"</span><span class="tag">&gt;</span><span>账号</span><span class="tag">&lt;/</span><span class="tag-name">label</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">input</span><span>&nbsp;</span><span class="attribute">type</span><span>=</span><span class="attribute-value">"text"</span><span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">"form-control"</span><span>&nbsp;</span><span class="attribute">name</span><span>=</span><span class="attribute-value">"username"</span><span>&nbsp;</span><span class="attribute">value</span><span>=</span><span class="attribute-value">""</span><span>&nbsp;</span><span class="attribute">placeholder</span><span>=</span><span class="attribute-value">"账号"</span><span>&nbsp;</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">div</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">div</span><span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">"form-group"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">label</span><span>&nbsp;</span><span class="attribute">for</span><span>=</span><span class="attribute-value">"password"</span><span class="tag">&gt;</span><span>密码</span><span class="tag">&lt;/</span><span class="tag-name">label</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">input</span><span>&nbsp;</span><span class="attribute">type</span><span>=</span><span class="attribute-value">"password"</span><span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">"form-control"</span><span>&nbsp;</span><span class="attribute">name</span><span>=</span><span class="attribute-value">"password"</span><span>&nbsp;</span><span class="attribute">placeholder</span><span>=</span><span class="attribute-value">"密码"</span><span>&nbsp;</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">div</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">div</span><span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">"form-group"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">input</span><span>&nbsp;</span><span class="attribute">type</span><span>=</span><span class="attribute-value">"submit"</span><span>&nbsp;</span><span class="attribute">id</span><span>=</span><span class="attribute-value">"login"</span><span>&nbsp;</span><span class="attribute">value</span><span>=</span><span class="attribute-value">"登录"</span><span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">"btn&nbsp;btn-primary"</span><span>&nbsp;</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">div</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">form</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">div</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">body</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">html</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre class="html" name="code" style="display: none;">&lt;!DOCTYPE html&gt;
&lt;html xmlns:th="http://www.thymeleaf.org"&gt;
&lt;head&gt;
&lt;meta content="text/html;charset=UTF-8"/&gt;
&lt;title&gt;登录&lt;/title&gt;
&lt;link rel="stylesheet" th:href="@{css/bootstrap.min.css}"/&gt;
&lt;style type="text/css"&gt;
body { padding: 20px; }
.starter-template { width:350px; padding: 0 40px; text-align: center; }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	
		&lt;a th:href="@{/index}"&gt; INDEX&lt;/a&gt;
		&lt;a th:href="@{/admin}"&gt; | ADMIN&lt;/a&gt;
		&lt;a th:href="@{/hello}"&gt; | HELLO&lt;/a&gt;
		&lt;br/&gt;
	

	&lt;hr/&gt;
    &lt;div class="starter-template"&gt;
     &lt;p th:if="${param.logout}" class="bg-warning"&gt;已成功注销
	有错误，请重试
	&lt;h2&gt;使用用户名密码登录&lt;/h2&gt;
	&lt;form name="form" th:action="@{/login}" action="/login" method="POST"&gt;
		&lt;div class="form-group"&gt;
			&lt;label for="username"&gt;账号&lt;/label&gt;
			&lt;input type="text" class="form-control" name="username" value="" placeholder="账号" /&gt;
		&lt;/div&gt;
		&lt;div class="form-group"&gt;
			&lt;label for="password"&gt;密码&lt;/label&gt;
			&lt;input type="password" class="form-control" name="password" placeholder="密码" /&gt;
		&lt;/div&gt;
		&lt;div class="form-group"&gt;
			&lt;input type="submit" id="login" value="登录" class="btn btn-primary" /&gt;
		&lt;/div&gt;

	&lt;/form&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; index、admin、hello等页面内容都差不多，就是不同导航链接页面，到时候会用来测试权限控制的一些效果，其中 index.html 的内容如下：</span>
<br>
<br>index.html
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Html代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%3C!DOCTYPE%20html%3E%0A%3Chtml%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml%22%0A%09xmlns%3Ath%3D%22http%3A%2F%2Fwww.thymeleaf.org%22%0A%09xmlns%3Asec%3D%22http%3A%2F%2Fwww.thymeleaf.org%2Fthymeleaf-extras-springsecurity4%22%3E%0A%3Chead%3E%0A%3Ctitle%3E%E4%B8%BB%E9%A1%B5%3C%2Ftitle%3E%0A%3Clink%20rel%3D%22stylesheet%22%20th%3Ahref%3D%22%40%7Bcss%2Fbootstrap.min.css%7D%22%2F%3E%0A%3Cstyle%20type%3D%22text%2Fcss%22%3E%0Abody%20%7B%20padding%3A%2040px%3B%20%7D%0A%3C%2Fstyle%3E%0A%3C%2Fhead%3E%0A%3Cbody%3E%0A%09%3Ch1%3EINDEX%3C%2Fh1%3E%0A%09%3Cbr%2F%3E%E4%BD%A0%E5%A5%BD%EF%BC%9A%3Ca%20sec%3Aauthentication%3D%22name%22%3E%3C%2Fa%3E%0A%09%0A%09%09%3Ca%20th%3Ahref%3D%22%40%7B%2Findex%7D%22%3E%20INDEX%3C%2Fa%3E%0A%09%09%3Ca%20th%3Ahref%3D%22%40%7B%2Fadmin%7D%22%3E%20%7C%20ADMIN%3C%2Fa%3E%0A%09%09%3Ca%20th%3Ahref%3D%22%40%7B%2Fhello%7D%22%3E%20%7C%20HELLO%3C%2Fa%3E%0A%09%09%3Cbr%2F%3E%3Chr%2F%3E%0A%20%20%20%20%20%20%20%20%3Cform%20th%3Aaction%3D%22%40%7B%2Flogout%7D%22%20method%3D%22post%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%22submit%22%20class%3D%22btn%20btn-primary%22%20value%3D%22%E6%B3%A8%E9%94%80%22%2F%3E%0A%20%20%20%20%20%20%20%20%3C%2Fform%3E%0A%09%0A%0A%3C%2Fbody%3E%0A%3C%2Fhtml%3E%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-xml"><li><span><span>&lt;!DOCTYPE&nbsp;html</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">html</span><span>&nbsp;</span><span class="attribute">xmlns</span><span>=</span><span class="attribute-value">"http://www.w3.org/1999/xhtml"</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="attribute">xmlns:th</span><span>=</span><span class="attribute-value">"http://www.thymeleaf.org"</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="attribute">xmlns:sec</span><span>=</span><span class="attribute-value">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">head</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">title</span><span class="tag">&gt;</span><span>主页</span><span class="tag">&lt;/</span><span class="tag-name">title</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">link</span><span>&nbsp;</span><span class="attribute">rel</span><span>=</span><span class="attribute-value">"stylesheet"</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{css/bootstrap.min.css}"</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">style</span><span>&nbsp;</span><span class="attribute">type</span><span>=</span><span class="attribute-value">"text/css"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>body&nbsp;{&nbsp;padding:&nbsp;40px;&nbsp;}&nbsp;&nbsp;</span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">style</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">head</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">body</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">h1</span><span class="tag">&gt;</span><span>INDEX</span><span class="tag">&lt;/</span><span class="tag-name">h1</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">br</span><span class="tag">/&gt;</span><span>你好：</span><span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">sec:authentication</span><span>=</span><span class="attribute-value">"name"</span><span class="tag">&gt;</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{/index}"</span><span class="tag">&gt;</span><span>&nbsp;INDEX</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{/admin}"</span><span class="tag">&gt;</span><span>&nbsp;|&nbsp;ADMIN</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{/hello}"</span><span class="tag">&gt;</span><span>&nbsp;|&nbsp;HELLO</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">br</span><span class="tag">/&gt;</span><span class="tag">&lt;</span><span class="tag-name">hr</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">form</span><span>&nbsp;</span><span class="attribute">th:action</span><span>=</span><span class="attribute-value">"@{/logout}"</span><span>&nbsp;</span><span class="attribute">method</span><span>=</span><span class="attribute-value">"post"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">input</span><span>&nbsp;</span><span class="attribute">type</span><span>=</span><span class="attribute-value">"submit"</span><span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">"btn&nbsp;btn-primary"</span><span>&nbsp;</span><span class="attribute">value</span><span>=</span><span class="attribute-value">"注销"</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">form</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">body</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">html</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre class="html" name="code" style="display: none;">&lt;!DOCTYPE html&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:th="http://www.thymeleaf.org"
	xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"&gt;
&lt;head&gt;
&lt;title&gt;主页&lt;/title&gt;
&lt;link rel="stylesheet" th:href="@{css/bootstrap.min.css}"/&gt;
&lt;style type="text/css"&gt;
body { padding: 40px; }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;INDEX&lt;/h1&gt;
	&lt;br/&gt;你好：&lt;a sec:authentication="name"&gt;&lt;/a&gt;
	
		&lt;a th:href="@{/index}"&gt; INDEX&lt;/a&gt;
		&lt;a th:href="@{/admin}"&gt; | ADMIN&lt;/a&gt;
		&lt;a th:href="@{/hello}"&gt; | HELLO&lt;/a&gt;
		&lt;br/&gt;&lt;hr/&gt;
        &lt;form th:action="@{/logout}" method="post"&gt;
            &lt;input type="submit" class="btn btn-primary" value="注销"/&gt;
        &lt;/form&gt;
	

&lt;/body&gt;
&lt;/html&gt;
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 好了，页面也准备好了，接着下一步。</span>
<br>
<br>
<br><strong><span style="font-size: large;">五、基础类及查询接口的创建</span></strong>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 所需数据是准备好了，接下来我们要创建一系列的数据对象，和对应的查询接口，来供 Spring Security 使用，先来创建一波数据 bean 类：SUser、SRole、SPermission，这几个分别是用户、角色、权限资源类，代码如下：</span>
<br>
<br>SUser.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.bean%3B%0A%0Aimport%20lombok.AllArgsConstructor%3B%0Aimport%20lombok.Data%3B%0Aimport%20lombok.NoArgsConstructor%3B%0A%2F**%0A%20*%20%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81%E4%BF%A1%E6%81%AF%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Data%0A%40NoArgsConstructor%0A%40AllArgsConstructor%0Apublic%20class%20SUser%20%7B%0A%09private%20int%20id%3B%0A%09private%20String%20name%3B%0A%09private%20String%20password%3B%0A%09%0A%09public%20SUser(SUser%20sUser)%20%7B%0A%09%09this.id%20%3D%20sUser.getId()%3B%0A%09%09this.name%20%3D%20sUser.getName()%3B%0A%09%09this.password%20%3D%20sUser.getPassword()%3B%0A%09%7D%0A%7D%0A%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.bean;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;lombok.AllArgsConstructor;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;lombok.Data;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;lombok.NoArgsConstructor;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;用户名密码信息</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Data</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@NoArgsConstructor</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@AllArgsConstructor</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;SUser&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;</span><span class="keyword">int</span><span>&nbsp;id;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;String&nbsp;name;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;String&nbsp;password;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;SUser(SUser&nbsp;sUser)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span><span>.id&nbsp;=&nbsp;sUser.getId();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span><span>.name&nbsp;=&nbsp;sUser.getName();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span><span>.password&nbsp;=&nbsp;sUser.getPassword();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.bean;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 用户名密码信息
 * @author Veiking
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SUser {
	private int id;
	private String name;
	private String password;
	
	public SUser(SUser sUser) {
		this.id = sUser.getId();
		this.name = sUser.getName();
		this.password = sUser.getPassword();
	}
}

</pre>
<br>SRole.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.bean%3B%0A%0Aimport%20lombok.AllArgsConstructor%3B%0Aimport%20lombok.Data%3B%0Aimport%20lombok.NoArgsConstructor%3B%0A%0A%2F**%0A%20*%20%E8%A7%92%E8%89%B2%E4%BF%A1%E6%81%AF%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Data%0A%40NoArgsConstructor%0A%40AllArgsConstructor%0Apublic%20class%20SRole%20%7B%0A%09private%20int%20id%3B%0A%09private%20String%20role%3B%0A%09private%20String%20describe%3B%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.bean;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;lombok.AllArgsConstructor;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;lombok.Data;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;lombok.NoArgsConstructor;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;角色信息</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Data</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@NoArgsConstructor</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@AllArgsConstructor</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;SRole&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;</span><span class="keyword">int</span><span>&nbsp;id;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;String&nbsp;role;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;String&nbsp;describe;&nbsp;&nbsp;</span></span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.bean;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * 角色信息
 * @author Veiking
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SRole {
	private int id;
	private String role;
	private String describe;
}
</pre>
<br>SPermission.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.bean%3B%0A%0Aimport%20lombok.AllArgsConstructor%3B%0Aimport%20lombok.Data%3B%0Aimport%20lombok.NoArgsConstructor%3B%0A%2F**%0A%20*%20%E8%AE%BF%E9%97%AE%E8%B5%84%E6%BA%90%E4%BF%A1%E6%81%AF%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Data%0A%40NoArgsConstructor%0A%40AllArgsConstructor%0Apublic%20class%20SPermission%20%7B%0A%09private%20int%20id%3B%0A%09private%20String%20permission%3B%0A%09private%20String%20url%3B%0A%09private%20String%20describe%3B%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.bean;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;lombok.AllArgsConstructor;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;lombok.Data;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;lombok.NoArgsConstructor;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;访问资源信息</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Data</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@NoArgsConstructor</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@AllArgsConstructor</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;SPermission&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;</span><span class="keyword">int</span><span>&nbsp;id;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;String&nbsp;permission;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;String&nbsp;url;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;String&nbsp;describe;&nbsp;&nbsp;</span></span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.bean;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
/**
 * 访问资源信息
 * @author Veiking
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class SPermission {
	private int id;
	private String permission;
	private String url;
	private String describe;
}
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 注意@Data、@NoArgsConstructor、@AllArgsConstructor这些注解，都是lombok帮助处理set/get和全参无参构造方法的，如果不喜欢，自行替换即可。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 然后来处理查询接口，我们这里采用的是 mybatis 框架的方式，好了，创建几个对应的dao，代码如下：</span>
<br>
<br>SUserDao.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.dao%3B%0A%0Aimport%20org.apache.ibatis.annotations.Mapper%3B%0Aimport%20org.apache.ibatis.annotations.Select%3B%0Aimport%20com.veiking.sec.bean.SUser%3B%0A%0A%2F**%0A%20*%20%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Mapper%0Apublic%20interface%20SUserDao%20%7B%0A%09%2F**%0A%09%20*%20%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E5%90%8D%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%0A%09%20*%20%0A%09%20*%20%40param%20name%0A%09%20*%20%40return%0A%09%20*%2F%0A%09%40Select(value%20%3D%20%22%20SELECT%20su.*%20FROM%20s_user%20su%20WHERE%20su.name%20%3D%20%23%7Bname%7D%20%22)%0A%09public%20SUser%20findSUserByName(String%20name)%3B%0A%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.dao;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.apache.ibatis.annotations.Mapper;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.apache.ibatis.annotations.Select;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SUser;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;用户信息查询</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Mapper</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">interface</span><span>&nbsp;SUserDao&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据用户名获取用户</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;name</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Select</span><span>(value&nbsp;=&nbsp;</span><span class="string">"&nbsp;SELECT&nbsp;su.*&nbsp;FROM&nbsp;s_user&nbsp;su&nbsp;WHERE&nbsp;su.name&nbsp;=&nbsp;#{name}&nbsp;"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;SUser&nbsp;findSUserByName(String&nbsp;name);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.dao;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;
import com.veiking.sec.bean.SUser;

/**
 * 用户信息查询
 * @author Veiking
 */
@Mapper
public interface SUserDao {
	/**
	 * 根据用户名获取用户
	 * 
	 * @param name
	 * @return
	 */
	@Select(value = " SELECT su.* FROM s_user su WHERE su.name = #{name} ")
	public SUser findSUserByName(String name);

}
</pre>
<br>SRoleDao.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.dao%3B%0A%0Aimport%20java.util.List%3B%0Aimport%20org.apache.ibatis.annotations.Mapper%3B%0Aimport%20org.apache.ibatis.annotations.Select%3B%0Aimport%20com.veiking.sec.bean.SRole%3B%0A%2F**%0A%20*%20%E8%A7%92%E8%89%B2%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Mapper%0Apublic%20interface%20SRoleDao%20%7B%0A%09%2F**%0A%09%20*%20%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7ID%E8%8E%B7%E5%8F%96%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8%0A%09%20*%20%40param%20sUserId%0A%09%20*%20%40return%0A%09%20*%2F%0A%09%40Select(value%3D%22%20SELECT%20sr.*%20FROM%20s_role%20sr%20%22%20%2B%20%0A%09%09%09%09%09%22%20LEFT%20JOIN%20s_user_role%20sur%20ON%20sr.id%20%3D%20sur.fk_role_id%20%22%20%2B%20%0A%09%09%09%09%09%22%20LEFT%20JOIN%20s_user%20su%20ON%20sur.fk_user_id%20%3D%20su.id%20%22%20%2B%20%0A%09%09%09%09%09%22%20WHERE%20su.id%20%3D%20%23%7BsUserId%7D%20%22)%0A%20%20%20%20public%20List%3CSRole%3E%20findSRoleListBySUserId(int%20sUserId)%3B%0A%0A%09%2F**%0A%09%20*%20%E6%A0%B9%E6%8D%AE%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E8%8E%B7%E5%8F%96%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8%0A%09%20*%20%40param%20sPermissionUrl%0A%09%20*%20%40return%0A%09%20*%2F%0A%09%40Select(value%3D%22%20SELECT%20sr.*%20FROM%20s_role%20sr%20%22%20%2B%20%0A%09%09%09%09%09%22%20LEFT%20JOIN%20s_role_permission%20srp%20ON%20sr.id%20%3D%20srp.fk_role_id%20%22%20%2B%20%0A%09%09%09%09%09%22%20LEFT%20JOIN%20s_permission%20sp%20ON%20srp.fk_permission_id%20%3D%20sp.id%20%22%20%2B%20%0A%09%09%09%09%09%22%20WHERE%20sp.url%20%3D%20%23%7BsPermissionUrl%7D%20%22)%0A%09public%20List%3CSRole%3E%20findSRoleListBySPermissionUrl(String%20sPermissionUrl)%3B%0A%7D%0A%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.dao;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;java.util.List;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.apache.ibatis.annotations.Mapper;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.apache.ibatis.annotations.Select;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SRole;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;角色信息查询</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Mapper</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">interface</span><span>&nbsp;SRoleDao&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据用户ID获取角色列表</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;sUserId</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Select</span><span>(value=</span><span class="string">"&nbsp;SELECT&nbsp;sr.*&nbsp;FROM&nbsp;s_role&nbsp;sr&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;LEFT&nbsp;JOIN&nbsp;s_user_role&nbsp;sur&nbsp;ON&nbsp;sr.id&nbsp;=&nbsp;sur.fk_role_id&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;LEFT&nbsp;JOIN&nbsp;s_user&nbsp;su&nbsp;ON&nbsp;sur.fk_user_id&nbsp;=&nbsp;su.id&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;WHERE&nbsp;su.id&nbsp;=&nbsp;#{sUserId}&nbsp;"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;List&lt;SRole&gt;&nbsp;findSRoleListBySUserId(</span><span class="keyword">int</span><span>&nbsp;sUserId);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据资源路径获取角色列表</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;sPermissionUrl</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Select</span><span>(value=</span><span class="string">"&nbsp;SELECT&nbsp;sr.*&nbsp;FROM&nbsp;s_role&nbsp;sr&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;LEFT&nbsp;JOIN&nbsp;s_role_permission&nbsp;srp&nbsp;ON&nbsp;sr.id&nbsp;=&nbsp;srp.fk_role_id&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;LEFT&nbsp;JOIN&nbsp;s_permission&nbsp;sp&nbsp;ON&nbsp;srp.fk_permission_id&nbsp;=&nbsp;sp.id&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;WHERE&nbsp;sp.url&nbsp;=&nbsp;#{sPermissionUrl}&nbsp;"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;List&lt;SRole&gt;&nbsp;findSRoleListBySPermissionUrl(String&nbsp;sPermissionUrl);&nbsp;&nbsp;</span></span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.dao;

import java.util.List;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;
import com.veiking.sec.bean.SRole;
/**
 * 角色信息查询
 * @author Veiking
 */
@Mapper
public interface SRoleDao {
	/**
	 * 根据用户ID获取角色列表
	 * @param sUserId
	 * @return
	 */
	@Select(value=" SELECT sr.* FROM s_role sr " + 
					" LEFT JOIN s_user_role sur ON sr.id = sur.fk_role_id " + 
					" LEFT JOIN s_user su ON sur.fk_user_id = su.id " + 
					" WHERE su.id = #{sUserId} ")
    public List&lt;SRole&gt; findSRoleListBySUserId(int sUserId);

	/**
	 * 根据资源路径获取角色列表
	 * @param sPermissionUrl
	 * @return
	 */
	@Select(value=" SELECT sr.* FROM s_role sr " + 
					" LEFT JOIN s_role_permission srp ON sr.id = srp.fk_role_id " + 
					" LEFT JOIN s_permission sp ON srp.fk_permission_id = sp.id " + 
					" WHERE sp.url = #{sPermissionUrl} ")
	public List&lt;SRole&gt; findSRoleListBySPermissionUrl(String sPermissionUrl);
}

</pre>
<br>SPermissionDao.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.dao%3B%0A%0Aimport%20java.util.List%3B%0A%0Aimport%20org.apache.ibatis.annotations.Mapper%3B%0Aimport%20org.apache.ibatis.annotations.Select%3B%0A%0Aimport%20com.veiking.sec.bean.SPermission%3B%0A%2F**%0A%20*%20%E8%B5%84%E6%BA%90%E6%9D%83%E9%99%90%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Mapper%0Apublic%20interface%20SPermissionDao%20%7B%0A%09%2F**%0A%09%20*%20%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7ID%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8%0A%09%20*%20%40param%20sUserId%0A%09%20*%20%40return%0A%09%20*%2F%0A%09%40Select(value%3D%22%20SELECT%20*%20FROM%20s_permission%20sp%20%22%20%2B%20%0A%09%09%09%22%20LEFT%20JOIN%20s_role_permission%20srp%20ON%20sp.id%20%3D%20srp.fk_permission_id%20%22%20%2B%20%0A%09%09%09%22%20LEFT%20JOIN%20s_role%20sr%20ON%20srp.fk_role_id%20%3D%20sr.id%20%22%20%2B%20%0A%09%09%09%22%20LEFT%20JOIN%20s_user_role%20sur%20ON%20sr.id%20%3D%20sur.fk_role_id%20%22%20%2B%20%0A%09%09%09%22%20LEFT%20JOIN%20s_user%20su%20ON%20sur.fk_user_id%20%3D%20su.id%20%22%20%2B%20%0A%09%09%09%22%20WHERE%20su.id%20%3D%20%23%7BsUserId%7D%20%22)%0A%09public%20List%3CSPermission%3E%20findSPermissionListBySUserId(int%20sUserId)%3B%0A%09%0A%09%2F**%0A%09%20*%20%E6%A0%B9%E6%8D%AE%E8%B5%84%E6%BA%90%E8%B7%AF%E5%BE%84%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8%0A%09%20*%20%40param%20sPermissionUrl%0A%09%20*%20%40return%0A%09%20*%2F%0A%09%40Select(value%3D%22%20SELECT%20*%20FROM%20s_permission%20sp%20WHERE%20sp.url%20%3D%20%23%7BsUserId%7D%20%22)%0A%09public%20List%3CSPermission%3E%20findSPermissionListBySPermissionUrl(String%20sPermissionUrl)%3B%0A%7D%0A%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.dao;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;java.util.List;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.apache.ibatis.annotations.Mapper;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.apache.ibatis.annotations.Select;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SPermission;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;资源权限信息查询</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Mapper</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">interface</span><span>&nbsp;SPermissionDao&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据用户ID获取资源权限列表</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;sUserId</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Select</span><span>(value=</span><span class="string">"&nbsp;SELECT&nbsp;*&nbsp;FROM&nbsp;s_permission&nbsp;sp&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;LEFT&nbsp;JOIN&nbsp;s_role_permission&nbsp;srp&nbsp;ON&nbsp;sp.id&nbsp;=&nbsp;srp.fk_permission_id&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;LEFT&nbsp;JOIN&nbsp;s_role&nbsp;sr&nbsp;ON&nbsp;srp.fk_role_id&nbsp;=&nbsp;sr.id&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;LEFT&nbsp;JOIN&nbsp;s_user_role&nbsp;sur&nbsp;ON&nbsp;sr.id&nbsp;=&nbsp;sur.fk_role_id&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;LEFT&nbsp;JOIN&nbsp;s_user&nbsp;su&nbsp;ON&nbsp;sur.fk_user_id&nbsp;=&nbsp;su.id&nbsp;"</span><span>&nbsp;+&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="string">"&nbsp;WHERE&nbsp;su.id&nbsp;=&nbsp;#{sUserId}&nbsp;"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;List&lt;SPermission&gt;&nbsp;findSPermissionListBySUserId(</span><span class="keyword">int</span><span>&nbsp;sUserId);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据资源路径获取资源权限列表</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;sPermissionUrl</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Select</span><span>(value=</span><span class="string">"&nbsp;SELECT&nbsp;*&nbsp;FROM&nbsp;s_permission&nbsp;sp&nbsp;WHERE&nbsp;sp.url&nbsp;=&nbsp;#{sUserId}&nbsp;"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;List&lt;SPermission&gt;&nbsp;findSPermissionListBySPermissionUrl(String&nbsp;sPermissionUrl);&nbsp;&nbsp;</span></span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.dao;

import java.util.List;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;

import com.veiking.sec.bean.SPermission;
/**
 * 资源权限信息查询
 * @author Veiking
 */
@Mapper
public interface SPermissionDao {
	/**
	 * 根据用户ID获取资源权限列表
	 * @param sUserId
	 * @return
	 */
	@Select(value=" SELECT * FROM s_permission sp " + 
			" LEFT JOIN s_role_permission srp ON sp.id = srp.fk_permission_id " + 
			" LEFT JOIN s_role sr ON srp.fk_role_id = sr.id " + 
			" LEFT JOIN s_user_role sur ON sr.id = sur.fk_role_id " + 
			" LEFT JOIN s_user su ON sur.fk_user_id = su.id " + 
			" WHERE su.id = #{sUserId} ")
	public List&lt;SPermission&gt; findSPermissionListBySUserId(int sUserId);
	
	/**
	 * 根据资源路径获取资源权限列表
	 * @param sPermissionUrl
	 * @return
	 */
	@Select(value=" SELECT * FROM s_permission sp WHERE sp.url = #{sUserId} ")
	public List&lt;SPermission&gt; findSPermissionListBySPermissionUrl(String sPermissionUrl);
}

</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 请注意，这里的几个Dao查询接口是使用注解的方式实现谁，当然，一般mybatis框架通常使用的方式是dao接口+xml脚本，当然个人也是习惯用xml实现较为复杂逻辑的脚本，但是在相对简单逻辑的操作上，直接用注解的方式是清爽的不能再清爽；两者在实际运用中是等效的，也是可以一同使用。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 这几个接口的主要作用是：通过用户名（登录名）来获取用户信息；通过用户ID、资源路径（请求路径）来获取角色列表和权限资源列表。紧接着，本着编程习惯，我们再搞一个服务接口，将上边几个dao的功能整合，统一对外提供数据服务：</span>
<br>
<br>SecurityDataService.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.service%3B%0A%0Aimport%20java.util.List%3B%0A%0Aimport%20org.springframework.beans.factory.annotation.Autowired%3B%0Aimport%20org.springframework.stereotype.Service%3B%0A%0Aimport%20com.veiking.sec.bean.SPermission%3B%0Aimport%20com.veiking.sec.bean.SRole%3B%0Aimport%20com.veiking.sec.bean.SUser%3B%0Aimport%20com.veiking.sec.dao.SPermissionDao%3B%0Aimport%20com.veiking.sec.dao.SRoleDao%3B%0Aimport%20com.veiking.sec.dao.SUserDao%3B%0A%0A%2F**%0A%20*%20Security%20%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1%0A%20*%20%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Service%0Apublic%20class%20SecurityDataService%20%7B%0A%09%40Autowired%0A%09private%20SUserDao%20sUserDao%3B%0A%09%40Autowired%0A%09private%20SRoleDao%20sRoleDao%3B%0A%09%40Autowired%0A%09private%20SPermissionDao%20sPermissionDao%3B%0A%0A%09public%20SUser%20findSUserByName(String%20name)%20%7B%0A%09%09return%20sUserDao.findSUserByName(name)%3B%0A%09%7D%0A%0A%09public%20List%3CSRole%3E%20findSRoleListBySUserId(int%20sUserId)%20%7B%0A%09%09return%20sRoleDao.findSRoleListBySUserId(sUserId)%3B%0A%09%7D%0A%0A%09public%20List%3CSRole%3E%20findSRoleListBySPermissionUrl(String%20sPermissionUrl)%20%7B%0A%09%09return%20sRoleDao.findSRoleListBySPermissionUrl(sPermissionUrl)%3B%0A%09%7D%0A%0A%09public%20List%3CSPermission%3E%20findSPermissionListBySUserId(int%20sUserId)%20%7B%0A%09%09return%20sPermissionDao.findSPermissionListBySUserId(sUserId)%3B%0A%09%7D%0A%0A%09public%20List%3CSPermission%3E%20findSPermissionListBySPermissionUrl(String%20sPermissionUrl)%20%7B%0A%09%09return%20sPermissionDao.findSPermissionListBySPermissionUrl(sPermissionUrl)%3B%0A%09%7D%0A%7D%0A%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.service;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;java.util.List;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.beans.factory.annotation.Autowired;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.stereotype.Service;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SPermission;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SRole;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SUser;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.dao.SPermissionDao;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.dao.SRoleDao;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.dao.SUserDao;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;Security&nbsp;数据服务</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Service</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;SecurityDataService&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Autowired</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;SUserDao&nbsp;sUserDao;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Autowired</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;SRoleDao&nbsp;sRoleDao;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Autowired</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;SPermissionDao&nbsp;sPermissionDao;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;SUser&nbsp;findSUserByName(String&nbsp;name)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;sUserDao.findSUserByName(name);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;List&lt;SRole&gt;&nbsp;findSRoleListBySUserId(</span><span class="keyword">int</span><span>&nbsp;sUserId)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;sRoleDao.findSRoleListBySUserId(sUserId);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;List&lt;SRole&gt;&nbsp;findSRoleListBySPermissionUrl(String&nbsp;sPermissionUrl)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;sRoleDao.findSRoleListBySPermissionUrl(sPermissionUrl);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;List&lt;SPermission&gt;&nbsp;findSPermissionListBySUserId(</span><span class="keyword">int</span><span>&nbsp;sUserId)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;sPermissionDao.findSPermissionListBySUserId(sUserId);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;List&lt;SPermission&gt;&nbsp;findSPermissionListBySPermissionUrl(String&nbsp;sPermissionUrl)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;sPermissionDao.findSPermissionListBySPermissionUrl(sPermissionUrl);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.veiking.sec.bean.SPermission;
import com.veiking.sec.bean.SRole;
import com.veiking.sec.bean.SUser;
import com.veiking.sec.dao.SPermissionDao;
import com.veiking.sec.dao.SRoleDao;
import com.veiking.sec.dao.SUserDao;

/**
 * Security 数据服务
 * 
 * @author Veiking
 */
@Service
public class SecurityDataService {
	@Autowired
	private SUserDao sUserDao;
	@Autowired
	private SRoleDao sRoleDao;
	@Autowired
	private SPermissionDao sPermissionDao;

	public SUser findSUserByName(String name) {
		return sUserDao.findSUserByName(name);
	}

	public List&lt;SRole&gt; findSRoleListBySUserId(int sUserId) {
		return sRoleDao.findSRoleListBySUserId(sUserId);
	}

	public List&lt;SRole&gt; findSRoleListBySPermissionUrl(String sPermissionUrl) {
		return sRoleDao.findSRoleListBySPermissionUrl(sPermissionUrl);
	}

	public List&lt;SPermission&gt; findSPermissionListBySUserId(int sUserId) {
		return sPermissionDao.findSPermissionListBySUserId(sUserId);
	}

	public List&lt;SPermission&gt; findSPermissionListBySPermissionUrl(String sPermissionUrl) {
		return sPermissionDao.findSPermissionListBySPermissionUrl(sPermissionUrl);
	}
}

</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 这个service没有额外的操作，仅仅是传递dao的功能，OK，到此，Spring Security 需要用的数据服务等一些准备部分，我们都已经准备好了，下面的环节，就是重点了。</span>
<br>
<br><strong><span style="font-size: large;">六、重点:Spring Security之用户认证</span></strong>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 经过一番相当罗嗦的铺垫，终于迎来了正题，我们将在接下来的环节里，讲述 Spring Security 认证有关的东西。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 首先，再次回顾，Spring Security 认证有关的重要类或接口:UserDetails、UserDetailsService、AuthenticationProvider，我们将尝试自定义封装UserDetails，经由UserDetailsService提供给AuthenticationProvider，然后和请求消息中获取的用户信息进行对比认证。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 首先，为了刻意的来区分认证和鉴权这里啊范畴，我们先来卖个关子，在包主路径下创建俩包:authentication、authorization，这俩单词简直是很像了，也是特意才用这两个单词，是看到有位前辈在博客中调侃了他们，印象深刻:authentication即认证，authorization即鉴权，注意字母微小的差异下在逻辑实现中不同的含义。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 好，在authentication包下来完成我们 Spring Security 的认证，先新建一个 VUserDetails 类来实现 UserDetails（注:在此，所有的重新实现，都将在原类或接口名称前缀加大写的V，此处仅为示例,如有仿例操作，请根据个人习惯；包括之前的类或接口名，也不是很符合java推荐的命名规则，这只是为了在名称上强调而强调，勿在意，更勿仿效）,代码如下:</span>
<br>
<br>VUserDetails.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.authentication%3B%0A%0Aimport%20java.util.Collection%3B%0Aimport%20java.util.List%3B%0A%0Aimport%20org.slf4j.Logger%3B%0Aimport%20org.slf4j.LoggerFactory%3B%0Aimport%20org.springframework.security.core.GrantedAuthority%3B%0Aimport%20org.springframework.security.core.authority.AuthorityUtils%3B%0Aimport%20org.springframework.security.core.userdetails.UserDetails%3B%0A%0Aimport%20com.google.gson.Gson%3B%0Aimport%20com.veiking.sec.bean.SPermission%3B%0Aimport%20com.veiking.sec.bean.SRole%3B%0Aimport%20com.veiking.sec.bean.SUser%3B%0A%2F**%0A%20*%20%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%8C%E5%8C%85%E5%90%AB%E7%94%A8%E6%88%B7%E5%90%8D%E7%A7%B0%E5%AF%86%E7%A0%81%E5%8F%8A%E7%94%A8%E6%88%B7%E7%8A%B6%E6%80%81%E3%80%81%E6%9D%83%E9%99%90%E7%AD%89%E4%BF%A1%E6%81%AF%0A%20*%20%40author%20Veiking%0A%20*%2F%0Apublic%20class%20VUserDetails%20extends%20SUser%20implements%20UserDetails%7B%0A%0A%09private%20static%20final%20long%20serialVersionUID%20%3D%201L%3B%0A%09Gson%20gson%20%3D%20new%20Gson()%3B%0A%09Logger%20logger%20%3D%20LoggerFactory.getLogger(this.getClass())%3B%0A%09%2F%2F%E7%94%A8%E6%88%B7%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8%0A%09private%20List%3CSRole%3E%20sRoleList%20%3D%20null%3B%0A%09%2F%2F%E7%94%A8%E6%88%B7%E8%B5%84%E6%BA%90%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8%0A%09private%20List%3CSPermission%3E%20sPermissionList%20%3D%20null%3B%0A%09%2F**%0A%09%20*%20%E6%B3%A8%E6%84%8F%E5%90%8E%E8%BE%B9%E7%9A%84%E8%BF%99%E4%B8%A4%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9AsRoleList%E3%80%81sPermissionList%0A%09%20*%20%40param%20sUser%0A%09%20*%20%40param%20sRoleList%0A%09%20*%20%40param%20sPermissionList%0A%09%20*%2F%0A%09public%20VUserDetails(SUser%20sUser%2C%20List%3CSRole%3E%20sRoleList%2C%20List%3CSPermission%3E%20sPermissionList)%20%7B%0A%09%09super(sUser)%3B%0A%09%09this.sRoleList%20%3D%20sRoleList%3B%0A%09%09this.sPermissionList%20%3D%20sPermissionList%3B%0A%09%7D%0A%09%2F**%0A%09%20*%20%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8%E6%96%B9%E6%B3%95%0A%09%20*%20%E5%8F%AF%E4%BB%A5%E7%90%86%E8%A7%A3%E6%88%90%EF%BC%8C%E8%BF%94%E5%9B%9E%E4%BA%86%E4%B8%80%E4%B8%AAList%3CString%3E%EF%BC%8C%E4%B9%8B%E5%90%8E%E6%89%80%E8%B0%93%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E3%80%81%E9%89%B4%E6%9D%83%EF%BC%8C%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E8%B7%9F%E8%BF%99%E4%B8%AAlist%E9%87%8C%E7%9A%84String%E8%BF%9B%E8%A1%8C%E5%AF%B9%E6%AF%94%0A%09%20*%20%E8%BF%99%E9%87%8C%E5%A4%84%E7%90%86%E4%BA%86%E8%A7%92%E8%89%B2%E5%92%8C%E8%B5%84%E6%BA%90%E6%9D%83%E9%99%90%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%BF%99%E4%B9%88%E7%90%86%E8%A7%A3%EF%BC%8C%0A%09%20*%20%E8%A7%92%E8%89%B2%E6%98%AF%E6%9D%83%E9%99%90%E7%9A%84%E6%8A%BD%E8%B1%A1%E9%9B%86%E5%90%88%EF%BC%8C%E6%98%AF%E4%B8%BA%E4%BA%86%E6%9B%B4%E6%96%B9%E4%BE%BF%E7%9A%84%E6%8E%A7%E5%88%B6%E5%92%8C%E5%88%86%E9%85%8D%E6%9D%83%E9%99%90%EF%BC%8C%E8%80%8C%E7%9C%9F%E6%AD%A3%E9%A2%97%E7%B2%92%E5%8C%96%E7%BB%86%E8%8A%82%E6%96%B9%E9%9D%A2%EF%BC%8C%E8%BF%98%E6%98%AF%E9%9C%80%E8%A6%81%E8%B5%84%E6%BA%90%E6%9D%83%E9%99%90%E8%87%AA%E5%B7%B1%E6%9D%A5%E5%81%9A%0A%09%20*%2F%0A%09%40Override%0A%09public%20Collection%3C%3F%20extends%20GrantedAuthority%3E%20getAuthorities()%20%7B%0A%09%09StringBuilder%20authoritiesBuilder%20%3D%20new%20StringBuilder(%22%22)%3B%0A%09%09List%3CSRole%3E%20tempRoleList%20%3D%20this.getsRoleList()%3B%0A%09%09if%20(null%20!%3D%20tempRoleList)%20%7B%0A%09%09%09for%20(SRole%20role%20%3A%20tempRoleList)%20%7B%0A%09%09%09%09authoritiesBuilder.append(%22%2C%22).append(role.getRole())%3B%0A%09%09%09%7D%0A%09%09%7D%0A%09%09List%3CSPermission%3E%20tempPermissionList%20%3D%20this.getsPermissionList()%3B%0A%09%09if%20(null%20!%3D%20tempPermissionList)%20%7B%0A%09%09%09for%20(SPermission%20permission%20%3A%20tempPermissionList)%20%7B%0A%09%09%09%09authoritiesBuilder.append(%22%2C%22).append(permission.getPermission())%3B%0A%09%09%09%7D%0A%09%09%7D%0A%09%09String%20authoritiesStr%20%3D%20%22%22%3B%0A%09%09if(authoritiesBuilder.length()%3E0)%20%7B%0A%09%09%09authoritiesStr%20%3D%20authoritiesBuilder.deleteCharAt(0).toString()%3B%0A%09%09%7D%0A%09%09logger.info(%22VUserDetails%20getAuthorities%20%5BauthoritiesStr%3D%7B%7D%20%22%2C%20authoritiesStr)%3B%0A%09%09return%20AuthorityUtils.commaSeparatedStringToAuthorityList(authoritiesStr)%3B%0A%09%7D%0A%0A%09%40Override%0A%09public%20String%20getPassword()%20%7B%0A%09%09return%20super.getPassword()%3B%0A%09%7D%0A%0A%09%40Override%0A%09public%20String%20getUsername()%20%7B%0A%09%09return%20super.getName()%3B%0A%09%7D%0A%0A%09%2F**%0A%09%20*%20%E5%88%A4%E6%96%AD%E8%B4%A6%E5%8F%B7%E6%98%AF%E5%90%A6%E5%B7%B2%E7%BB%8F%E8%BF%87%E6%9C%9F%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%B2%A1%E6%9C%89%E8%BF%87%E6%9C%9F%0A%09%20*%2F%0A%09%40Override%0A%09public%20boolean%20isAccountNonExpired()%20%7B%0A%09%09%2F%2F%20TODO%20Auto-generated%20method%20stub%0A%09%09return%20true%3B%0A%09%7D%0A%0A%09%2F**%0A%09%20*%20%E5%88%A4%E6%96%AD%E8%B4%A6%E5%8F%B7%E6%98%AF%E5%90%A6%E8%A2%AB%E9%94%81%E5%AE%9A%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%B2%A1%E6%9C%89%E9%94%81%E5%AE%9A%0A%09%20*%2F%0A%09%40Override%0A%09public%20boolean%20isAccountNonLocked()%20%7B%0A%09%09return%20true%3B%0A%09%7D%0A%0A%09%2F**%0A%09%20*%20%E5%88%A4%E6%96%AD%E4%BF%A1%E7%94%A8%E5%87%AD%E8%AF%81%E6%98%AF%E5%90%A6%E8%BF%87%E6%9C%9F%EF%BC%8C%E9%BB%98%E8%AE%A4%E6%B2%A1%E6%9C%89%E8%BF%87%E6%9C%9F%0A%09%20*%2F%0A%09%40Override%0A%09public%20boolean%20isCredentialsNonExpired()%20%7B%0A%09%09return%20true%3B%0A%09%7D%0A%0A%20%20%20%20%2F**%0A%20%20%20%20%20*%20%E5%88%A4%E6%96%AD%E8%B4%A6%E5%8F%B7%E6%98%AF%E5%90%A6%E5%8F%AF%E7%94%A8%EF%BC%8C%E9%BB%98%E8%AE%A4%E5%8F%AF%E7%94%A8%0A%20%20%20%20%20*%2F%0A%09%40Override%0A%09public%20boolean%20isEnabled()%20%7B%0A%09%09return%20true%3B%0A%09%7D%0A%0A%09public%20List%3CSRole%3E%20getsRoleList()%20%7B%0A%09%09return%20sRoleList%3B%0A%09%7D%0A%0A%09public%20void%20setsRoleList(List%3CSRole%3E%20sRoleList)%20%7B%0A%09%09this.sRoleList%20%3D%20sRoleList%3B%0A%09%7D%0A%0A%09public%20List%3CSPermission%3E%20getsPermissionList()%20%7B%0A%09%09return%20sPermissionList%3B%0A%09%7D%0A%0A%09public%20void%20setsPermissionList(List%3CSPermission%3E%20sPermissionList)%20%7B%0A%09%09this.sPermissionList%20%3D%20sPermissionList%3B%0A%09%7D%0A%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.authentication;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;java.util.Collection;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;java.util.List;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.slf4j.Logger;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.slf4j.LoggerFactory;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.core.GrantedAuthority;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.core.authority.AuthorityUtils;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.core.userdetails.UserDetails;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;com.google.gson.Gson;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SPermission;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SRole;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SUser;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;用户信息的封装，包含用户名称密码及用户状态、权限等信息</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;VUserDetails&nbsp;</span><span class="keyword">extends</span><span>&nbsp;SUser&nbsp;</span><span class="keyword">implements</span><span>&nbsp;UserDetails{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">final</span><span>&nbsp;</span><span class="keyword">long</span><span>&nbsp;serialVersionUID&nbsp;=&nbsp;1L;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;Gson&nbsp;gson&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;Gson();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;Logger&nbsp;logger&nbsp;=&nbsp;LoggerFactory.getLogger(<span class="keyword">this</span><span>.getClass());&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//用户角色列表</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;List&lt;SRole&gt;&nbsp;sRoleList&nbsp;=&nbsp;</span><span class="keyword">null</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//用户资源权限列表</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;List&lt;SPermission&gt;&nbsp;sPermissionList&nbsp;=&nbsp;</span><span class="keyword">null</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;注意后边的这两个参数：sRoleList、sPermissionList</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;sUser</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;sRoleList</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;sPermissionList</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;VUserDetails(SUser&nbsp;sUser,&nbsp;List&lt;SRole&gt;&nbsp;sRoleList,&nbsp;List&lt;SPermission&gt;&nbsp;sPermissionList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">super</span><span>(sUser);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span><span>.sRoleList&nbsp;=&nbsp;sRoleList;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span><span>.sPermissionList&nbsp;=&nbsp;sPermissionList;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;获取用户权限列表方法</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;可以理解成，返回了一个List&lt;String&gt;，之后所谓的权限控制、鉴权，其实就是跟这个list里的String进行对比</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;这里处理了角色和资源权限两个列表，可以这么理解，</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;角色是权限的抽象集合，是为了更方便的控制和分配权限，而真正颗粒化细节方面，还是需要资源权限自己来做</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;Collection&lt;?&nbsp;</span><span class="keyword">extends</span><span>&nbsp;GrantedAuthority&gt;&nbsp;getAuthorities()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuilder&nbsp;authoritiesBuilder&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;StringBuilder(</span><span class="string">""</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;SRole&gt;&nbsp;tempRoleList&nbsp;=&nbsp;<span class="keyword">this</span><span>.getsRoleList();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span><span>&nbsp;(</span><span class="keyword">null</span><span>&nbsp;!=&nbsp;tempRoleList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span><span>&nbsp;(SRole&nbsp;role&nbsp;:&nbsp;tempRoleList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;authoritiesBuilder.append(<span class="string">","</span><span>).append(role.getRole());&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;SPermission&gt;&nbsp;tempPermissionList&nbsp;=&nbsp;<span class="keyword">this</span><span>.getsPermissionList();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span><span>&nbsp;(</span><span class="keyword">null</span><span>&nbsp;!=&nbsp;tempPermissionList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span><span>&nbsp;(SPermission&nbsp;permission&nbsp;:&nbsp;tempPermissionList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;authoritiesBuilder.append(<span class="string">","</span><span>).append(permission.getPermission());&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;authoritiesStr&nbsp;=&nbsp;<span class="string">""</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span><span>(authoritiesBuilder.length()&gt;</span><span class="number">0</span><span>)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;authoritiesStr&nbsp;=&nbsp;authoritiesBuilder.deleteCharAt(<span class="number">0</span><span>).toString();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="string">"VUserDetails&nbsp;getAuthorities&nbsp;[authoritiesStr={}&nbsp;"</span><span>,&nbsp;authoritiesStr);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;AuthorityUtils.commaSeparatedStringToAuthorityList(authoritiesStr);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;String&nbsp;getPassword()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">super</span><span>.getPassword();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;String&nbsp;getUsername()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">super</span><span>.getName();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;判断账号是否已经过期，默认没有过期</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">boolean</span><span>&nbsp;isAccountNonExpired()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;TODO&nbsp;Auto-generated&nbsp;method&nbsp;stub</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">true</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;判断账号是否被锁定，默认没有锁定</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">boolean</span><span>&nbsp;isAccountNonLocked()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">true</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;判断信用凭证是否过期，默认没有过期</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">boolean</span><span>&nbsp;isCredentialsNonExpired()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">true</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;判断账号是否可用，默认可用</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">boolean</span><span>&nbsp;isEnabled()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">true</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;List&lt;SRole&gt;&nbsp;getsRoleList()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;sRoleList;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;setsRoleList(List&lt;SRole&gt;&nbsp;sRoleList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span><span>.sRoleList&nbsp;=&nbsp;sRoleList;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;List&lt;SPermission&gt;&nbsp;getsPermissionList()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;sPermissionList;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;setsPermissionList(List&lt;SPermission&gt;&nbsp;sPermissionList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span><span>.sPermissionList&nbsp;=&nbsp;sPermissionList;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.authentication;

import java.util.Collection;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.AuthorityUtils;
import org.springframework.security.core.userdetails.UserDetails;

import com.google.gson.Gson;
import com.veiking.sec.bean.SPermission;
import com.veiking.sec.bean.SRole;
import com.veiking.sec.bean.SUser;
/**
 * 用户信息的封装，包含用户名称密码及用户状态、权限等信息
 * @author Veiking
 */
public class VUserDetails extends SUser implements UserDetails{

	private static final long serialVersionUID = 1L;
	Gson gson = new Gson();
	Logger logger = LoggerFactory.getLogger(this.getClass());
	//用户角色列表
	private List&lt;SRole&gt; sRoleList = null;
	//用户资源权限列表
	private List&lt;SPermission&gt; sPermissionList = null;
	/**
	 * 注意后边的这两个参数：sRoleList、sPermissionList
	 * @param sUser
	 * @param sRoleList
	 * @param sPermissionList
	 */
	public VUserDetails(SUser sUser, List&lt;SRole&gt; sRoleList, List&lt;SPermission&gt; sPermissionList) {
		super(sUser);
		this.sRoleList = sRoleList;
		this.sPermissionList = sPermissionList;
	}
	/**
	 * 获取用户权限列表方法
	 * 可以理解成，返回了一个List&lt;String&gt;，之后所谓的权限控制、鉴权，其实就是跟这个list里的String进行对比
	 * 这里处理了角色和资源权限两个列表，可以这么理解，
	 * 角色是权限的抽象集合，是为了更方便的控制和分配权限，而真正颗粒化细节方面，还是需要资源权限自己来做
	 */
	@Override
	public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() {
		StringBuilder authoritiesBuilder = new StringBuilder("");
		List&lt;SRole&gt; tempRoleList = this.getsRoleList();
		if (null != tempRoleList) {
			for (SRole role : tempRoleList) {
				authoritiesBuilder.append(",").append(role.getRole());
			}
		}
		List&lt;SPermission&gt; tempPermissionList = this.getsPermissionList();
		if (null != tempPermissionList) {
			for (SPermission permission : tempPermissionList) {
				authoritiesBuilder.append(",").append(permission.getPermission());
			}
		}
		String authoritiesStr = "";
		if(authoritiesBuilder.length()&gt;0) {
			authoritiesStr = authoritiesBuilder.deleteCharAt(0).toString();
		}
		logger.info("VUserDetails getAuthorities [authoritiesStr={} ", authoritiesStr);
		return AuthorityUtils.commaSeparatedStringToAuthorityList(authoritiesStr);
	}

	@Override
	public String getPassword() {
		return super.getPassword();
	}

	@Override
	public String getUsername() {
		return super.getName();
	}

	/**
	 * 判断账号是否已经过期，默认没有过期
	 */
	@Override
	public boolean isAccountNonExpired() {
		// TODO Auto-generated method stub
		return true;
	}

	/**
	 * 判断账号是否被锁定，默认没有锁定
	 */
	@Override
	public boolean isAccountNonLocked() {
		return true;
	}

	/**
	 * 判断信用凭证是否过期，默认没有过期
	 */
	@Override
	public boolean isCredentialsNonExpired() {
		return true;
	}

    /**
     * 判断账号是否可用，默认可用
     */
	@Override
	public boolean isEnabled() {
		return true;
	}

	public List&lt;SRole&gt; getsRoleList() {
		return sRoleList;
	}

	public void setsRoleList(List&lt;SRole&gt; sRoleList) {
		this.sRoleList = sRoleList;
	}

	public List&lt;SPermission&gt; getsPermissionList() {
		return sPermissionList;
	}

	public void setsPermissionList(List&lt;SPermission&gt; sPermissionList) {
		this.sPermissionList = sPermissionList;
	}

}
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 注意这个VUserDetails，它继承SUser并实现了UserDetails，这个类主要功能就是封装用户信息，包括从SUser继承来的用户名密码等属性，还有两个角色和权限的列表,注意这个 getAuthorities()，这个方法主要工作是提供一组框架定义的权限列表，可以留意下源码,这个并没有定义具体类型,我们这里就用String类型实现这个权限。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 这里还要解释下，我们在getAuthorities方法里里分别循环了两个列表来加工 Spring Security 需要权限信息,即 tempRoleList 和 tempPermissionList，可以这样子理解，角色和权限的概念，角色本身是权限的抽象集合，是协助我们开发管理的东西，真正意义的东西还是颗粒细小的权限。添个插曲，在本人最初接触到权限设计的时候，总是傻傻的被二者的关系搞晕，加上一些实际应用的系统还乐此不疲的在权限命名上"ROLE"来"ROLE"去的,甚至一些方法命名本身也在混淆这二者(怀疑可能是英语的使用习惯之类的原因),导致早先的我常常常常陷入对二者的理解困惑上，当然现在清晰的很多: 在大块儿整体性的权限控制上，角色控制为主；细化到页面小块儿、按钮级别的，权限控制为主；一般再加上访问URL的过滤鉴权，基本上一套强壮的权限控制体系是稳稳的在这儿了。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 最后注意下代码里的几个isXXX方法，这些是一些细节补充，一般默认，也可以重写控制下逻辑；紧接着我们新建一个 VUserDetailsService 类，来实现UserDetailsService，代码如下:</span>
<br>
<br>VUserDetailsService.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.authentication%3B%0A%0Aimport%20java.util.List%3B%0A%0Aimport%20org.springframework.beans.factory.annotation.Autowired%3B%0Aimport%20org.springframework.security.core.userdetails.UserDetails%3B%0Aimport%20org.springframework.security.core.userdetails.UserDetailsService%3B%0Aimport%20org.springframework.security.core.userdetails.UsernameNotFoundException%3B%0Aimport%20org.springframework.stereotype.Service%3B%0A%0Aimport%20com.veiking.sec.bean.SPermission%3B%0Aimport%20com.veiking.sec.bean.SRole%3B%0Aimport%20com.veiking.sec.bean.SUser%3B%0Aimport%20com.veiking.sec.service.SecurityDataService%3B%0A%2F**%0A%20*%20%E6%8F%90%E4%BE%9B%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E5%B0%81%E8%A3%85%E6%9C%8D%E5%8A%A1%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Service%0Apublic%20class%20VUserDetailsService%20implements%20UserDetailsService%20%7B%0A%0A%09%40Autowired%0A%09SecurityDataService%20securityDataService%3B%0A%09%2F**%0A%09%20*%20%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%AD%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E5%B0%81%E8%A3%85%EF%BC%8C%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AAUserDetails%0A%09%20*%2F%0A%09%40Override%0A%09public%20UserDetails%20loadUserByUsername(String%20username)%20throws%20UsernameNotFoundException%20%7B%0A%09%09SUser%20sUser%20%3D%20securityDataService.findSUserByName(username)%3B%0A%09%09%2F%2F%E7%94%A8%E6%88%B7%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8%0A%09%09List%3CSRole%3E%20sRoleList%20%3D%20securityDataService.findSRoleListBySUserId(sUser.getId())%3B%0A%09%09%2F%2F%E7%94%A8%E6%88%B7%E8%B5%84%E6%BA%90%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8%0A%09%09List%3CSPermission%3E%20sPermissionList%20%3D%20securityDataService.findSPermissionListBySUserId(sUser.getId())%3B%0A%09%09return%20new%20VUserDetails(sUser%2C%20sRoleList%2C%20sPermissionList)%3B%0A%09%7D%0A%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.authentication;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;java.util.List;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.beans.factory.annotation.Autowired;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.core.userdetails.UserDetails;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.core.userdetails.UserDetailsService;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.core.userdetails.UsernameNotFoundException;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.stereotype.Service;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SPermission;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SRole;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SUser;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.service.SecurityDataService;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;提供用户信息封装服务</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Service</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;VUserDetailsService&nbsp;</span><span class="keyword">implements</span><span>&nbsp;UserDetailsService&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Autowired</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;SecurityDataService&nbsp;securityDataService;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;根据用户输入的用户名返回数据源中用户信息的封装，返回一个UserDetails</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;UserDetails&nbsp;loadUserByUsername(String&nbsp;username)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;UsernameNotFoundException&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SUser&nbsp;sUser&nbsp;=&nbsp;securityDataService.findSUserByName(username);&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//用户角色列表</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;SRole&gt;&nbsp;sRoleList&nbsp;=&nbsp;securityDataService.findSRoleListBySUserId(sUser.getId());&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//用户资源权限列表</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;SPermission&gt;&nbsp;sPermissionList&nbsp;=&nbsp;securityDataService.findSPermissionListBySUserId(sUser.getId());&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">new</span><span>&nbsp;VUserDetails(sUser,&nbsp;sRoleList,&nbsp;sPermissionList);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.authentication;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.veiking.sec.bean.SPermission;
import com.veiking.sec.bean.SRole;
import com.veiking.sec.bean.SUser;
import com.veiking.sec.service.SecurityDataService;
/**
 * 提供用户信息封装服务
 * @author Veiking
 */
@Service
public class VUserDetailsService implements UserDetailsService {

	@Autowired
	SecurityDataService securityDataService;
	/**
	 * 根据用户输入的用户名返回数据源中用户信息的封装，返回一个UserDetails
	 */
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		SUser sUser = securityDataService.findSUserByName(username);
		//用户角色列表
		List&lt;SRole&gt; sRoleList = securityDataService.findSRoleListBySUserId(sUser.getId());
		//用户资源权限列表
		List&lt;SPermission&gt; sPermissionList = securityDataService.findSPermissionListBySUserId(sUser.getId());
		return new VUserDetails(sUser, sRoleList, sPermissionList);
	}

}
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 这个类基本上没啥好说的，服务提供者，就是一个搬运工，看这个loadUserByUsername（）方法，拿到用户基本信息、角色列表和资源权限列表后，构造一个 VUserDetails 对象，OK返回。接下来是一个小重点，我们创建一个 VAuthenticationProvider 类来实现 AuthenticationProvider，代码如下:</span>
<br>
<br>VAuthenticationProvider.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.authentication%3B%0A%0Aimport%20org.slf4j.Logger%3B%0Aimport%20org.slf4j.LoggerFactory%3B%0Aimport%20org.springframework.beans.factory.annotation.Autowired%3B%0Aimport%20org.springframework.security.authentication.AuthenticationProvider%3B%0Aimport%20org.springframework.security.authentication.BadCredentialsException%3B%0Aimport%20org.springframework.security.authentication.UsernamePasswordAuthenticationToken%3B%0Aimport%20org.springframework.security.core.Authentication%3B%0Aimport%20org.springframework.security.core.AuthenticationException%3B%0Aimport%20org.springframework.stereotype.Component%3B%0A%0Aimport%20com.google.gson.Gson%3B%0A%2F**%0A%20*%20%E8%AE%A4%E8%AF%81%E6%8F%90%E4%BE%9B%E8%80%85%EF%BC%8C%E6%A0%A1%E9%AA%8C%E7%94%A8%E6%88%B7%EF%BC%8C%E7%99%BB%E5%BD%95%E5%90%8D%E5%AF%86%E7%A0%81%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%90%91%E7%B3%BB%E7%BB%9F%E6%8F%90%E4%BE%9B%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%E7%9A%84%E7%BB%BC%E5%90%88%E5%B0%81%E8%A3%85%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Component%0Apublic%20class%20VAuthenticationProvider%20implements%20AuthenticationProvider%20%7B%0A%09Gson%20gson%20%3D%20new%20Gson()%3B%0A%09Logger%20logger%20%3D%20LoggerFactory.getLogger(this.getClass())%3B%0A%09%40Autowired%0A%09VUserDetailsService%20vUserDetailsService%3B%0A%09%2F**%0A%09%20*%20%E9%A6%96%E5%85%88%EF%BC%8C%E5%9C%A8%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E7%B3%BB%E7%BB%9F%E5%B0%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5%E7%9A%84%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E5%B0%81%E8%A3%85%E6%88%90%E4%B8%80%E4%B8%AAAuthentication%E5%AF%B9%E8%B1%A1%0A%09%20*%20%E7%84%B6%E5%90%8E%EF%BC%8C%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E5%90%8D%E5%8E%BB%E6%95%B0%E6%8D%AE%E6%BA%90%E4%B8%AD%E6%9F%A5%E6%89%BE%E7%94%A8%E6%88%B7%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%95%B0%E6%8D%AE%E6%98%AF%E5%B0%81%E8%A3%85%E6%88%90%E7%9A%84VUserDetails%E5%AF%B9%E8%B1%A1%0A%09%20*%20%E6%8E%A5%E7%9D%80%EF%BC%8C%E5%B0%86%E4%B8%A4%E4%B8%AA%E5%AF%B9%E8%B1%A1%E8%BF%9B%E8%A1%8C%E4%BF%A1%E6%81%AF%E6%AF%94%E5%AF%B9%EF%BC%8C%E5%A6%82%E6%9E%9C%E5%AF%86%E7%A0%81%E6%AD%A3%E7%A1%AE%EF%BC%8C%E9%80%9A%E8%BF%87%E6%A0%A1%E9%AA%8C%E8%AE%A4%E8%AF%81%0A%09%20*%20%E6%9C%80%E5%90%8E%EF%BC%8C%E5%B0%86%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%EF%BC%88%E5%90%AB%E8%BA%AB%E4%BB%BD%E4%BF%A1%E6%81%AF%E3%80%81%E7%BB%86%E8%8A%82%E4%BF%A1%E6%81%AF%E3%80%81%E5%AF%86%E7%A0%81%E3%80%81%E6%9D%83%E9%99%90%E7%AD%89%EF%BC%89%E5%B0%81%E8%A3%85%E6%88%90%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E6%AD%A4%E5%A4%84%E5%8F%82%E8%80%83UsernamePasswordAuthenticationToken%0A%09%20*%20%E6%9C%80%E6%9C%80%E5%90%8E%EF%BC%8C%E4%BC%9A%E5%B0%86%E8%BF%99%E4%B8%AA%E5%AF%B9%E8%B1%A1%E4%BA%A4%E7%BB%99%E7%B3%BB%E7%BB%9FSecurityContextHolder%E4%B8%AD%EF%BC%88%E5%8A%9F%E8%83%BD%E7%B1%BB%E4%BC%BCSession%EF%BC%89%EF%BC%8C%E4%BB%A5%E4%BE%BF%E5%90%8E%E6%9C%9F%E9%9A%8F%E6%97%B6%E5%8F%96%E7%94%A8%0A%09%20*%2F%0A%09%40Override%0A%09public%20Authentication%20authenticate(Authentication%20authentication)%20throws%20AuthenticationException%20%7B%0A%09%09String%20username%20%3D%20authentication.getName()%3B%0A%09%09String%20password%20%3D%20authentication.getCredentials().toString()%3B%0A%09%09logger.info(%22VAuthenticationProvider%20authenticate%20login%20user%20%5Busername%3D%7B%7D%2C%20password%3D%7B%7D%5D%22%2C%20username%2C%20password)%3B%0A%09%09VUserDetails%20vUserDetails%20%3D%20(VUserDetails)vUserDetailsService.loadUserByUsername(username)%3B%0A%09%09logger.info(%22VAuthenticationProvider%20authenticate%20vUserDetails%20%5BvUserDetails%3D%7B%7D%5D%22%2C%20gson.toJson(vUserDetails))%3B%0A%20%20%20%20%20%20%20%20if(vUserDetails%20%3D%3D%20null)%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20BadCredentialsException(%22%E7%94%A8%E6%88%B7%E6%B2%A1%E6%9C%89%E6%89%BE%E5%88%B0%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20if%20(!password.equals(vUserDetails.getPassword()))%20%7B%0A%20%20%20%20%09%09logger.info(%22VAuthenticationProvider%20authenticate%20BadCredentialsException%20%5BinputPassword%3D%7B%7D%2C%20DBPassword%3D%7B%7D%5D%22%2C%20password%2C%20vUserDetails.getPassword())%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20BadCredentialsException(%22%E5%AF%86%E7%A0%81%E9%94%99%E8%AF%AF%22)%3B%0A%20%20%20%20%20%20%20%20%7D%0A%09%09%2F%2F%E8%AE%A4%E8%AF%81%E6%A0%A1%E9%AA%8C%E9%80%9A%E8%BF%87%E5%90%8E%EF%BC%8C%E5%B0%81%E8%A3%85UsernamePasswordAuthenticationToken%E8%BF%94%E5%9B%9E%0A%09%09return%20new%20UsernamePasswordAuthenticationToken(vUserDetails%2C%20password%2C%20vUserDetails.getAuthorities())%3B%0A%09%7D%0A%20%0A%09%40Override%0A%09public%20boolean%20supports(Class%3C%3F%3E%20authentication)%20%7B%0A%09%09return%20true%3B%0A%09%7D%0A%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.authentication;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.slf4j.Logger;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.slf4j.LoggerFactory;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.beans.factory.annotation.Autowired;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.authentication.AuthenticationProvider;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.authentication.BadCredentialsException;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.core.Authentication;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.core.AuthenticationException;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.stereotype.Component;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;com.google.gson.Gson;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;认证提供者，校验用户，登录名密码，以及向系统提供一个用户信息的综合封装</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Component</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;VAuthenticationProvider&nbsp;</span><span class="keyword">implements</span><span>&nbsp;AuthenticationProvider&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;Gson&nbsp;gson&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;Gson();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;Logger&nbsp;logger&nbsp;=&nbsp;LoggerFactory.getLogger(<span class="keyword">this</span><span>.getClass());&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Autowired</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;VUserDetailsService&nbsp;vUserDetailsService;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;首先，在用户登录的时候，系统将用户输入的的用户名和密码封装成一个Authentication对象</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;然后，根据用户名去数据源中查找用户的数据，这个数据是封装成的VUserDetails对象</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;接着，将两个对象进行信息比对，如果密码正确，通过校验认证</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;最后，将用户信息（含身份信息、细节信息、密码、权限等）封装成一个对象，此处参考UsernamePasswordAuthenticationToken</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;最最后，会将这个对象交给系统SecurityContextHolder中（功能类似Session），以便后期随时取用</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;Authentication&nbsp;authenticate(Authentication&nbsp;authentication)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;AuthenticationException&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;username&nbsp;=&nbsp;authentication.getName();&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;password&nbsp;=&nbsp;authentication.getCredentials().toString();&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="string">"VAuthenticationProvider&nbsp;authenticate&nbsp;login&nbsp;user&nbsp;[username={},&nbsp;password={}]"</span><span>,&nbsp;username,&nbsp;password);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VUserDetails&nbsp;vUserDetails&nbsp;=&nbsp;(VUserDetails)vUserDetailsService.loadUserByUsername(username);&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="string">"VAuthenticationProvider&nbsp;authenticate&nbsp;vUserDetails&nbsp;[vUserDetails={}]"</span><span>,&nbsp;gson.toJson(vUserDetails));&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span><span>(vUserDetails&nbsp;==&nbsp;</span><span class="keyword">null</span><span>){&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">throw</span><span>&nbsp;</span><span class="keyword">new</span><span>&nbsp;BadCredentialsException(</span><span class="string">"用户没有找到"</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span><span>&nbsp;(!password.equals(vUserDetails.getPassword()))&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="string">"VAuthenticationProvider&nbsp;authenticate&nbsp;BadCredentialsException&nbsp;[inputPassword={},&nbsp;DBPassword={}]"</span><span>,&nbsp;password,&nbsp;vUserDetails.getPassword());&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">throw</span><span>&nbsp;</span><span class="keyword">new</span><span>&nbsp;BadCredentialsException(</span><span class="string">"密码错误"</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//认证校验通过后，封装UsernamePasswordAuthenticationToken返回</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">new</span><span>&nbsp;UsernamePasswordAuthenticationToken(vUserDetails,&nbsp;password,&nbsp;vUserDetails.getAuthorities());&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">boolean</span><span>&nbsp;supports(Class&lt;?&gt;&nbsp;authentication)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">true</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.authentication;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.stereotype.Component;

import com.google.gson.Gson;
/**
 * 认证提供者，校验用户，登录名密码，以及向系统提供一个用户信息的综合封装
 * @author Veiking
 */
@Component
public class VAuthenticationProvider implements AuthenticationProvider {
	Gson gson = new Gson();
	Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired
	VUserDetailsService vUserDetailsService;
	/**
	 * 首先，在用户登录的时候，系统将用户输入的的用户名和密码封装成一个Authentication对象
	 * 然后，根据用户名去数据源中查找用户的数据，这个数据是封装成的VUserDetails对象
	 * 接着，将两个对象进行信息比对，如果密码正确，通过校验认证
	 * 最后，将用户信息（含身份信息、细节信息、密码、权限等）封装成一个对象，此处参考UsernamePasswordAuthenticationToken
	 * 最最后，会将这个对象交给系统SecurityContextHolder中（功能类似Session），以便后期随时取用
	 */
	@Override
	public Authentication authenticate(Authentication authentication) throws AuthenticationException {
		String username = authentication.getName();
		String password = authentication.getCredentials().toString();
		logger.info("VAuthenticationProvider authenticate login user [username={}, password={}]", username, password);
		VUserDetails vUserDetails = (VUserDetails)vUserDetailsService.loadUserByUsername(username);
		logger.info("VAuthenticationProvider authenticate vUserDetails [vUserDetails={}]", gson.toJson(vUserDetails));
        if(vUserDetails == null){
            throw new BadCredentialsException("用户没有找到");
        }
        if (!password.equals(vUserDetails.getPassword())) {
    		logger.info("VAuthenticationProvider authenticate BadCredentialsException [inputPassword={}, DBPassword={}]", password, vUserDetails.getPassword());
            throw new BadCredentialsException("密码错误");
        }
		//认证校验通过后，封装UsernamePasswordAuthenticationToken返回
		return new UsernamePasswordAuthenticationToken(vUserDetails, password, vUserDetails.getAuthorities());
	}
 
	@Override
	public boolean supports(Class&lt;?&gt; authentication) {
		return true;
	}

}
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 这个实现类的核心就是authenticate方法，一步步看，系统会将用户在登录请求操作的时候，把输入的用户名密码等，封装到一个Authentication对象中，我们从这个对象里拿到用户名，通过 VUserDetailsService 获取到 VUserDetails 对象，然后拿这个对象的密码属性，和请求Authentication对象中获取的密码进行对比，如果一切OK，验证功过，然后再将这些所有信息，整体封装成一个Authentication对象（这里边我们用的是UsernamePasswordAuthenticationToken），交给系统框架，后期可以随时取用。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 好了，经过上面的工作，用户认证的逻辑已经完事儿了，我们要做访问工作，这里还要做些配置操作，这里分别新建俩类，代码如下:</span>
<br>
<br>
<br>WebMvcConfig.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec%3B%0A%0Aimport%20org.springframework.context.annotation.Configuration%3B%0Aimport%20org.springframework.web.servlet.config.annotation.ViewControllerRegistry%3B%0Aimport%20org.springframework.web.servlet.config.annotation.WebMvcConfigurer%3B%0A%2F**%0A%20*%20%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E9%85%8D%E7%BD%AE%E7%B1%BB%0A%20*%20%E5%8F%AF%E4%BB%A5%E7%90%86%E8%A7%A3%E6%88%90%E5%81%9A%E7%AE%80%E5%8D%95%E8%AE%BF%E9%97%AE%E8%BF%87%E6%BB%A4%E7%9A%84%EF%BC%8C%E8%BD%AC%E5%8F%91%E5%88%B0%E7%9B%B8%E5%BA%94%E7%9A%84%E8%A7%86%E5%9B%BE%E9%A1%B5%E9%9D%A2%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Configuration%0Apublic%20class%20WebMvcConfig%20implements%20WebMvcConfigurer%20%7B%0A%20%20%20%20%40Override%0A%20%20%20%20public%20void%20addViewControllers(ViewControllerRegistry%20registry)%20%7B%0A%20%20%20%20%20%20%20%20registry.addViewController(%22%2Flogin%22).setViewName(%22login%22)%3B%0A%20%20%20%20%20%20%20%20registry.addViewController(%22%2F%22).setViewName(%22index%22)%3B%0A%20%20%20%20%20%20%20%20registry.addViewController(%22%2Findex%22).setViewName(%22index%22)%3B%0A%20%20%20%20%7D%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.context.annotation.Configuration;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.web.servlet.config.annotation.ViewControllerRegistry;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.web.servlet.config.annotation.WebMvcConfigurer;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;访问路径配置类</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;可以理解成做简单访问过滤的，转发到相应的视图页面</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Configuration</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;WebMvcConfig&nbsp;</span><span class="keyword">implements</span><span>&nbsp;WebMvcConfigurer&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;addViewControllers(ViewControllerRegistry&nbsp;registry)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registry.addViewController(<span class="string">"/login"</span><span>).setViewName(</span><span class="string">"login"</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registry.addViewController(<span class="string">"/"</span><span>).setViewName(</span><span class="string">"index"</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registry.addViewController(<span class="string">"/index"</span><span>).setViewName(</span><span class="string">"index"</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
/**
 * 访问路径配置类
 * 可以理解成做简单访问过滤的，转发到相应的视图页面
 * @author Veiking
 */
@Configuration
public class WebMvcConfig implements WebMvcConfigurer {
    @Override
    public void addViewControllers(ViewControllerRegistry registry) {
        registry.addViewController("/login").setViewName("login");
        registry.addViewController("/").setViewName("index");
        registry.addViewController("/index").setViewName("index");
    }
}
</pre>
<br>PageController.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.controller%3B%0A%0Aimport%20org.springframework.stereotype.Controller%3B%0Aimport%20org.springframework.ui.Model%3B%0Aimport%20org.springframework.web.bind.annotation.RequestMapping%3B%0A%2F**%0A%20*%20%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2%E5%88%86%E5%8F%91%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%92%8CWebMvcConfig%E7%9A%84%E5%AF%B9%E6%AF%94%EF%BC%8C%E5%8A%9F%E8%83%BD%E7%B1%BB%E4%BC%BC%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Controller%0Apublic%20class%20PageController%20%7B%0A%09%0A%09%40RequestMapping(%22%2Fadmin%22)%0A%09public%20String%20admin(Model%20model%2C%20String%20tt)%20%7B%0A%09%09return%20%22admin%22%3B%0A%09%7D%0A%09%0A%09%40RequestMapping(%22%2Fhello%22)%0A%09public%20String%20hello(Model%20model%2C%20String%20tt)%20%7B%0A%09%09return%20%22hello%22%3B%0A%09%7D%0A%7D%0A%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.controller;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.stereotype.Controller;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.ui.Model;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.web.bind.annotation.RequestMapping;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;请求页面分发，注意和WebMvcConfig的对比，功能类似</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Controller</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;PageController&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@RequestMapping</span><span>(</span><span class="string">"/admin"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;String&nbsp;admin(Model&nbsp;model,&nbsp;String&nbsp;tt)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="string">"admin"</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@RequestMapping</span><span>(</span><span class="string">"/hello"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;String&nbsp;hello(Model&nbsp;model,&nbsp;String&nbsp;tt)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="string">"hello"</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
/**
 * 请求页面分发，注意和WebMvcConfig的对比，功能类似
 * @author Veiking
 */
@Controller
public class PageController {
	
	@RequestMapping("/admin")
	public String admin(Model model, String tt) {
		return "admin";
	}
	
	@RequestMapping("/hello")
	public String hello(Model model, String tt) {
		return "hello";
	}
}

</pre>
<br> 
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; WebMvcConfig 是一个简单的路径映射，功能跟在 PageController中实现的差不多，之所以多写一个PageController，是因为后边会有其他的功能演示。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 然后我们还需创建一个 WebSecurityConfig 类来继承 WebSecurityConfigurerAdapter，代码如下:</span>
<br>
<br>WebSecurityConfig.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec%3B%0A%0Aimport%20org.springframework.context.annotation.Configuration%3B%0Aimport%20org.springframework.security.config.annotation.web.builders.HttpSecurity%3B%0Aimport%20org.springframework.security.config.annotation.web.builders.WebSecurity%3B%0Aimport%20org.springframework.security.config.annotation.web.configuration.EnableWebSecurity%3B%0Aimport%20org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter%3B%0A%2F**%0A%20*%20Security%20%E4%B8%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Configuration%0A%40EnableWebSecurity%20%2F%2F%E5%BC%80%E5%90%AFSpring%20Security%E7%9A%84%E5%8A%9F%E8%83%BD%0Apublic%20class%20WebSecurityConfig%20extends%20WebSecurityConfigurerAdapter%20%7B%0A%0A%09%2F**%0A%09%20*%20%E5%AE%9A%E4%B9%89%E4%B8%8D%E9%9C%80%E8%A6%81%E8%BF%87%E6%BB%A4%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%EF%BC%88%E7%AD%89%E4%BB%B7%E4%BA%8EHttpSecurity%E7%9A%84permitAll%EF%BC%89%0A%09%20*%2F%0A%09%40Override%0A%09public%20void%20configure(WebSecurity%20webSecurity)%20throws%20Exception%20%7B%0A%09%09webSecurity.ignoring().antMatchers(%22%2Fcss%2F**%22)%3B%0A%09%7D%0A%20%0A%09%2F**%0A%09%20*%20%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE%0A%09%20*%2F%0A%09%40Override%0A%09protected%20void%20configure(HttpSecurity%20httpSecurity)%20throws%20Exception%20%7B%0A%09%09httpSecurity%0A%20%20%20%20%20%20%20%20%20%20%20%20.authorizeRequests()%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AF%B9%E4%BA%8E%E7%BD%91%E7%AB%99%E9%83%A8%E5%88%86%E8%B5%84%E6%BA%90%E9%9C%80%E8%A6%81%E6%8C%87%E5%AE%9A%E9%89%B4%E6%9D%83%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F.antMatchers(%22%2Fadmin%2F**%22).hasRole(%22ADMIN%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%99%A4%E4%B8%8A%E9%9D%A2%E5%A4%96%E7%9A%84%E6%89%80%E6%9C%89%E8%AF%B7%E6%B1%82%E5%85%A8%E9%83%A8%E9%9C%80%E8%A6%81%E9%89%B4%E6%9D%83%E8%AE%A4%E8%AF%81%0A%20%20%20%20%20%20%20%20%20%20%20%20.anyRequest().authenticated().and()%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AE%9A%E4%B9%89%E5%BD%93%E9%9C%80%E8%A6%81%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%97%B6%E5%80%99%EF%BC%8C%E8%BD%AC%E5%88%B0%E7%9A%84%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%0A%20%20%20%20%20%20%20%20%20%20%20%20.formLogin().loginPage(%22%2Flogin%22).defaultSuccessUrl(%22%2Findex%22).permitAll().and()%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AE%9A%E4%B9%89%E7%99%BB%E5%87%BA%E6%93%8D%E4%BD%9C%0A%09%09%09.logout().logoutSuccessUrl(%22%2Flogin%3Flogout%22).permitAll().and()%0A%09%09%09.csrf().disable()%0A%20%20%20%20%20%20%20%20%20%20%20%20%3B%0A%20%20%20%20%20%20%20%20%2F%2F%20%E7%A6%81%E7%94%A8%E7%BC%93%E5%AD%98%0A%20%20%20%20%20%20%20%20httpSecurity.headers().cacheControl()%3B%0A%09%7D%0A%7D%0A%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.context.annotation.Configuration;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.config.annotation.web.builders.HttpSecurity;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.config.annotation.web.builders.WebSecurity;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;Security&nbsp;主配置文件</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Configuration</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@EnableWebSecurity</span><span>&nbsp;</span><span class="comment">//开启Spring&nbsp;Security的功能</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;WebSecurityConfig&nbsp;</span><span class="keyword">extends</span><span>&nbsp;WebSecurityConfigurerAdapter&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;定义不需要过滤的静态资源（等价于HttpSecurity的permitAll）</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;configure(WebSecurity&nbsp;webSecurity)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webSecurity.ignoring().antMatchers(<span class="string">"/css/**"</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;安全策略配置&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">protected</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;configure(HttpSecurity&nbsp;httpSecurity)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;httpSecurity&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.authorizeRequests()&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;对于网站部分资源需要指定鉴权</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//.antMatchers("/admin/**").hasRole("ADMIN")</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;除上面外的所有请求全部需要鉴权认证</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.anyRequest().authenticated().and()&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;定义当需要用户登录时候，转到的登录页面</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.formLogin().loginPage(<span class="string">"/login"</span><span>).defaultSuccessUrl(</span><span class="string">"/index"</span><span>).permitAll().and()&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;定义登出操作</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.logout().logoutSuccessUrl(<span class="string">"/login?logout"</span><span>).permitAll().and()&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.csrf().disable()&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;禁用缓存</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;httpSecurity.headers().cacheControl();&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
/**
 * Security 主配置文件
 * @author Veiking
 */
@Configuration
@EnableWebSecurity //开启Spring Security的功能
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	/**
	 * 定义不需要过滤的静态资源（等价于HttpSecurity的permitAll）
	 */
	@Override
	public void configure(WebSecurity webSecurity) throws Exception {
		webSecurity.ignoring().antMatchers("/css/**");
	}
 
	/**
	 * 安全策略配置
	 */
	@Override
	protected void configure(HttpSecurity httpSecurity) throws Exception {
		httpSecurity
            .authorizeRequests()
            // 对于网站部分资源需要指定鉴权
            //.antMatchers("/admin/**").hasRole("ADMIN")
            // 除上面外的所有请求全部需要鉴权认证
            .anyRequest().authenticated().and()
            // 定义当需要用户登录时候，转到的登录页面
            .formLogin().loginPage("/login").defaultSuccessUrl("/index").permitAll().and()
            // 定义登出操作
			.logout().logoutSuccessUrl("/login?logout").permitAll().and()
			.csrf().disable()
            ;
        // 禁用缓存
        httpSecurity.headers().cacheControl();
	}
}

</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 这个类是使用 Spring Security 的主配置入口，在这个配置文件中，正式启用 Spring Security 包括我们之前所讲的所有功能，这里主要留意一下负责安全策略配置的 configure（）方法，这个方法里可以定义登录登出等操作细节，以及一些静态资源的权限忽略之类的，甚至也是可以直接手动配权限的。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 一切完事儿，我们运行 SecApplication ，开始验证之旅：</span>
<br>
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/a7d068c6-abd4-37b7-a5fd-b643c5f05115.png">
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 在登录页面，输入用户名密码:admin/admin，登录看看，随便点点跳跳，换成veiking/veiking试试，也可以输错试试，再试下登出:</span>
<br>
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/7916b4d5-9123-3981-b86b-1fb35486d8ce.png">
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/990e7216-b53d-3b12-ab16-b44b1312d088.png">
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/f1513035-e8d9-3462-a031-51e0be5be2aa.png">
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 好了，这个简单的用户认证功能看来是可以了，我们接下来看看如何控制权限。</span>
<br>
<br><strong><span style="font-size: large;">七、重点:Spring Security之鉴权-初试</span></strong>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 认证OK，回想下，是否还记得，在VAuthenticationProvider的校验环节，我们在封装返回给系统的Authentication对象里，是提供了vUserDetails.getAuthorities()这个认证列表的，接下来看看，这个被交给系统的认证列表，是怎么体现的。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 我们打开 hello.html 页面，在其中的几个导航跳转的信息上，添加一个 sec:authorize="hasAuthority('XXX')" 的代码，这样子的脚本，大概意思就是，只有名为‘XXX’的角色或者权限的用户，登录之后才可以看到，如下:</span>
<br>
<br>hello.html
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Html代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=%3C!DOCTYPE%20html%3E%0A%3Chtml%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml%22%09%0A%09xmlns%3Ath%3D%22http%3A%2F%2Fwww.thymeleaf.org%22%0A%09xmlns%3Asec%3D%22http%3A%2F%2Fwww.thymeleaf.org%2Fthymeleaf-extras-springsecurity4%22%3E%0A%3Chead%3E%0A%3Cmeta%20content%3D%22text%2Fhtml%3Bcharset%3DUTF-8%22%2F%3E%0A%3Ctitle%3EHELLO%3C%2Ftitle%3E%0A%3Clink%20rel%3D%22stylesheet%22%20th%3Ahref%3D%22%40%7Bcss%2Fbootstrap.min.css%7D%22%2F%3E%0A%3Cstyle%20type%3D%22text%2Fcss%22%3E%0Abody%20%7B%20padding%3A%2040px%3B%20%7D%0A%3C%2Fstyle%3E%0A%3C%2Fhead%3E%0A%3Cbody%3E%0A%09%3Ch1%3EHELLO%3C%2Fh1%3E%0A%09%3Cbr%2F%3E%E4%BD%A0%E5%A5%BD%EF%BC%9A%3Ca%20sec%3Aauthentication%3D%22name%22%3E%3C%2Fa%3E%0A%09%0A%09%09%3Ca%20sec%3Aauthorize%3D%22hasAuthority(&#39;P_INDEX&#39;)%22%20th%3Ahref%3D%22%40%7B%2Findex%7D%22%3E%20INDEX%3C%2Fa%3E%0A%09%09%3Ca%20sec%3Aauthorize%3D%22hasAuthority(&#39;P_ADMIN&#39;)%22%20th%3Ahref%3D%22%40%7B%2Fadmin%7D%22%3E%20%7C%20ADMIN%3C%2Fa%3E%0A%09%09%3Ca%20sec%3Aauthorize%3D%22hasAuthority(&#39;P_HELLO&#39;)%22%20th%3Ahref%3D%22%40%7B%2Fhello%7D%22%3E%20%7C%20HELLO%3C%2Fa%3E%0A%09%09%3Cbr%2F%3E%3Chr%2F%3E%0A%20%20%20%20%20%20%20%20%3Cform%20th%3Aaction%3D%22%40%7B%2Flogout%7D%22%20method%3D%22post%22%20sec%3Aauthorize%3D%22hasAuthority(&#39;R_ADMIN&#39;)%22%3E%0A%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%22submit%22%20class%3D%22btn%20btn-primary%22%20value%3D%22%E6%B3%A8%E9%94%80%22%2F%3E%0A%20%20%20%20%20%20%20%20%3C%2Fform%3E%0A%09%0A%0A%3C%2Fbody%3E%0A%3C%2Fhtml%3E%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-xml"><li><span><span>&lt;!DOCTYPE&nbsp;html</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">html</span><span>&nbsp;</span><span class="attribute">xmlns</span><span>=</span><span class="attribute-value">"http://www.w3.org/1999/xhtml"</span><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="attribute">xmlns:th</span><span>=</span><span class="attribute-value">"http://www.thymeleaf.org"</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="attribute">xmlns:sec</span><span>=</span><span class="attribute-value">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">head</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">meta</span><span>&nbsp;</span><span class="attribute">content</span><span>=</span><span class="attribute-value">"text/html;charset=UTF-8"</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">title</span><span class="tag">&gt;</span><span>HELLO</span><span class="tag">&lt;/</span><span class="tag-name">title</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">link</span><span>&nbsp;</span><span class="attribute">rel</span><span>=</span><span class="attribute-value">"stylesheet"</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{css/bootstrap.min.css}"</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">style</span><span>&nbsp;</span><span class="attribute">type</span><span>=</span><span class="attribute-value">"text/css"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>body&nbsp;{&nbsp;padding:&nbsp;40px;&nbsp;}&nbsp;&nbsp;</span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">style</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">head</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;</span><span class="tag-name">body</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">h1</span><span class="tag">&gt;</span><span>HELLO</span><span class="tag">&lt;/</span><span class="tag-name">h1</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">br</span><span class="tag">/&gt;</span><span>你好：</span><span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">sec:authentication</span><span>=</span><span class="attribute-value">"name"</span><span class="tag">&gt;</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">sec:authorize</span><span>=</span><span class="attribute-value">"hasAuthority('P_INDEX')"</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{/index}"</span><span class="tag">&gt;</span><span>&nbsp;INDEX</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">sec:authorize</span><span>=</span><span class="attribute-value">"hasAuthority('P_ADMIN')"</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{/admin}"</span><span class="tag">&gt;</span><span>&nbsp;|&nbsp;ADMIN</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">a</span><span>&nbsp;</span><span class="attribute">sec:authorize</span><span>=</span><span class="attribute-value">"hasAuthority('P_HELLO')"</span><span>&nbsp;</span><span class="attribute">th:href</span><span>=</span><span class="attribute-value">"@{/hello}"</span><span class="tag">&gt;</span><span>&nbsp;|&nbsp;HELLO</span><span class="tag">&lt;/</span><span class="tag-name">a</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">br</span><span class="tag">/&gt;</span><span class="tag">&lt;</span><span class="tag-name">hr</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">form</span><span>&nbsp;</span><span class="attribute">th:action</span><span>=</span><span class="attribute-value">"@{/logout}"</span><span>&nbsp;</span><span class="attribute">method</span><span>=</span><span class="attribute-value">"post"</span><span>&nbsp;</span><span class="attribute">sec:authorize</span><span>=</span><span class="attribute-value">"hasAuthority('R_ADMIN')"</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;</span><span class="tag-name">input</span><span>&nbsp;</span><span class="attribute">type</span><span>=</span><span class="attribute-value">"submit"</span><span>&nbsp;</span><span class="attribute">class</span><span>=</span><span class="attribute-value">"btn&nbsp;btn-primary"</span><span>&nbsp;</span><span class="attribute">value</span><span>=</span><span class="attribute-value">"注销"</span><span class="tag">/&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="tag">&lt;/</span><span class="tag-name">form</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">body</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="tag">&lt;/</span><span class="tag-name">html</span><span class="tag">&gt;</span><span>&nbsp;&nbsp;</span></span></li></ol></div><pre class="html" name="code" style="display: none;">&lt;!DOCTYPE html&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"	
	xmlns:th="http://www.thymeleaf.org"
	xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"&gt;
&lt;head&gt;
&lt;meta content="text/html;charset=UTF-8"/&gt;
&lt;title&gt;HELLO&lt;/title&gt;
&lt;link rel="stylesheet" th:href="@{css/bootstrap.min.css}"/&gt;
&lt;style type="text/css"&gt;
body { padding: 40px; }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
	&lt;h1&gt;HELLO&lt;/h1&gt;
	&lt;br/&gt;你好：&lt;a sec:authentication="name"&gt;&lt;/a&gt;
	
		&lt;a sec:authorize="hasAuthority('P_INDEX')" th:href="@{/index}"&gt; INDEX&lt;/a&gt;
		&lt;a sec:authorize="hasAuthority('P_ADMIN')" th:href="@{/admin}"&gt; | ADMIN&lt;/a&gt;
		&lt;a sec:authorize="hasAuthority('P_HELLO')" th:href="@{/hello}"&gt; | HELLO&lt;/a&gt;
		&lt;br/&gt;&lt;hr/&gt;
        &lt;form th:action="@{/logout}" method="post" sec:authorize="hasAuthority('R_ADMIN')"&gt;
            &lt;input type="submit" class="btn btn-primary" value="注销"/&gt;
        &lt;/form&gt;
	

&lt;/body&gt;
&lt;/html&gt;
</pre>
<br>
<br>（注意，在页面中使用 Spring Security 相关脚本，要在&lt;html&gt;标签处添加 xmlns:th="http://www.thymeleaf.org" 、 xmlns:sec="http://www.thymeleaf.org/thymeleaf-extras-springsecurity4" 等约束规范）重新启动后，分别用不同的用户，登录后跳转到hello页面查看，这时候可以看到，admin用户拥有较多权限，都可以看到， veiking 用户只能看到index和hello导航，而 xiaoming 用户什么都看不到了，并且他们都不能看到注销按钮，就是这个效果：[/size]
<br>
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/932eef0f-1a57-344b-be21-31300a9c4337.png">
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/88ba11a8-0483-3c76-9c79-231e3b02980c.png">
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 上边是从页面层面来进行权限控制的，注意hasAuthority('XXX')中，有用到R_ADMIN、P_ADMIN、P_HELLO不同类型的权限字眼，包含角色和权限，这个控制的颗粒度没有绝对的，只要设计成规律可循、操作可行方案即可。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 接下来，打开 PageController，在/admin处添加标签:@PreAuthorize("hasAuthority('R_ADMIN')")，如下:</span>
<br>
<br>PageController.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.controller%3B%0A%0Aimport%20org.springframework.security.access.prepost.PreAuthorize%3B%0Aimport%20org.springframework.stereotype.Controller%3B%0Aimport%20org.springframework.ui.Model%3B%0Aimport%20org.springframework.web.bind.annotation.RequestMapping%3B%0A%2F**%0A%20*%20%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2%E5%88%86%E5%8F%91%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%92%8CWebMvcConfig%E7%9A%84%E5%AF%B9%E6%AF%94%EF%BC%8C%E5%8A%9F%E8%83%BD%E7%B1%BB%E4%BC%BC%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Controller%0Apublic%20class%20PageController%20%7B%0A%09%0A%09%40RequestMapping(%22%2Fadmin%22)%0A%09%40PreAuthorize(%22hasAuthority(&#39;R_ADMIN&#39;)%22)%0A%09public%20String%20admin(Model%20model%2C%20String%20tt)%20%7B%0A%09%09return%20%22admin%22%3B%0A%09%7D%0A%09%0A%09%40RequestMapping(%22%2Fhello%22)%0A%09public%20String%20hello(Model%20model%2C%20String%20tt)%20%7B%0A%09%09return%20%22hello%22%3B%0A%09%7D%0A%7D%0A%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.controller;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.access.prepost.PreAuthorize;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.stereotype.Controller;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.ui.Model;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.web.bind.annotation.RequestMapping;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;请求页面分发，注意和WebMvcConfig的对比，功能类似</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Controller</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;PageController&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@RequestMapping</span><span>(</span><span class="string">"/admin"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@PreAuthorize</span><span>(</span><span class="string">"hasAuthority('R_ADMIN')"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;String&nbsp;admin(Model&nbsp;model,&nbsp;String&nbsp;tt)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="string">"admin"</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@RequestMapping</span><span>(</span><span class="string">"/hello"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;String&nbsp;hello(Model&nbsp;model,&nbsp;String&nbsp;tt)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="string">"hello"</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.controller;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
/**
 * 请求页面分发，注意和WebMvcConfig的对比，功能类似
 * @author Veiking
 */
@Controller
public class PageController {
	
	@RequestMapping("/admin")
	@PreAuthorize("hasAuthority('R_ADMIN')")
	public String admin(Model model, String tt) {
		return "admin";
	}
	
	@RequestMapping("/hello")
	public String hello(Model model, String tt) {
		return "hello";
	}
}

</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 注意，这个操作还需要在 WebSecurityConfig 类中加 @EnableGlobalMethodSecurity(prePostEnabled=true) 标签来，开启注解控制权限，然后配置 authenticationManagerBean 以供支持，代码如下:</span>
<br>
<br>WebSecurityConfig.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec%3B%0A%0Aimport%20org.springframework.context.annotation.Bean%3B%0Aimport%20org.springframework.context.annotation.Configuration%3B%0Aimport%20org.springframework.security.authentication.AuthenticationManager%3B%0Aimport%20org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity%3B%0Aimport%20org.springframework.security.config.annotation.web.builders.HttpSecurity%3B%0Aimport%20org.springframework.security.config.annotation.web.builders.WebSecurity%3B%0Aimport%20org.springframework.security.config.annotation.web.configuration.EnableWebSecurity%3B%0Aimport%20org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter%3B%0A%2F**%0A%20*%20Security%20%E4%B8%BB%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Configuration%0A%40EnableWebSecurity%20%2F%2F%E5%BC%80%E5%90%AFSpring%20Security%E7%9A%84%E5%8A%9F%E8%83%BD%0A%40EnableGlobalMethodSecurity(prePostEnabled%3Dtrue)%2F%2F%E5%BC%80%E5%90%AF%E6%B3%A8%E8%A7%A3%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90%0Apublic%20class%20WebSecurityConfig%20extends%20WebSecurityConfigurerAdapter%20%7B%0A%0A%09%2F**%0A%09%20*%20%E5%AE%9A%E4%B9%89%E4%B8%8D%E9%9C%80%E8%A6%81%E8%BF%87%E6%BB%A4%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%EF%BC%88%E7%AD%89%E4%BB%B7%E4%BA%8EHttpSecurity%E7%9A%84permitAll%EF%BC%89%0A%09%20*%2F%0A%09%40Override%0A%09public%20void%20configure(WebSecurity%20webSecurity)%20throws%20Exception%20%7B%0A%09%09webSecurity.ignoring().antMatchers(%22%2Fcss%2F**%22)%3B%0A%09%7D%0A%20%0A%09%2F**%0A%09%20*%20%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE%0A%09%20*%2F%0A%09%40Override%0A%09protected%20void%20configure(HttpSecurity%20httpSecurity)%20throws%20Exception%20%7B%0A%09%09httpSecurity%0A%20%20%20%20%20%20%20%20%20%20%20%20.authorizeRequests()%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AF%B9%E4%BA%8E%E7%BD%91%E7%AB%99%E9%83%A8%E5%88%86%E8%B5%84%E6%BA%90%E9%9C%80%E8%A6%81%E6%8C%87%E5%AE%9A%E9%89%B4%E6%9D%83%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F.antMatchers(%22%2Fadmin%2F**%22).hasRole(%22ADMIN%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E9%99%A4%E4%B8%8A%E9%9D%A2%E5%A4%96%E7%9A%84%E6%89%80%E6%9C%89%E8%AF%B7%E6%B1%82%E5%85%A8%E9%83%A8%E9%9C%80%E8%A6%81%E9%89%B4%E6%9D%83%E8%AE%A4%E8%AF%81%0A%20%20%20%20%20%20%20%20%20%20%20%20.anyRequest().authenticated().and()%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AE%9A%E4%B9%89%E5%BD%93%E9%9C%80%E8%A6%81%E7%94%A8%E6%88%B7%E7%99%BB%E5%BD%95%E6%97%B6%E5%80%99%EF%BC%8C%E8%BD%AC%E5%88%B0%E7%9A%84%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%0A%20%20%20%20%20%20%20%20%20%20%20%20.formLogin().loginPage(%22%2Flogin%22).defaultSuccessUrl(%22%2Findex%22).permitAll().and()%0A%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AE%9A%E4%B9%89%E7%99%BB%E5%87%BA%E6%93%8D%E4%BD%9C%0A%09%09%09.logout().logoutSuccessUrl(%22%2Flogin%3Flogout%22).permitAll().and()%0A%09%09%09.csrf().disable()%0A%20%20%20%20%20%20%20%20%20%20%20%20%3B%0A%20%20%20%20%20%20%20%20%2F%2F%20%E7%A6%81%E7%94%A8%E7%BC%93%E5%AD%98%0A%20%20%20%20%20%20%20%20httpSecurity.headers().cacheControl()%3B%0A%09%7D%0A%0A%09%2F**%0A%09%20*%20%E5%BC%80%E5%90%AF%E6%B3%A8%E8%A7%A3%E6%8E%A7%E5%88%B6%E6%9D%83%E9%99%90%0A%09%20*%20%E8%A7%81Controller%20%E4%B8%AD%20%40PreAuthorize(%22hasAuthority(&#39;XXX&#39;)%22)%0A%09%20*%2F%0A%09%40Bean%0A%09%40Override%0A%09public%20AuthenticationManager%20authenticationManagerBean()%20throws%20Exception%20%7B%0A%09return%20super.authenticationManagerBean()%3B%0A%09%7D%0A%7D%0A%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.context.annotation.Bean;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.context.annotation.Configuration;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.authentication.AuthenticationManager;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.config.annotation.web.builders.HttpSecurity;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.config.annotation.web.builders.WebSecurity;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;Security&nbsp;主配置文件</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Configuration</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@EnableWebSecurity</span><span>&nbsp;</span><span class="comment">//开启Spring&nbsp;Security的功能</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@EnableGlobalMethodSecurity</span><span>(prePostEnabled=</span><span class="keyword">true</span><span>)</span><span class="comment">//开启注解控制权限</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;WebSecurityConfig&nbsp;</span><span class="keyword">extends</span><span>&nbsp;WebSecurityConfigurerAdapter&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;定义不需要过滤的静态资源（等价于HttpSecurity的permitAll）</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;configure(WebSecurity&nbsp;webSecurity)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webSecurity.ignoring().antMatchers(<span class="string">"/css/**"</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;安全策略配置&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">protected</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;configure(HttpSecurity&nbsp;httpSecurity)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;httpSecurity&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.authorizeRequests()&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;对于网站部分资源需要指定鉴权</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//.antMatchers("/admin/**").hasRole("ADMIN")</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;除上面外的所有请求全部需要鉴权认证</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.anyRequest().authenticated().and()&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;定义当需要用户登录时候，转到的登录页面</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.formLogin().loginPage(<span class="string">"/login"</span><span>).defaultSuccessUrl(</span><span class="string">"/index"</span><span>).permitAll().and()&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;定义登出操作</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.logout().logoutSuccessUrl(<span class="string">"/login?logout"</span><span>).permitAll().and()&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.csrf().disable()&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;禁用缓存</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;httpSecurity.headers().cacheControl();&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;/**&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;开启注解控制权限&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;见Controller&nbsp;中&nbsp;<span class="annotation">@PreAuthorize</span><span>(</span><span class="string">"hasAuthority('XXX')"</span><span>)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Bean</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;AuthenticationManager&nbsp;authenticationManagerBean()&nbsp;</span><span class="keyword">throws</span><span>&nbsp;Exception&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">super</span><span>.authenticationManagerBean();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
/**
 * Security 主配置文件
 * @author Veiking
 */
@Configuration
@EnableWebSecurity //开启Spring Security的功能
@EnableGlobalMethodSecurity(prePostEnabled=true)//开启注解控制权限
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

	/**
	 * 定义不需要过滤的静态资源（等价于HttpSecurity的permitAll）
	 */
	@Override
	public void configure(WebSecurity webSecurity) throws Exception {
		webSecurity.ignoring().antMatchers("/css/**");
	}
 
	/**
	 * 安全策略配置
	 */
	@Override
	protected void configure(HttpSecurity httpSecurity) throws Exception {
		httpSecurity
            .authorizeRequests()
            // 对于网站部分资源需要指定鉴权
            //.antMatchers("/admin/**").hasRole("ADMIN")
            // 除上面外的所有请求全部需要鉴权认证
            .anyRequest().authenticated().and()
            // 定义当需要用户登录时候，转到的登录页面
            .formLogin().loginPage("/login").defaultSuccessUrl("/index").permitAll().and()
            // 定义登出操作
			.logout().logoutSuccessUrl("/login?logout").permitAll().and()
			.csrf().disable()
            ;
        // 禁用缓存
        httpSecurity.headers().cacheControl();
	}

	/**
	 * 开启注解控制权限
	 * 见Controller 中 @PreAuthorize("hasAuthority('XXX')")
	 */
	@Bean
	@Override
	public AuthenticationManager authenticationManagerBean() throws Exception {
	return super.authenticationManagerBean();
	}
}

</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 然后再次启动，用veiking登录，INDEX页面点击ADMIN导航 ——好，403 Forbidden了，对，被拦了，就是这个效果。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 以上这些，是简单的对 Spring Security 鉴权操作的一些尝试，当然，如果是小规模功能开发，这些是可以满足的，如果想追求更为灵活的控制，就要重新是实现下过滤机制，接下来我们就尝试下从对数据库层面的配置，实现权限的动态管理。</span>
<br>
<br><strong><span style="font-size: large;">八、重点:Spring Security之鉴权-过滤器</span></strong>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 上边我们已尝试了经通过页面脚本和注解这两种方式的权限控制，接下来，我们尝试下通过数据库的权限配置，来过滤用户操作请求的。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 跟认证对应，我们新建一个包，authorization，然后在这个里面来实现过滤请求方式的鉴权:先写一个 VFilterInvocationSecurityMetadataSource 类，来实现 FilterInvocationSecurityMetadataSource，这个可以简单理解成权限资源管理器，它的工作是通过用户的请求地址，来获取访问这个地址所需的权限，代码如下:</span>
<br>
<br>FilterInvocationSecurityMetadataSource.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.authorization%3B%0A%0Aimport%20java.util.ArrayList%3B%0Aimport%20java.util.Collection%3B%0Aimport%20java.util.List%3B%0A%0Aimport%20org.slf4j.Logger%3B%0Aimport%20org.slf4j.LoggerFactory%3B%0Aimport%20org.springframework.beans.factory.annotation.Autowired%3B%0Aimport%20org.springframework.security.access.ConfigAttribute%3B%0Aimport%20org.springframework.security.access.SecurityConfig%3B%0Aimport%20org.springframework.security.web.FilterInvocation%3B%0Aimport%20org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource%3B%0Aimport%20org.springframework.stereotype.Component%3B%0A%0Aimport%20com.google.gson.Gson%3B%0Aimport%20com.veiking.sec.bean.SPermission%3B%0Aimport%20com.veiking.sec.bean.SRole%3B%0Aimport%20com.veiking.sec.service.SecurityDataService%3B%0A%2F**%0A%20*%20%E6%9D%83%E9%99%90%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%0A%20*%20%E6%A0%B9%E6%8D%AE%E7%94%A8%E6%88%B7%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%8C%E8%8E%B7%E5%8F%96%E8%AE%BF%E9%97%AE%E8%AF%A5%E5%9C%B0%E5%9D%80%E9%9C%80%E8%A6%81%E7%9A%84%E6%89%80%E9%9C%80%E6%9D%83%E9%99%90%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Component%0Apublic%20class%20VFilterInvocationSecurityMetadataSource%20implements%20FilterInvocationSecurityMetadataSource%20%7B%0A%09Gson%20gson%20%3D%20new%20Gson()%3B%0A%09Logger%20logger%20%3D%20LoggerFactory.getLogger(this.getClass())%3B%0A%09%40Autowired%0A%09SecurityDataService%20securityDataService%3B%0A%09%0A%09%40Override%0A%09public%20Collection%3CConfigAttribute%3E%20getAttributes(Object%20object)%20throws%20IllegalArgumentException%20%7B%0A%09%09%2F%2F%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E8%B5%B7%E6%BA%90%E8%B7%AF%E5%BE%84%0A%09%09String%20requestUrl%20%3D%20((FilterInvocation)%20object).getRequestUrl()%3B%0A%09%09logger.info(%22VFilterInvocationSecurityMetadataSource%20getAttributes%20%5BrequestUrl%3D%7B%7D%5D%22%2C%20requestUrl)%3B%0A%09%09%2F%2F%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E5%B0%B1%E4%B8%8D%E9%9C%80%E8%A6%81%E6%9D%83%E9%99%90%0A%20%20%20%20%20%20%20%20if%20(%22%2Flogin%22.equals(requestUrl))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20null%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%E7%94%A8%E6%9D%A5%E5%AD%98%E5%82%A8%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E9%9C%80%E8%A6%81%E7%9A%84%E8%A7%92%E8%89%B2%E6%88%96%E6%9D%83%E9%99%90%E4%BF%A1%E6%81%AF%0A%20%20%20%20%20%20%20%20List%3CString%3E%20tempPermissionList%20%3D%20new%20ArrayList%3CString%3E()%3B%0A%20%20%20%20%20%20%20%20%2F%2F%E8%8E%B7%E5%8F%96%E8%A7%92%E8%89%B2%E5%88%97%E8%A1%A8%0A%20%20%20%20%20%20%20%20List%3CSRole%3E%20sRoleList%20%3D%20securityDataService.findSRoleListBySPermissionUrl(requestUrl)%3B%0A%09%09logger.info(%22VFilterInvocationSecurityMetadataSource%20getAttributes%20%5BsRoleList%3D%7B%7D%5D%22%2C%20gson.toJson(sRoleList))%3B%0A%20%20%20%20%20%20%20%20for(SRole%20sRole%20%3A%20sRoleList)%20%7B%0A%20%20%20%20%20%20%20%20%09tempPermissionList.add(sRole.getRole())%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%E5%BE%84%E8%8E%B7%E5%8F%96%E8%B5%84%E6%BA%90%E6%9D%83%E9%99%90%E5%88%97%E8%A1%A8%0A%20%20%20%20%20%20%20%20List%3CSPermission%3E%20sPermissionList%20%3D%20securityDataService.findSPermissionListBySPermissionUrl(requestUrl)%3B%0A%09%09logger.info(%22VFilterInvocationSecurityMetadataSource%20getAttributes%20%5BsPermissionList%3D%7B%7D%5D%22%2C%20gson.toJson(sPermissionList))%3B%0A%20%20%20%20%20%20%20%20for(SPermission%20sPermission%20%3A%20sPermissionList)%20%7B%0A%20%20%20%20%20%20%20%20%09tempPermissionList.add(sPermission.getPermission())%3B%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E7%9A%84url%EF%BC%8C%E5%8F%AF%E4%BB%A5%E8%AE%BE%E7%BD%AE%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E4%B8%8D%E8%AE%B8%E8%AE%BF%E9%97%AE%0A%20%20%20%20%20%20%20%20if(tempPermissionList.isEmpty())%20%7B%0A%20%20%20%20%20%20%20%20%09return%20null%3B%2F%2F%E9%83%BD%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%0A%20%20%20%20%20%20%20%20%09%2F%2FtempPermissionList.add(%22DEFAULT_FORBIDDEN%22)%3B%2F%2F%E9%BB%98%E8%AE%A4%E7%A6%81%E6%AD%A2%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20String%5B%5D%20permissionArray%20%3D%20tempPermissionList.toArray(new%20String%5B0%5D)%3B%0A%09%09logger.info(%22VFilterInvocationSecurityMetadataSource%20getAttributes%20%5BpermissionArray%3D%7B%7D%5D%22%2C%20gson.toJson(permissionArray))%3B%0A%20%20%20%20%20%20%20%20return%20SecurityConfig.createList(permissionArray)%3B%0A%09%7D%0A%0A%09%40Override%0A%09public%20Collection%3CConfigAttribute%3E%20getAllConfigAttributes()%20%7B%0A%09%09%2F%2F%20TODO%20Auto-generated%20method%20stub%0A%09%09return%20null%3B%0A%09%7D%0A%0A%09%40Override%0A%09public%20boolean%20supports(Class%3C%3F%3E%20clazz)%20%7B%0A%09%09return%20true%3B%0A%09%7D%0A%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.authorization;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;java.util.ArrayList;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;java.util.Collection;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;java.util.List;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.slf4j.Logger;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.slf4j.LoggerFactory;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.beans.factory.annotation.Autowired;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.access.ConfigAttribute;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.access.SecurityConfig;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.web.FilterInvocation;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.stereotype.Component;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;com.google.gson.Gson;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SPermission;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.bean.SRole;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;com.veiking.sec.service.SecurityDataService;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;权限资源管理器</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;根据用户请求的地址，获取访问该地址需要的所需权限</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Component</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;VFilterInvocationSecurityMetadataSource&nbsp;</span><span class="keyword">implements</span><span>&nbsp;FilterInvocationSecurityMetadataSource&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;Gson&nbsp;gson&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;Gson();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;Logger&nbsp;logger&nbsp;=&nbsp;LoggerFactory.getLogger(<span class="keyword">this</span><span>.getClass());&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Autowired</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;SecurityDataService&nbsp;securityDataService;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;Collection&lt;ConfigAttribute&gt;&nbsp;getAttributes(Object&nbsp;object)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;IllegalArgumentException&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//获取请求起源路径</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;requestUrl&nbsp;=&nbsp;((FilterInvocation)&nbsp;object).getRequestUrl();&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="string">"VFilterInvocationSecurityMetadataSource&nbsp;getAttributes&nbsp;[requestUrl={}]"</span><span>,&nbsp;requestUrl);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//登录页面就不需要权限</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span><span>&nbsp;(</span><span class="string">"/login"</span><span>.equals(requestUrl))&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">null</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//用来存储访问路径需要的角色或权限信息</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;String&gt;&nbsp;tempPermissionList&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;ArrayList&lt;String&gt;();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//获取角色列表</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;SRole&gt;&nbsp;sRoleList&nbsp;=&nbsp;securityDataService.findSRoleListBySPermissionUrl(requestUrl);&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="string">"VFilterInvocationSecurityMetadataSource&nbsp;getAttributes&nbsp;[sRoleList={}]"</span><span>,&nbsp;gson.toJson(sRoleList));&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span><span>(SRole&nbsp;sRole&nbsp;:&nbsp;sRoleList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPermissionList.add(sRole.getRole());&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//径获取资源权限列表</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;SPermission&gt;&nbsp;sPermissionList&nbsp;=&nbsp;securityDataService.findSPermissionListBySPermissionUrl(requestUrl);&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="string">"VFilterInvocationSecurityMetadataSource&nbsp;getAttributes&nbsp;[sPermissionList={}]"</span><span>,&nbsp;gson.toJson(sPermissionList));&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span><span>(SPermission&nbsp;sPermission&nbsp;:&nbsp;sPermissionList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tempPermissionList.add(sPermission.getPermission());&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//如果没有权限控制的url，可以设置都可以访问，也可以设置默认不许访问</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span><span>(tempPermissionList.isEmpty())&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">null</span><span>;</span><span class="comment">//都可以访问</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//tempPermissionList.add("DEFAULT_FORBIDDEN");//默认禁止</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]&nbsp;permissionArray&nbsp;=&nbsp;tempPermissionList.toArray(<span class="keyword">new</span><span>&nbsp;String[</span><span class="number">0</span><span>]);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.info(<span class="string">"VFilterInvocationSecurityMetadataSource&nbsp;getAttributes&nbsp;[permissionArray={}]"</span><span>,&nbsp;gson.toJson(permissionArray));&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;SecurityConfig.createList(permissionArray);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;Collection&lt;ConfigAttribute&gt;&nbsp;getAllConfigAttributes()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;TODO&nbsp;Auto-generated&nbsp;method&nbsp;stub</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">null</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">boolean</span><span>&nbsp;supports(Class&lt;?&gt;&nbsp;clazz)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">true</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.authorization;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.access.SecurityConfig;
import org.springframework.security.web.FilterInvocation;
import org.springframework.security.web.access.intercept.FilterInvocationSecurityMetadataSource;
import org.springframework.stereotype.Component;

import com.google.gson.Gson;
import com.veiking.sec.bean.SPermission;
import com.veiking.sec.bean.SRole;
import com.veiking.sec.service.SecurityDataService;
/**
 * 权限资源管理器
 * 根据用户请求的地址，获取访问该地址需要的所需权限
 * @author Veiking
 */
@Component
public class VFilterInvocationSecurityMetadataSource implements FilterInvocationSecurityMetadataSource {
	Gson gson = new Gson();
	Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired
	SecurityDataService securityDataService;
	
	@Override
	public Collection&lt;ConfigAttribute&gt; getAttributes(Object object) throws IllegalArgumentException {
		//获取请求起源路径
		String requestUrl = ((FilterInvocation) object).getRequestUrl();
		logger.info("VFilterInvocationSecurityMetadataSource getAttributes [requestUrl={}]", requestUrl);
		//登录页面就不需要权限
        if ("/login".equals(requestUrl)) {
            return null;
        }
        //用来存储访问路径需要的角色或权限信息
        List&lt;String&gt; tempPermissionList = new ArrayList&lt;String&gt;();
        //获取角色列表
        List&lt;SRole&gt; sRoleList = securityDataService.findSRoleListBySPermissionUrl(requestUrl);
		logger.info("VFilterInvocationSecurityMetadataSource getAttributes [sRoleList={}]", gson.toJson(sRoleList));
        for(SRole sRole : sRoleList) {
        	tempPermissionList.add(sRole.getRole());
        }
        //径获取资源权限列表
        List&lt;SPermission&gt; sPermissionList = securityDataService.findSPermissionListBySPermissionUrl(requestUrl);
		logger.info("VFilterInvocationSecurityMetadataSource getAttributes [sPermissionList={}]", gson.toJson(sPermissionList));
        for(SPermission sPermission : sPermissionList) {
        	tempPermissionList.add(sPermission.getPermission());
        }
        //如果没有权限控制的url，可以设置都可以访问，也可以设置默认不许访问
        if(tempPermissionList.isEmpty()) {
        	return null;//都可以访问
        	//tempPermissionList.add("DEFAULT_FORBIDDEN");//默认禁止
        }
        String[] permissionArray = tempPermissionList.toArray(new String[0]);
		logger.info("VFilterInvocationSecurityMetadataSource getAttributes [permissionArray={}]", gson.toJson(permissionArray));
        return SecurityConfig.createList(permissionArray);
	}

	@Override
	public Collection&lt;ConfigAttribute&gt; getAllConfigAttributes() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean supports(Class&lt;?&gt; clazz) {
		return true;
	}

}
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 接着访问需要的权限资源拿到了，就得有判断的地方，新建一个 VAccessDecisionManager 来实现 AccessDecisionManager ，这个类可以理解成权限管理判断器，他的主要工作就是鉴权，通过拿到的访问路径所需的权限，和用户所拥有的权限进行对比，判断用户是否有权限访问，代码如下:</span>
<br>
<br>VAccessDecisionManager.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.authorization%3B%0A%0Aimport%20java.util.Collection%3B%0A%0Aimport%20org.springframework.security.access.AccessDecisionManager%3B%0Aimport%20org.springframework.security.access.AccessDeniedException%3B%0Aimport%20org.springframework.security.access.ConfigAttribute%3B%0Aimport%20org.springframework.security.authentication.InsufficientAuthenticationException%3B%0Aimport%20org.springframework.security.core.Authentication%3B%0Aimport%20org.springframework.security.core.GrantedAuthority%3B%0Aimport%20org.springframework.stereotype.Component%3B%0A%2F**%0A%20*%20%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E5%88%A4%E6%96%AD%E5%99%A8%7C%E6%A0%A1%E9%AA%8C%E7%94%A8%E6%88%B7%E6%98%AF%E5%90%A6%E6%9C%89%E6%9D%83%E9%99%90%E8%AE%BF%E9%97%AE%E8%AF%B7%E6%B1%82%E8%B5%84%E6%BA%90%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Component%0Apublic%20class%20VAccessDecisionManager%20implements%20AccessDecisionManager%20%7B%0A%0A%09%40Override%0A%09public%20void%20decide(Authentication%20authentication%2C%20Object%20object%2C%20Collection%3CConfigAttribute%3E%20configAttributes)%0A%09%09%09throws%20AccessDeniedException%2C%20InsufficientAuthenticationException%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%E5%BD%93%E5%89%8D%E7%94%A8%E6%88%B7%E6%89%80%E5%85%B7%E6%9C%89%E7%9A%84%E6%9D%83%E9%99%90%0A%20%20%20%20%20%20%20%20Collection%3C%3F%20extends%20GrantedAuthority%3E%20userAuthorityList%20%3D%20authentication.getAuthorities()%3B%0A%20%20%20%20%20%20%20%20%2F%2F%E8%AE%BF%E9%97%AE%E8%B5%84%E6%BA%90%E6%89%80%E9%9C%80%E7%9A%84%E6%9D%83%E9%99%90%E4%BF%A1%E6%81%AF%0A%20%20%20%20%20%20%20%20Collection%3CConfigAttribute%3E%20needAuthoritieList%20%3D%20configAttributes%3B%0A%20%20%20%20%20%20%20%20%2F%2F%E4%BE%9D%E6%AC%A1%E5%BE%AA%E7%8E%AF%E5%AF%B9%E6%AF%94%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%9C%89%E5%8C%B9%E9%85%8D%E7%9A%84%E5%8D%B3%E8%BF%94%E5%9B%9E%0A%20%20%20%20%20%20%20%20for(ConfigAttribute%20needAuthoritie%3A%20needAuthoritieList)%20%7B%0A%20%20%20%20%20%20%20%20%09String%20needAuthoritieStr%20%3D%20needAuthoritie.getAttribute()%3B%0A%20%20%20%20%20%20%20%20%09for%20(GrantedAuthority%20userAuthority%20%3A%20userAuthorityList)%20%7B%0A%20%20%20%20%20%20%20%20%09%09String%20userAuthorityStr%20%3D%20userAuthority.getAuthority()%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(needAuthoritieStr.equals(userAuthorityStr))%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%2F%2F%E6%89%A7%E8%A1%8C%E5%88%B0%E8%BF%99%E9%87%8C%E8%AF%B4%E6%98%8E%E6%B2%A1%E6%9C%89%E5%8C%B9%E9%85%8D%E5%88%B0%E5%BA%94%E6%9C%89%E6%9D%83%E9%99%90%0A%20%20%20%20%20%20%20%20throw%20new%20AccessDeniedException(%22%E6%9D%83%E9%99%90%E4%B8%8D%E8%B6%B3!%22)%3B%0A%09%7D%0A%0A%09%40Override%0A%09public%20boolean%20supports(ConfigAttribute%20attribute)%20%7B%0A%09%09return%20true%3B%0A%09%7D%0A%0A%09%40Override%0A%09public%20boolean%20supports(Class%3C%3F%3E%20clazz)%20%7B%0A%09%09return%20true%3B%0A%09%7D%0A%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.authorization;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;java.util.Collection;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.access.AccessDecisionManager;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.access.AccessDeniedException;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.access.ConfigAttribute;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.authentication.InsufficientAuthenticationException;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.core.Authentication;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.core.GrantedAuthority;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.stereotype.Component;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;权限管理判断器|校验用户是否有权限访问请求资源</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Component</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;VAccessDecisionManager&nbsp;</span><span class="keyword">implements</span><span>&nbsp;AccessDecisionManager&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;decide(Authentication&nbsp;authentication,&nbsp;Object&nbsp;object,&nbsp;Collection&lt;ConfigAttribute&gt;&nbsp;configAttributes)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">throws</span><span>&nbsp;AccessDeniedException,&nbsp;InsufficientAuthenticationException&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//当前用户所具有的权限</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collection&lt;?&nbsp;<span class="keyword">extends</span><span>&nbsp;GrantedAuthority&gt;&nbsp;userAuthorityList&nbsp;=&nbsp;authentication.getAuthorities();&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//访问资源所需的权限信息</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collection&lt;ConfigAttribute&gt;&nbsp;needAuthoritieList&nbsp;=&nbsp;configAttributes;&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//依次循环对比，发现有匹配的即返回</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span><span>(ConfigAttribute&nbsp;needAuthoritie:&nbsp;needAuthoritieList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;needAuthoritieStr&nbsp;=&nbsp;needAuthoritie.getAttribute();&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">for</span><span>&nbsp;(GrantedAuthority&nbsp;userAuthority&nbsp;:&nbsp;userAuthorityList)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;userAuthorityStr&nbsp;=&nbsp;userAuthority.getAuthority();&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">if</span><span>&nbsp;(needAuthoritieStr.equals(userAuthorityStr))&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//执行到这里说明没有匹配到应有权限</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">throw</span><span>&nbsp;</span><span class="keyword">new</span><span>&nbsp;AccessDeniedException(</span><span class="string">"权限不足!"</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">boolean</span><span>&nbsp;supports(ConfigAttribute&nbsp;attribute)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">true</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">boolean</span><span>&nbsp;supports(Class&lt;?&gt;&nbsp;clazz)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">true</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.authorization;

import java.util.Collection;

import org.springframework.security.access.AccessDecisionManager;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.security.access.ConfigAttribute;
import org.springframework.security.authentication.InsufficientAuthenticationException;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Component;
/**
 * 权限管理判断器|校验用户是否有权限访问请求资源
 * @author Veiking
 */
@Component
public class VAccessDecisionManager implements AccessDecisionManager {

	@Override
	public void decide(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)
			throws AccessDeniedException, InsufficientAuthenticationException {
        //当前用户所具有的权限
        Collection&lt;? extends GrantedAuthority&gt; userAuthorityList = authentication.getAuthorities();
        //访问资源所需的权限信息
        Collection&lt;ConfigAttribute&gt; needAuthoritieList = configAttributes;
        //依次循环对比，发现有匹配的即返回
        for(ConfigAttribute needAuthoritie: needAuthoritieList) {
        	String needAuthoritieStr = needAuthoritie.getAttribute();
        	for (GrantedAuthority userAuthority : userAuthorityList) {
        		String userAuthorityStr = userAuthority.getAuthority();
                if (needAuthoritieStr.equals(userAuthorityStr)) {
                    return;
                }
            }
        }
        //执行到这里说明没有匹配到应有权限
        throw new AccessDeniedException("权限不足!");
	}

	@Override
	public boolean supports(ConfigAttribute attribute) {
		return true;
	}

	@Override
	public boolean supports(Class&lt;?&gt; clazz) {
		return true;
	}

}
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 最后，要写一个过滤器，提供上边这些功能的工作场所，创建 VFilterSecurityInterceptor 类，继承 AbstractSecurityInterceptor 并实现 Filter，这就是个鉴权过滤器，代码如下:</span>
<br>
<br>VFilterSecurityInterceptor.java
<br><div class="dp-highlighter" id=""><div class="bar"><div class="tools">Java代码 <embed wmode="transparent" src="/javascripts/syntaxhighlighter/clipboard_new.swf" width="14" height="15" flashvars="clipboard=package%20com.veiking.sec.authorization%3B%0A%0Aimport%20java.io.IOException%3B%0A%0Aimport%20javax.servlet.Filter%3B%0Aimport%20javax.servlet.FilterChain%3B%0Aimport%20javax.servlet.FilterConfig%3B%0Aimport%20javax.servlet.ServletException%3B%0Aimport%20javax.servlet.ServletRequest%3B%0Aimport%20javax.servlet.ServletResponse%3B%0Aimport%20javax.servlet.annotation.WebFilter%3B%0A%0Aimport%20org.springframework.beans.factory.annotation.Autowired%3B%0Aimport%20org.springframework.boot.web.servlet.ServletComponentScan%3B%0Aimport%20org.springframework.security.access.SecurityMetadataSource%3B%0Aimport%20org.springframework.security.access.intercept.AbstractSecurityInterceptor%3B%0Aimport%20org.springframework.security.access.intercept.InterceptorStatusToken%3B%0Aimport%20org.springframework.security.web.FilterInvocation%3B%0Aimport%20org.springframework.stereotype.Component%3B%0A%2F**%0A%20*%20%E8%AE%BF%E9%97%AE%E9%89%B4%E6%9D%83%E8%BF%87%E6%BB%A4%E5%99%A8%0A%20*%20%E8%AF%A5%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E4%BD%9C%E7%94%A8%E5%B0%B1%E6%98%AF%EF%BC%8C%E7%94%A8%E6%88%B7%E8%AF%B7%E6%B1%82%E6%97%B6%EF%BC%8C%E6%8F%90%E4%BE%9B%E6%9D%83%E9%99%90%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8%E5%92%8C%E6%9D%83%E9%99%90%E5%88%A4%E6%96%AD%E5%99%A8%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%9C%BA%E6%89%80%EF%BC%8C%E5%AE%9E%E7%8E%B0%E9%89%B4%E6%9D%83%E6%93%8D%E4%BD%9C%0A%20*%20%40author%20Veiking%0A%20*%2F%0A%40Component%0A%40ServletComponentScan%0A%40WebFilter(filterName%3D%22vFilterSecurityInterceptor%22%2CurlPatterns%3D%22%2F*%22)%0Apublic%20class%20VFilterSecurityInterceptor%20extends%20AbstractSecurityInterceptor%20implements%20Filter%20%7B%0A%0A%09%40Autowired%0A%09private%20VFilterInvocationSecurityMetadataSource%20vFilterInvocationSecurityMetadataSource%3B%0A%0A%09%40Autowired%0A%09public%20void%20setMyAccessDecisionManager(VAccessDecisionManager%20vAccessDecisionManager)%20%7B%0A%09%09super.setAccessDecisionManager(vAccessDecisionManager)%3B%0A%09%7D%0A%0A%09%40Override%0A%09public%20void%20init(FilterConfig%20filterConfig)%20throws%20ServletException%20%7B%0A%09%7D%0A%0A%09%40Override%0A%09public%20void%20doFilter(ServletRequest%20request%2C%20ServletResponse%20response%2C%20FilterChain%20chain)%0A%09%09%09throws%20IOException%2C%20ServletException%20%7B%0A%09%09FilterInvocation%20filterInvocation%20%3D%20new%20FilterInvocation(request%2C%20response%2C%20chain)%3B%0A%09%09invoke(filterInvocation)%3B%0A%09%7D%0A%0A%09public%20void%20invoke(FilterInvocation%20filterInvocation)%20throws%20IOException%2C%20ServletException%20%7B%0A%09%09%2F%2F%20filterInvocation%E9%87%8C%E9%9D%A2%E6%9C%89%E4%B8%80%E4%B8%AA%E8%A2%AB%E6%8B%A6%E6%88%AA%E7%9A%84url%0A%09%09%2F%2F%20%E9%87%8C%E9%9D%A2%E8%B0%83%E7%94%A8VFilterInvocationSecurityMetadataSource%E7%9A%84getAttributes(Object%20object)%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E8%8E%B7%E5%8F%96filterInvocation%E5%AF%B9%E5%BA%94%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83%E9%99%90%0A%09%09%2F%2F%20%E5%86%8D%E8%B0%83%E7%94%A8VAccessDecisionManager%E7%9A%84decide%E6%96%B9%E6%B3%95%E6%9D%A5%E6%A0%A1%E9%AA%8C%E7%94%A8%E6%88%B7%E7%9A%84%E6%9D%83%E9%99%90%E6%98%AF%E5%90%A6%E8%B6%B3%E5%A4%9F%0A%09%09InterceptorStatusToken%20interceptorStatusToken%20%3D%20super.beforeInvocation(filterInvocation)%3B%0A%09%09try%20%7B%0A%09%09%09%2F%2F%20%E6%89%A7%E8%A1%8C%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%8B%A6%E6%88%AA%E5%99%A8%0A%09%09%09filterInvocation.getChain().doFilter(filterInvocation.getRequest()%2C%20filterInvocation.getResponse())%3B%0A%09%09%7D%20finally%20%7B%0A%09%09%09super.afterInvocation(interceptorStatusToken%2C%20null)%3B%0A%09%09%7D%0A%09%7D%0A%0A%09%40Override%0A%09public%20void%20destroy()%20%7B%0A%09%7D%0A%0A%09%40Override%0A%09public%20Class%3C%3F%3E%20getSecureObjectClass()%20%7B%0A%09%09return%20FilterInvocation.class%3B%0A%09%7D%0A%0A%09%40Override%0A%09public%20SecurityMetadataSource%20obtainSecurityMetadataSource()%20%7B%0A%09%09return%20this.vFilterInvocationSecurityMetadataSource%3B%0A%09%7D%0A%0A%7D%0A" quality="high" allowscriptaccess="always" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer">&nbsp;<a href="javascript:void()" title="收藏这段代码" onclick="code_favorites_do_favorite(this);return false;"><img class="star" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/icon_star.png" alt="收藏代码"><img class="spinner" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/spinner.gif" style="display:none"></a></div></div><ol start="1" class="dp-j"><li><span><span class="keyword">package</span><span>&nbsp;com.veiking.sec.authorization;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;java.io.IOException;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;javax.servlet.Filter;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;javax.servlet.FilterChain;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;javax.servlet.FilterConfig;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;javax.servlet.ServletException;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;javax.servlet.ServletRequest;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;javax.servlet.ServletResponse;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;javax.servlet.annotation.WebFilter;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.beans.factory.annotation.Autowired;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.boot.web.servlet.ServletComponentScan;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.access.SecurityMetadataSource;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.access.intercept.AbstractSecurityInterceptor;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.access.intercept.InterceptorStatusToken;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.security.web.FilterInvocation;&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">import</span><span>&nbsp;org.springframework.stereotype.Component;&nbsp;&nbsp;</span></span></li><li><span><span class="comment">/**</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;访问鉴权过滤器</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;该过滤器的作用就是，用户请求时，提供权限资源管理器和权限判断器工作的场所，实现鉴权操作</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Veiking</span>&nbsp;</span></li><li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@Component</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@ServletComponentScan</span><span>&nbsp;&nbsp;</span></span></li><li><span><span class="annotation">@WebFilter</span><span>(filterName=</span><span class="string">"vFilterSecurityInterceptor"</span><span>,urlPatterns=</span><span class="string">"/*"</span><span>)&nbsp;&nbsp;</span></span></li><li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;VFilterSecurityInterceptor&nbsp;</span><span class="keyword">extends</span><span>&nbsp;AbstractSecurityInterceptor&nbsp;</span><span class="keyword">implements</span><span>&nbsp;Filter&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Autowired</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;VFilterInvocationSecurityMetadataSource&nbsp;vFilterInvocationSecurityMetadataSource;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Autowired</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;setMyAccessDecisionManager(VAccessDecisionManager&nbsp;vAccessDecisionManager)&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">super</span><span>.setAccessDecisionManager(vAccessDecisionManager);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;init(FilterConfig&nbsp;filterConfig)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;ServletException&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;doFilter(ServletRequest&nbsp;request,&nbsp;ServletResponse&nbsp;response,&nbsp;FilterChain&nbsp;chain)&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">throws</span><span>&nbsp;IOException,&nbsp;ServletException&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FilterInvocation&nbsp;filterInvocation&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;FilterInvocation(request,&nbsp;response,&nbsp;chain);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invoke(filterInvocation);&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;invoke(FilterInvocation&nbsp;filterInvocation)&nbsp;</span><span class="keyword">throws</span><span>&nbsp;IOException,&nbsp;ServletException&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;filterInvocation里面有一个被拦截的url</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;里面调用VFilterInvocationSecurityMetadataSource的getAttributes(Object&nbsp;object)这个方法获取filterInvocation对应的所有权限</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;再调用VAccessDecisionManager的decide方法来校验用户的权限是否足够</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InterceptorStatusToken&nbsp;interceptorStatusToken&nbsp;=&nbsp;<span class="keyword">super</span><span>.beforeInvocation(filterInvocation);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">try</span><span>&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;执行下一个拦截器</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterInvocation.getChain().doFilter(filterInvocation.getRequest(),&nbsp;filterInvocation.getResponse());&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class="keyword">finally</span><span>&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">super</span><span>.afterInvocation(interceptorStatusToken,&nbsp;</span><span class="keyword">null</span><span>);&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;destroy()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;Class&lt;?&gt;&nbsp;getSecureObjectClass()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;FilterInvocation.</span><span class="keyword">class</span><span>;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;SecurityMetadataSource&nbsp;obtainSecurityMetadataSource()&nbsp;{&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">this</span><span>.vFilterInvocationSecurityMetadataSource;&nbsp;&nbsp;</span></span></li><li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li><li><span>&nbsp;&nbsp;</span></li><li><span>}&nbsp;&nbsp;</span></li></ol></div><pre class="java" name="code" style="display: none;">package com.veiking.sec.authorization;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.servlet.ServletComponentScan;
import org.springframework.security.access.SecurityMetadataSource;
import org.springframework.security.access.intercept.AbstractSecurityInterceptor;
import org.springframework.security.access.intercept.InterceptorStatusToken;
import org.springframework.security.web.FilterInvocation;
import org.springframework.stereotype.Component;
/**
 * 访问鉴权过滤器
 * 该过滤器的作用就是，用户请求时，提供权限资源管理器和权限判断器工作的场所，实现鉴权操作
 * @author Veiking
 */
@Component
@ServletComponentScan
@WebFilter(filterName="vFilterSecurityInterceptor",urlPatterns="/*")
public class VFilterSecurityInterceptor extends AbstractSecurityInterceptor implements Filter {

	@Autowired
	private VFilterInvocationSecurityMetadataSource vFilterInvocationSecurityMetadataSource;

	@Autowired
	public void setMyAccessDecisionManager(VAccessDecisionManager vAccessDecisionManager) {
		super.setAccessDecisionManager(vAccessDecisionManager);
	}

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
	}

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		FilterInvocation filterInvocation = new FilterInvocation(request, response, chain);
		invoke(filterInvocation);
	}

	public void invoke(FilterInvocation filterInvocation) throws IOException, ServletException {
		// filterInvocation里面有一个被拦截的url
		// 里面调用VFilterInvocationSecurityMetadataSource的getAttributes(Object object)这个方法获取filterInvocation对应的所有权限
		// 再调用VAccessDecisionManager的decide方法来校验用户的权限是否足够
		InterceptorStatusToken interceptorStatusToken = super.beforeInvocation(filterInvocation);
		try {
			// 执行下一个拦截器
			filterInvocation.getChain().doFilter(filterInvocation.getRequest(), filterInvocation.getResponse());
		} finally {
			super.afterInvocation(interceptorStatusToken, null);
		}
	}

	@Override
	public void destroy() {
	}

	@Override
	public Class&lt;?&gt; getSecureObjectClass() {
		return FilterInvocation.class;
	}

	@Override
	public SecurityMetadataSource obtainSecurityMetadataSource() {
		return this.vFilterInvocationSecurityMetadataSource;
	}

}
</pre>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 这里边注意 @ServletComponentScan 和 @WebFilter(filterName="vFilterSecurityInterceptor",urlPatterns="/*") 注解，这个是确保过滤器自动注册并工作，否则过滤器无效。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 接下来启动项目，用个个用户登进去看看，尤其是veiking和xiaoming用户，访问没有权限的连接时果断遭到限制，403 Forbidden！</span>
<br>
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/5d650109-06c4-3eb3-a8cc-369acb1c7223.png">
<br>
<br><strong><span style="font-size: large;">九、结语</span></strong>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 好了，经过这么一番折腾，学习应用 Spring Security 框架该接触到的一些知识点，都有所体现了。权限控制的本质，就是对比校验，其一般体现方式，就是过滤器。Spring Security 是提供了一种相对比较好的表现形式，给出了一个优良的范式，敲示例代码的本身，更重要的应该是为了帮助理解和学习，而不是为了实现而实现。</span>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 本文是足够罗嗦，也是个人为了加深在理解记忆，但有些地方甚至也是错误的、不合乎规范的，希望大家不要被误导，这只能说是一个提供理解的参考，帮助大家从懵懂到懂;还有需要注意的是，因spring版本不同导致的一些细节差异，可能会有小坑，还是需要注意下的。文中所涉及代码最后都在附件中，感兴趣的同学可以自行下载。</span>
<br>
<br>
<br><span style="font-size: medium;">&nbsp;&nbsp;&nbsp; 还有，喜欢的，扫下支付宝家电红包吧，哈哈哈！</span>
<br>
<br><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/25e7d164-24ca-3621-a0de-388ac2eacda5.jpg">
<br>
<br>
<br>代码附件：
<br><a target="_blank" href="http://dl2.iteye.com/upload/attachment/0130/5515/3b1eeefa-fa64-3dd2-97c0-753bd96c1acc.rar">http://dl2.iteye.com/upload/attachment/0130/5515/3b1eeefa-fa64-3dd2-97c0-753bd96c1acc.rar</a>
<br>
<br>
<br>
<br>

  
  <div class="attachments">
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/14df6d4c-a972-37af-897a-4f6763a43f90.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/14df6d4c-a972-37af-897a-4f6763a43f90-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 4.3 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/0562907e-ea8a-3f5a-a395-77abdfd17e16.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/0562907e-ea8a-3f5a-a395-77abdfd17e16-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 2.8 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/ad42d585-2349-3eff-be56-15715c3a16f9.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/ad42d585-2349-3eff-be56-15715c3a16f9-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 5.2 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/395d1b9f-96a4-320a-a865-075280d43027.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/395d1b9f-96a4-320a-a865-075280d43027-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 5 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/f3b345f7-f076-38c0-b5bc-89d84c7265f6.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/f3b345f7-f076-38c0-b5bc-89d84c7265f6-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 5.8 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/8b6413cd-1684-3fdf-96c4-6a7e456fa744.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/8b6413cd-1684-3fdf-96c4-6a7e456fa744-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 4 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/bcc7cb77-3ca8-3bc2-add2-808c965f436f.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/bcc7cb77-3ca8-3bc2-add2-808c965f436f-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 3.8 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/a7d068c6-abd4-37b7-a5fd-b643c5f05115.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/a7d068c6-abd4-37b7-a5fd-b643c5f05115-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 9.8 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/7916b4d5-9123-3981-b86b-1fb35486d8ce.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/7916b4d5-9123-3981-b86b-1fb35486d8ce-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 5 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/990e7216-b53d-3b12-ab16-b44b1312d088.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/990e7216-b53d-3b12-ab16-b44b1312d088-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 10.5 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/f1513035-e8d9-3462-a031-51e0be5be2aa.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/f1513035-e8d9-3462-a031-51e0be5be2aa-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 10.2 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/932eef0f-1a57-344b-be21-31300a9c4337.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/932eef0f-1a57-344b-be21-31300a9c4337-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 3.7 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/88ba11a8-0483-3c76-9c79-231e3b02980c.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/88ba11a8-0483-3c76-9c79-231e3b02980c-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 3.1 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/5d650109-06c4-3eb3-a8cc-369acb1c7223.png" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/5d650109-06c4-3eb3-a8cc-369acb1c7223-thumb.png" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 7.4 KB</li>
        </ul>
      
    
      
        <ul style="display:none;">
          <li><a href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/25e7d164-24ca-3621-a0de-388ac2eacda5.jpg" target="_blank"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/25e7d164-24ca-3621-a0de-388ac2eacda5-thumb.jpg" class="magplus" title="点击查看原始大小图片"></a></li>
          
          <li>大小: 76.1 KB</li>
        </ul>
      
    
      
        <ul>
          <li><a href="http://dl.iteye.com/topics/download/3b1eeefa-fa64-3dd2-97c0-753bd96c1acc">sec.rar</a> (79.2 KB)</li>
          
          <li>下载次数: 4</li>
        </ul>
      
    
    
      <ul>
        <li><a href="https://veiking.iteye.com/blog/2429172#" onclick="$$(&#39;div.attachments ul&#39;).invoke(&#39;show&#39;);$(this).up(1).hide();return false;">查看图片附件</a></li>
      </ul>
    
  </div>


  <div>
    <!-- 广告位：PC端-iteye博客详情页底部banner2-728*90 -->
    <script>
      (function() {
          var s = "_" + Math.random().toString(36).slice(2);
          document.write('<div id="' + s + '"></div>');
          (window.slotbydup=window.slotbydup || []).push({
              id: '4774193',
              container: s,
              size: '728,90',
              display: 'inlay-fix'
          });
      })();
      jQuery(function(){
        window.csdn.recommendSide({
          contentBox: "recommend",
          postBox: jQuery(".news-right-side"),
          query:'springBoot+security+mybatis 实现用户权限的数据库动态管理',
          popu:'725'
        })
      });
    </script><div id="_zuxz4tgpgzd"></div><script charset="utf-8" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/acwm"></script><a href="http://www.baidu.com/cb.php?c=IgF_pyfqnHmkPj6vPjm0IZ0qnfK9ujYzrHn3rj6z0Aw-5Hnsn16YnjT0TAq15HfLP1fkrHn0T1YvmvF-m1mvuWDsmH7Wnywh0AwY5HDdPHckrjDdrHf0IgF_5y9YIZK1rBtEuywdQhP1uA38UhNYQvPEIgF1uiqbugw9pysEP1bsPWqdIAdxTvqdThP-5yF_UvIGIAN4ufKzujY4rHb0mhYqnfKsTWYs0ZNGujYkPHTYn1mk0AqGujYknWb3rjDY0APGujYLn1bdn1n0ULI85H00TZbqnW0v0APzm1YYn1D1P0" target="_blank" style="text-decoration:none;">

<div style="font-size:17px;color:#f13d3d;font-family: SF Pro Display,Roboto,Noto,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,sans-serif;width:728px;height:25px;font-weight:bold;">平均薪酬38K! 前端工程师凭什么这么值钱？</div>

<div style="font-size:13px;color:#666;font-family: SF Pro Display,Roboto,Noto,Arial,PingFang SC,Hiragino Sans GB,Microsoft YaHei,sans-serif;height:35px;margin-top:10px;">2019年，这类程序员需求增速达174%？原因竟是...</div>

</a>
  </div>



  <div id="bottoms" class="clearfix">
    <div id="digg_bottom" class="clearfix"><div class="digged"><strong>1</strong> <br>顶</div><div class="digged"><strong>0</strong> <br>踩</div></div>
    <div id="share_weibo">分享到：
      <a data-type="sina" href="javascript:;" title="分享到新浪微博"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/sina.jpg"></a>
      <a data-type="qq" href="javascript:;" title="分享到腾讯微博"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/tec.jpg"></a>
    </div>
  </div>

  <div class="blog_nav">
    <div class="pre_next">
      
      
      <a href="https://veiking.iteye.com/blog/2372284" class="pre" title="Spring回顾之八 —— Quartz在集群、分布式系统中的应用">Spring回顾之八 —— Quartz在集群、分布 ...</a>
    </div>
  </div>
  <div class="blog_bottom">
    <ul>
      <li>2018-08-22 21:52</li>
      <li>浏览 4085</li>
      <li><a href="https://veiking.iteye.com/blog/2429172#comments">评论(0)</a></li>
      
      
      <li>分类:<a href="https://www.iteye.com/blogs/category/language">编程语言</a></li>      
      <li class="last"><a href="https://www.iteye.com/wiki/blog/2429172" target="_blank" class="more">查看更多</a></li>
    </ul>    
  </div>
    
  <div class="blog_comment">
    <h5>评论</h5>
    <a id="comments" name="comments"></a>
    
    
    
  </div>

  <div class="blog_comment">
    <h5>发表评论</h5>
            <p style="text-align:center; margin-top:30px;margin-bottom:0px;"><a href="https://veiking.iteye.com/login" style="background-color:white;"> <img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/login_icon.png" style="vertical-align:middle; margin-right: 10px;"></a><a href="https://veiking.iteye.com/login">  您还没有登录,请您登录后再发表评论 </a></p>
      </div>
  </div>
  
      
<div class="boutique-curr-box blog_comment">
	  <div class="boutique-curr clearfix" id="album_detail_wrap">
	    <h5 class="h3titles">相关资源推荐</h5>
			<ul style="margin-top: 8px" class="clearfix">
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/u012373815/article/details/54632176" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012373815/article/details/54632176,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="springboot+mybatis＋SpringSecurity 实现用户角色数据库管理(一)"><em class="related_suggestion_highlight">springboot</em>+<em class="related_suggestion_highlight">mybatis</em>＋Spring<em class="related_suggestion_highlight">Security</em> <em class="related_suggestion_highlight">实现</em>用户角色<em class="related_suggestion_highlight">数据库</em><em class="related_suggestion_highlight">管理</em>(一)</a>
              <p>
                本文使用<em class="related_suggestion_highlight">springboot</em>+<em class="related_suggestion_highlight">mybatis</em>＋Spring<em class="related_suggestion_highlight">Security</em> <em class="related_suggestion_highlight">实现</em><em class="related_suggestion_highlight">用户权限</em><em class="related_suggestion_highlight">数据库</em><em class="related_suggestion_highlight">管理</em><em class="related_suggestion_highlight">实现</em>用户和角色用<em class="related_suggestion_highlight">数据库</em>存储，而资源(url)和权限的对应采用硬编码配置。 也就是角色可以访问的权限通过硬编码控制。角色和用户的关系通过<em class="related_suggestion_highlight">数据库</em>配置控制本文用户和角色的关系是多对多的关系。Spring<em class="related_suggestion_highlight">Security</em> 验证帐号密码AuthenticationManager调用Provider，provide
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/u012373815/article/details/54633046" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012373815/article/details/54633046,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012373815/article/details/54633046,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="springBoot+springSecurity 数据库动态管理用户、角色、权限（二）"><em class="related_suggestion_highlight">springBoot</em>+spring<em class="related_suggestion_highlight">Security</em> <em class="related_suggestion_highlight">数据库</em><em class="related_suggestion_highlight">动态</em><em class="related_suggestion_highlight">管理</em>用户、角色、权限（二）</a>
              <p>
                序： 
本文使用<em class="related_suggestion_highlight">springboot</em>+<em class="related_suggestion_highlight">mybatis</em>＋Spring<em class="related_suggestion_highlight">Security</em> <em class="related_suggestion_highlight">实现</em><em class="related_suggestion_highlight">数据库</em><em class="related_suggestion_highlight">动态</em>的<em class="related_suggestion_highlight">管理</em>用户、角色、权限<em class="related_suggestion_highlight">管理</em>本文细分角色和权限，并将用户、角色、权限和资源均采用<em class="related_suggestion_highlight">数据库</em>存储，并且自定义滤器，代替原有的Filter<em class="related_suggestion_highlight">Security</em>Interceptor过滤器， 
    并分别<em class="related_suggestion_highlight">实现</em>AccessDecisionManager、Invocation<em class="related_suggestion_highlight">Security</em>MetadataSource
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/AHAU10/article/details/74853698" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/AHAU10/article/details/74853698,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/AHAU10/article/details/74853698,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Spring Security实现动态权限管理">Spring <em class="related_suggestion_highlight">Security</em><em class="related_suggestion_highlight">实现</em><em class="related_suggestion_highlight">动态</em>权限<em class="related_suggestion_highlight">管理</em></a>
              <p>
                我所理解的<em class="related_suggestion_highlight">动态</em>权限就是RBAC(Role-Based Access Control)。 
就是可以自定义角色，配置角色可以访问哪些URL。然后给不同的角色设置不同的角色。为什么用Spring <em class="related_suggestion_highlight">Security</em>？听说Spring <em class="related_suggestion_highlight">Security</em>是基于Shiro的。Shiro没用过。之所以用Spring <em class="related_suggestion_highlight">Security</em>是因为它安全。废话！是因为可以帮你防御csrf等攻击。其<em class="related_suggestion_highlight">实现</em>在的Chrome浏览器
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/smilelifesky/article/details/42523975" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/smilelifesky/article/details/42523975,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/smilelifesky/article/details/42523975,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Spring+MyBatis实践——登录与权限控制">Spring+<em class="related_suggestion_highlight">MyBatis</em>实践——登录与权限控制</a>
              <p>
                Spring+<em class="related_suggestion_highlight">MyBatis</em>实践——登录与权限控制

1、<em class="related_suggestion_highlight">实现</em>用户登录功能；


&nbsp; 通过session来<em class="related_suggestion_highlight">实现</em>用户登录功能。在用户登录时，将用户的相关信息放在HttpSession对象用，其中HttpSession对象可以通过HttpServletRequest的getSession方法获得。同时，HttpSession对象对应Jsp内置对象session，在jsp页面中也可以通过ses
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/zwzw1219/article/details/82700937" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/zwzw1219/article/details/82700937,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/zwzw1219/article/details/82700937,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="spring boot后台管理系统，spring security权限控制">spring boot后台<em class="related_suggestion_highlight">管理</em>系统，spring <em class="related_suggestion_highlight">security</em>权限控制</a>
              <p>
                spring <em class="related_suggestion_highlight">security</em>版 源码地址：https://gitee.com/zhang.w/boot-<em class="related_suggestion_highlight">security</em>.git

shiro版 源码地址：https://gitee.com/zhang.w/boot-backend.git

随着spring&nbsp;boot的出现，java又上升了一个层次，以往tomcat部署war的形式也改变了，现在可以直接一个jar包、一行命令，真正<em class="related_suggestion_highlight">实现</em>一次编译...
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/wanderlustLee/article/details/80032177" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/wanderlustLee/article/details/80032177,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/wanderlustLee/article/details/80032177,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="springboot + springsecurity + mybatis + mysql实现用户登录验证，记住密码，退出功能"><em class="related_suggestion_highlight">springboot</em> + spring<em class="related_suggestion_highlight">security</em> + <em class="related_suggestion_highlight">mybatis</em> + mysql<em class="related_suggestion_highlight">实现</em>用户登录验证，记住密码，退出功能</a>
              <p>
                spring<em class="related_suggestion_highlight">security</em> 主要的功能是 验证 和 授权。spring<em class="related_suggestion_highlight">security</em>主要的工作原理是：

当我们在登录页面中输入用户名和密码之后首先会进入到UsernamePasswordAuthenticationToken验证(Authentication)，然后生成的Authentication会被交由AuthenticationManager来进行<em class="related_suggestion_highlight">管理</em>而AuthenticationMa...
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://download.csdn.net/download/gaoleijie/10661346" data-track-click="{&quot;con&quot;:&quot;,https://download.csdn.net/download/gaoleijie/10661346,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://download.csdn.net/download/gaoleijie/10661346,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="SpringBoot+Mybatis+SpringSecurity+JWT"><em class="related_suggestion_highlight">SpringBoot</em>+<em class="related_suggestion_highlight">Mybatis</em>+Spring<em class="related_suggestion_highlight">Security</em>+JWT</a>
              <p>
                <em class="related_suggestion_highlight">SpringBoot</em>2.0.4 +<em class="related_suggestion_highlight">Mybatis</em>+Spring<em class="related_suggestion_highlight">Security</em>+JWT<em class="related_suggestion_highlight">实现</em>权限<em class="related_suggestion_highlight">管理</em>及登陆<em class="related_suggestion_highlight">管理</em>
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/qq_22638399/article/details/81947000" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_22638399/article/details/81947000,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_22638399/article/details/81947000,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Spring Boot + Security + Mybatis 简单权限控制（入门 + 记录篇）">Spring Boot + <em class="related_suggestion_highlight">Security</em> + <em class="related_suggestion_highlight">Mybatis</em> 简单权限控制（入门 + 记录篇）</a>
              <p>
                Spring Boot <em class="related_suggestion_highlight">Security</em> 权限


  这两天研究了一下权限<em class="related_suggestion_highlight">管理</em>框架。。 
  查阅资料的过程中，JAVA中常用的安全框架有Shiro和Spring <em class="related_suggestion_highlight">Security</em>。Shiro比Spring <em class="related_suggestion_highlight">Security</em>学习起来更加简单，功能够用。而这两天的学习中，就我自己的体会而言，学习Spring <em class="related_suggestion_highlight">Security</em>还是有一定难度的。虽然它的扩展性非常的好，我们可以重载它默认的类，重写方法...
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://download.csdn.net/download/qq_29992111/10210258" data-track-click="{&quot;con&quot;:&quot;,https://download.csdn.net/download/qq_29992111/10210258,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://download.csdn.net/download/qq_29992111/10210258,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="基于springboot的RBAC权限管理演示系统">基于<em class="related_suggestion_highlight">springboot</em>的RBAC权限<em class="related_suggestion_highlight">管理</em>演示系统</a>
              <p>
                这是一个RBAC权限<em class="related_suggestion_highlight">管理</em>系统，即基于角色的<em class="related_suggestion_highlight">用户权限</em>控制，，使用<em class="related_suggestion_highlight">springboot</em>框架开发，UI使用的是layui。。
演示地址：http://116.196.66.248:8090/page/index
欢迎大家下载。。。。另外，建议使用IDEA导入项目。。
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/qq_28929589/article/details/79023012" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_28929589/article/details/79023012,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_28929589/article/details/79023012,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="SpringBoot通过自己的配置文件或者从数据库spring security动态配置url权限"><em class="related_suggestion_highlight">SpringBoot</em>通过自己的配置文件或者从<em class="related_suggestion_highlight">数据库</em>spring <em class="related_suggestion_highlight">security</em><em class="related_suggestion_highlight">动态</em>配置url权限</a>
              <p>
                我使用<em class="related_suggestion_highlight">springboot</em>的时候想做自己的配置文件的，用不了xml就重写了过滤器

首先需要了解spring <em class="related_suggestion_highlight">security</em>内置的各种filter：





Alias

Filter Class

Namespace Element or Attribute




CHANNEL_FILTER
ChannelProcessingFilter
http/
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/qq_21047625/article/details/78704902" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_21047625/article/details/78704902,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_21047625/article/details/78704902,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="4. Spring  Boot Security角色管理持久化实现">4. Spring  Boot <em class="related_suggestion_highlight">Security</em>角色<em class="related_suggestion_highlight">管理</em>持久化<em class="related_suggestion_highlight">实现</em></a>
              <p>
                1.概述,在第三章里大家学会了怎么初步使用Spring Boot 结合Spring <em class="related_suggestion_highlight">Security</em>来<em class="related_suggestion_highlight">实现</em>权限控制和角色<em class="related_suggestion_highlight">管理</em>,  但是我们发现无论是使用那种方式角色<em class="related_suggestion_highlight">管理</em>和权限控制全部是在 xml中或则 配置类中写的, 没有<em class="related_suggestion_highlight">实现</em>持久化, 本次就为大家讲解怎么<em class="related_suggestion_highlight">实现</em>.本小结为大家讲 用户角色<em class="related_suggestion_highlight">管理</em>的<em class="related_suggestion_highlight">实现</em>,  至于权限控制来下一个小结会讲.
2.表和数据 PDM文件路径:  https://github.co
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/Victor_An/article/details/81510874" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/Victor_An/article/details/81510874,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/Victor_An/article/details/81510874,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="springboot+springsecurity+oauth2整合（并用mysql数据库实现持久化客户端数据）"><em class="related_suggestion_highlight">springboot</em>+spring<em class="related_suggestion_highlight">security</em>+oauth2整合（并用mysql<em class="related_suggestion_highlight">数据库</em><em class="related_suggestion_highlight">实现</em>持久化客户端数据）</a>
              <p>
                <em class="related_suggestion_highlight">springboot</em>+spring<em class="related_suggestion_highlight">security</em>+oauth2整合（并用mysql<em class="related_suggestion_highlight">实现</em>持久化）

本文主要讲的是，<em class="related_suggestion_highlight">实现</em>oauth2的工作流程，需要对oauth2.0概念有一定的基础知识了解。阅读前请学习oauth2.0的理论知识。文末有此项目代码地址。


介绍
AuthorizationServer的搭建
创建Client
请求access_token
刷新access_token




介...
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/universsky2015/article/details/77965567" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/universsky2015/article/details/77965567,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/universsky2015/article/details/77965567,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Spring Boot集成Security使用数据库用户角色权限ROLE_问题">Spring Boot集成<em class="related_suggestion_highlight">Security</em>使用<em class="related_suggestion_highlight">数据库</em>用户角色权限ROLE_问题</a>
              <p>
                
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/qq_36526703/article/details/81910680" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_36526703/article/details/81910680,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_36526703/article/details/81910680,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="spring boot使用HandlerInterceptor实现系统权限管理">spring boot使用HandlerInterceptor<em class="related_suggestion_highlight">实现</em>系统权限<em class="related_suggestion_highlight">管理</em></a>
              <p>
                背景 
前端效果类似于下图： 
 
父子级菜单分别对应不同的操作权限、访问路径等。

<em class="related_suggestion_highlight">数据库</em>建三张表： 
1.operate 页面菜单配置表 
 
id即为权限id，url为菜单对应页面地址，type控制菜单是否显示。

2.action  请求url配置表 
 
action为对应操作请求的url，operate即为对应操作权限，log控制是否打印日志。

3.account用户表 
保存用户信...
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/liubang159/article/details/77982334" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/liubang159/article/details/77982334,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/liubang159/article/details/77982334,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="springboot-shrio-mybatis登录验证与权限控制"><em class="related_suggestion_highlight">springboot</em>-shrio-<em class="related_suggestion_highlight">mybatis</em>登录验证与权限控制</a>
              <p>
                <em class="related_suggestion_highlight">springboot</em>-shrio-<em class="related_suggestion_highlight">mybatis</em>
一、背景
最近做的一个spingboot项目中用到权限控制，网上也看了其他<em class="related_suggestion_highlight">springboot</em>集成shiro进行权限控制的文档。大多文档用户与角色为多对多关系，角色与权限多对多，我的项目需求用户与角色为单对单，角色与权限多对多。所以自己重新整理了表结构完成。
&nbsp;
二、表结构
/*
Navicat MySQL Data Transfer
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/u012373815/article/details/55225079" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012373815/article/details/55225079,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/u012373815/article/details/55225079,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="springBoot+springSecurity 动态管理Restful风格权限（三）"><em class="related_suggestion_highlight">springBoot</em>+spring<em class="related_suggestion_highlight">Security</em> <em class="related_suggestion_highlight">动态</em><em class="related_suggestion_highlight">管理</em>Restful风格权限（三）</a>
              <p>
                上一篇博客 
 <em class="related_suggestion_highlight">springBoot</em>+spring<em class="related_suggestion_highlight">Security</em> <em class="related_suggestion_highlight">数据库</em><em class="related_suggestion_highlight">动态</em><em class="related_suggestion_highlight">管理</em>用户、角色、权限（二） 
只是<em class="related_suggestion_highlight">实现</em>了用户、角色、权限的<em class="related_suggestion_highlight">动态</em><em class="related_suggestion_highlight">管理</em>，但是其权限<em class="related_suggestion_highlight">管理</em>是有缺陷的，他不支持restful风格的接口权限<em class="related_suggestion_highlight">管理</em>，因为他无法区分客户端的请求方式。本片博客是为了弥补此缺陷的，本篇博客将在  <em class="related_suggestion_highlight">springBoot</em>+spring<em class="related_suggestion_highlight">Security</em> <em class="related_suggestion_highlight">数据库</em><em class="related_suggestion_highlight">动态</em><em class="related_suggestion_highlight">管理</em>用户、角色、权限（二） 
的基础上进行修改使其
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/zhouzhiwengang/article/details/55844444" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/zhouzhiwengang/article/details/55844444,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/zhouzhiwengang/article/details/55844444,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="SpringMVC+Spring+Mybatis +Annotation实现方法，按钮级别的细粒度权限控制">SpringMVC+Spring+<em class="related_suggestion_highlight">Mybatis</em> +Annotation<em class="related_suggestion_highlight">实现</em>方法，按钮级别的细粒度权限控制</a>
              <p>
                本文转载自：http://blog.csdn.net/ycyk_168/article/details/18456631


随着企业信息化的不断深入，各种各样的信息系统成为提高企业运营及<em class="related_suggestion_highlight">管理</em>效率的必备工具，越来越多的企业核心机密如销售机会、客户资料、设计方案等通过信息系统存储、备案、流转，这些核心资料一旦外泄，势必对企业造成极大损失。科技时代，信息是企业生存的命脉，信息的安全也必然成为企业
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/twomr/article/details/79137056" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/twomr/article/details/79137056,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/twomr/article/details/79137056,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="springboot使用mybatis多数据源动态切换的实现"><em class="related_suggestion_highlight">springboot</em>使用<em class="related_suggestion_highlight">mybatis</em>多数据源<em class="related_suggestion_highlight">动态</em>切换的<em class="related_suggestion_highlight">实现</em></a>
              <p>
                需求：项目使用了读写分离，或者数据进行了分库处理，我们希望在操作不同的<em class="related_suggestion_highlight">数据库</em>的时候，我们的程序能够<em class="related_suggestion_highlight">动态</em>的切换到相应的<em class="related_suggestion_highlight">数据库</em>，执行相关的操作。

首先，你需要一个能够正常运行的<em class="related_suggestion_highlight">springboot</em>项目，配置<em class="related_suggestion_highlight">mybatis</em>并且能够正常的操作<em class="related_suggestion_highlight">数据库</em>（增删查改）



现在开始<em class="related_suggestion_highlight">实现</em>：

思路：现在项目的结构设计基本上是基于MVC的，那么<em class="related_suggestion_highlight">数据库</em>的操作集中在dao层完成，主要业务逻辑在service层处理，c...
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/qq_36528022/article/details/83094460" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_36528022/article/details/83094460,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/qq_36528022/article/details/83094460,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Spring  boot 与 spring Security 结合JWT实现动态权限管理">Spring  boot 与 spring <em class="related_suggestion_highlight">Security</em> 结合JWT<em class="related_suggestion_highlight">实现</em><em class="related_suggestion_highlight">动态</em>权限<em class="related_suggestion_highlight">管理</em></a>
              <p>
                Spring  boot 与 spring <em class="related_suggestion_highlight">Security</em> 结合JWT<em class="related_suggestion_highlight">实现</em><em class="related_suggestion_highlight">动态</em>权限<em class="related_suggestion_highlight">管理</em>
spring boot 与spring <em class="related_suggestion_highlight">security</em> 结合jwt<em class="related_suggestion_highlight">实现</em><em class="related_suggestion_highlight">动态</em>权限<em class="related_suggestion_highlight">管理</em>
你好！ 这是你第一次使用 Markdown编辑器 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。
新的改变
我们对Markdown编辑器进行了一些...
              </p>
						</li>
				
						<li class="news-recommends-ajax">
              
              <a href="https://blog.csdn.net/universsky2015/article/details/77965566" data-track-click="{&quot;con&quot;:&quot;,https://blog.csdn.net/universsky2015/article/details/77965566,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" data-track-view="{&quot;con&quot;:&quot;,https://blog.csdn.net/universsky2015/article/details/77965566,-&quot;,&quot;mod&quot;:&quot;popu_712&quot;}" target="_blank" title="Spring Boot集成Security使用数据库用户角色权限用户名问题">Spring Boot集成<em class="related_suggestion_highlight">Security</em>使用<em class="related_suggestion_highlight">数据库</em>用户角色权限用户名问题</a>
              <p>
                问题描述
代码
package com.<em class="related_suggestion_highlight">springboot</em>.in.action.dao

import java.util.List

import com.<em class="related_suggestion_highlight">springboot</em>.in.action.entity.User
import org.springframework.data.jpa.repository.Query
import org.springframework.data.re
              </p>
						</li>
				
			</ul>
	  </div>
</div>

    

</div>


<script type="text/javascript">
  dp.SyntaxHighlighter.HighlightAll('code', true, true);

  $$('#main .blog_content pre[name=code]').each(function(pre, index){ // blog content
    var post_id = 2429172;
    var location = window.location;
    source_url = location.protocol + "//" + location.host + location.pathname + location.search;
    pre.writeAttribute('codeable_id', post_id);
    pre.writeAttribute('codeable_type', "Blog");
    pre.writeAttribute('source_url', source_url);
    pre.writeAttribute('pre_index', index);
    pre.writeAttribute('title', 'springBoot+security+mybatis 实现用户权限的数据库动态管理');
  });

  fix_image_size($$('div.blog_content img'), 700);

  function processComment() {
    $$('#main .blog_comment > div').each(function(comment){// comment
      var post_id = comment.id.substr(2);
      $$("#"+comment.id+" pre[name=code]").each(function(pre, index){
        var location = window.location;
        source_url = location.protocol + "//" + location.host + location.pathname + location.search;
        source_url += "#" + comment.id;
        pre.writeAttribute('codeable_id', post_id);
        pre.writeAttribute('codeable_type', "BlogComment");
        pre.writeAttribute('source_url', source_url);
        pre.writeAttribute('pre_index', index);
        pre.writeAttribute('title', 'springBoot+security+mybatis 实现用户权限的数据库动态管理');
      });
    });
  }

  function quote_comment(id) {
    new Ajax.Request('/editor/quote', {
      parameters: {'id':id, 'type':'BlogComment'},
      onSuccess:function(response){editor.bbcode_editor.textarea.insertAfterSelection(response.responseText);
        Element.scrollTo(editor.bbcode_editor.textarea.element);}
    });
  }

  code_favorites_init();
  processComment();
  new WeiboShare({share_buttons: $('share_weibo'), img_scope: $('blog_content')});
</script>




      </div>
      
        <div class="blog-sidebar">
          <div class="blog-sidebar-fixed">
            <div class="news-right-side">

            <div class="newbox recommend"><div class="recommend-right">
  <ul class="recommend-fixed-box">  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/I_can_Fly_/article/details/84925043,-&quot;}"><a href="https://blog.csdn.net/I_can_Fly_/article/details/84925043" target="_blank"><div class="content clearfix"><h5 class="" title="springBoot+security+mybatis" &#23454;&#29616;&#29992;&#25143;&#26435;&#38480;&#30340;&#25968;&#25454;&#24211;&#21160;&#24577;&#31649;&#29702;="">springBoot+security+mybatis 实现用户权限的数据库动态管理</h5><span class="time">2018-08-22</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>32</span></div><div class="right-item-desc">
[b][size=large]一、Spring Security 应用的概述[/size][/b]

[size=medium]    鉴于目前微服务的兴起，Spring周边方案的普及，以及 Spring Security 强大的和高度可定制的优良特性，最近关注了一下相关内容，顺便留个笔记心得，希望对大家有所帮助。[/size]

[size=medium]    Spring Sec...</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/best_caohit/article/details/7873602,-&quot;}"><a href="https://blog.csdn.net/best_caohit/article/details/7873602" target="_blank"><div class="content clearfix"><h5 class="" title="c#实现按用户角色分配菜单的使用权限（WinForm）" &#36716;&#36733;="">c#实现按用户角色分配菜单的使用权限（WinForm） 转载</h5><span class="time">2012-08-16</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>3517</span></div><div class="right-item-desc">c#实现按用户角色分配菜单的使用权限（WinForm）



&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 前阵子接个WinForm应用的小程序，要求按用户的角色动态设置可以使用的菜单项（无权使用的灰色显示）。程序做完了，总结了一下解决问题的思路，拿到这里跟大家交流学习一下。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 要求：根据用户登录时的角色，来设置其可以使用的菜单项。
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我的思路：首先建立三个表：用户角色表 tb_role (</div></a></li><div style="" id="_nbu9ikkpfgc" class="right-item ad_item"><iframe id="iframeu3586193_0" name="iframeu3586193_0" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/acwm.html" width="280" height="70" align="center,center" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" style="border:0;vertical-align:bottom;margin:0;width:280px;height:70px" allowtransparency="true"></iframe></div>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/qq_39187822/article/details/83374049,-&quot;}"><a href="https://blog.csdn.net/qq_39187822/article/details/83374049" target="_blank"><div class="content clearfix"><h5 class="" title="java实现动态权限(菜单管理)动态添加菜单，动态添加角色SSM框架">java实现动态权限(菜单管理)动态添加菜单，动态添加角色SSM框架</h5><span class="time">2018-10-25</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>865</span></div><div class="right-item-desc">首先是数据库设计

Menu表（菜单表）



Role表（角色表）



Role_Menu表（角色菜单关系表）



User表（用户表）



User_Role表（用户角色关系表）



其他实体类就略过了

在Menu实体类中添加了一个List&amp;amp;lt;Menu&amp;amp;gt;集合

在MenuMapper中写了如下的方法


 /**
     * 根据等级或父节点查询菜单信息
     * @...</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/I_Am_Zou/article/details/79258221,-&quot;}"><a href="https://blog.csdn.net/I_Am_Zou/article/details/79258221" target="_blank"><div class="content clearfix"><h5 class="" title="创建数据库动态管理用户、角色、权限和资源服务">创建数据库动态管理用户、角色、权限和资源服务</h5><span class="time">2018-02-05</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>1239</span></div><div class="right-item-desc">使用spring Security3的四种方法概述

那么在Spring Security3的使用中，有4种方法：

一种是全部利用配置文件，将用户、权限、资源(url)硬编码在xml文件中，已经实现过，并经过验证；

二种是用户和权限用数据库存储，而资源(url)和权限的对应采用硬编码配置，目前这种方式已经实现，并经过验证。

三种是细分角色和权限，并将用户、角色、权限和资源均采</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/qq_32230309/article/details/81019042,-&quot;}"><a href="https://blog.csdn.net/qq_32230309/article/details/81019042" target="_blank"><div class="content clearfix"><h5 class="" title="用户权限管理动态显示该用户的有什么权限菜单的.">用户权限管理动态显示该用户的有什么权限菜单的.</h5><span class="time">2018-07-12</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>709</span></div><div class="right-item-desc">此时需要&nbsp;四张表 :1 用户表(user)2 菜单表(menu)3 职位表(posts)4 职位表和菜单表中间表(post_menu)用户表不用多说里面都是个人信息,就是多一个他是什么职位的职位表的ID职位表:菜单表:职位表和菜单表中间表以上就是这几个表设计其中该职位有什么权限需要在前端去设置一下,然后添加到中间表中.添加页面后台代码Controller:public void update(Po...</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://download.csdn.net/download/clarck520/10111629,-&quot;}"><a href="https://download.csdn.net/download/clarck520/10111629" target="_blank"><div class="content clearfix"><h5 class="" title="apache_shiro_管理用户权限与数据库交互">apache_shiro_管理用户权限与数据库交互</h5><span class="time">2017-11-09</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>1</span></div><div class="right-item-desc">apache_shiro管理用户权限与数据库交互，实现基础的权限管理</div></a></li><div style="" id="_iogfr0ax8an" class="right-item ad_item"><iframe id="iframeu3591305_0" name="iframeu3591305_0" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/acwm(1).html" width="280" height="70" align="center,center" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" style="border:0;vertical-align:bottom;margin:0;width:280px;height:70px" allowtransparency="true"></iframe></div>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/beckrabbit/article/details/83190802,-&quot;}"><a href="https://blog.csdn.net/beckrabbit/article/details/83190802" target="_blank"><div class="content clearfix"><h5 class="" title="根据用户权限动态生成菜单">根据用户权限动态生成菜单</h5><span class="time">2007-10-15</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>97</span></div><div class="right-item-desc">现在项目里有这个需求：用户登录的时候可以选择不同的角色，每个角色对应着各种不同的权限，这些权限决定了要给用户显示哪些菜单。
我是这样实现的：首先将用户登录后的权限信息和这些权限可以显示的菜单项一起封装在userinfo里设到session里面，
界面上js里事先设定好了各种权限和菜单对象，并且每个对象都用一个boolean型开关来标识，JS从传过来的权限和菜单项中取出该用户的权限和菜单数组，把对应...</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/GUIDchen/article/details/79612249,-&quot;}"><a href="https://blog.csdn.net/GUIDchen/article/details/79612249" target="_blank"><div class="content clearfix"><h5 class="" title="MySQL数据库的用户权限管理">MySQL数据库的用户权限管理</h5><span class="time">2018-03-19</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>543</span></div><div class="right-item-desc">MySQL数据库的用户权限管理在数据库方面有两个方向。一个是数据库管理员（Database Administrator）简称DBA，一个是数据库开发工程师（Database Developer），其中：1) 数据库开发工程师的主要职责是设计和开发数据库管理系统和数据库应用软件系统，侧重于软件研发；2) DBA 的主要职责是运维和管理数据库管理系统，侧重于运维管理。不知道小伙伴们有没有想往这方面发展...</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/zhengzixiang666/article/details/80446699,-&quot;}"><a href="https://blog.csdn.net/zhengzixiang666/article/details/80446699" target="_blank"><div class="content clearfix"><h5 class="" title="easyUi实现菜单权限管理">easyUi实现菜单权限管理</h5><span class="time">2018-05-25</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>774</span></div><div class="right-item-desc">先看效果：1，我先用管理员账户登陆看到的菜单是：2,给角色分菜单权限：3，给用户分配角色4.用新用户登陆：5.具体代码后期加上。或者想要的先关注下我的博客。...</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/lidaasky/article/details/8250744,-&quot;}"><a href="https://blog.csdn.net/lidaasky/article/details/8250744" target="_blank"><div class="content clearfix"><h5 class="" title="动态创建数据库表">动态创建数据库表</h5><span class="time">2013-03-18</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>2945</span></div><div class="right-item-desc">以前对数据库的操作基本上处于数据行阶段，在得知动态可以生成数据库表后很是激动，这可以更灵活的操作数据库，使用方法也出乎意料的简单，以C#为例：
SQL语句
string strSql = @"IF object_id('" + tableName + "') IS NULL Create Table " + tableName + "(QuestionId int IDENTITY(1,1),</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/u012373815/article/details/54632176,-&quot;}"><a href="https://blog.csdn.net/u012373815/article/details/54632176" target="_blank"><div class="content clearfix"><h5 class="" title="springboot+mybatis＋SpringSecurity" &#23454;&#29616;&#29992;&#25143;&#35282;&#33394;&#25968;&#25454;&#24211;&#31649;&#29702;(&#19968;)="">springboot+mybatis＋SpringSecurity 实现用户角色数据库管理(一)</h5><span class="time">2017-01-20</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>60501</span></div><div class="right-item-desc">本文使用springboot+mybatis＋SpringSecurity 实现用户权限数据库管理实现用户和角色用数据库存储，而资源(url)和权限的对应采用硬编码配置。 也就是角色可以访问的权限通过硬编码控制。角色和用户的关系通过数据库配置控制本文用户和角色的关系是多对多的关系。SpringSecurity 验证帐号密码AuthenticationManager调用Provider，provide</div></a></li><div style="" id="_hmzvgq3c7wt" class="right-item ad_item"><iframe id="iframeu3591311_0" name="iframeu3591311_0" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/acwm(2).html" width="280" height="70" align="center,center" vspace="0" hspace="0" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" style="border:0;vertical-align:bottom;margin:0;width:280px;height:70px" allowtransparency="true"></iframe></div>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/chpswg/article/details/17282471,-&quot;}"><a href="https://blog.csdn.net/chpswg/article/details/17282471" target="_blank"><div class="content clearfix"><h5 class="" title="【转载】【权限控制】角色访问动态生成用户权限菜单树">【转载】【权限控制】角色访问动态生成用户权限菜单树</h5><span class="time">2013-12-12</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>38916</span></div><div class="right-item-desc">【转载】【权限控制】角色访问动态生成用户权限菜单树
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

博客分类：
通用组件设计

&nbsp;



转载： http://www.comprg.com.cn/post_show.asp?id=7873


作者：佚名&nbsp;&nbsp; 

一、引言 
&nbsp; 
&nbsp;
随着.NET 和J2EE 开发平台的推出，传统的软件开发模式开始向B/S 模式转变，这种转变给系统的</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/qq_39478853/article/details/76196954,-&quot;}"><a href="https://blog.csdn.net/qq_39478853/article/details/76196954" target="_blank"><div class="content clearfix"><h5 class="" title="用户权限管理数据库表结构设计">用户权限管理数据库表结构设计</h5><span class="time">2017-07-27</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>673</span></div><div class="right-item-desc">实现业务系统中的用户权限管理--设计篇

　　B/S系统中的权限比C/S中的更显的重要，C/S系统因为具有特殊的客户端，所以访问用户的权限检测可以通过客户端实现或通过客户端+服务器检测实现，而B/S中，浏览器是每一台计算机都已具备的，如果不建立一个完整的权限检测，那么一个“非法用户”很可能就能通过浏览器轻易访问到B/S系统中的所有功能。因此B/S业务系统都需要有一个或多个权限系统来实现访问权限</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/pg_hgdb/article/details/79220075,-&quot;}"><a href="https://blog.csdn.net/pg_hgdb/article/details/79220075" target="_blank"><div class="content clearfix"><h5 class="" title="数据库用户权限管理（一）">数据库用户权限管理（一）</h5><span class="time">2018-01-31</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>1646</span></div><div class="right-item-desc">一个用户的权限可以分为两大类
一类是创建用户的时候指定的：
登录（login）[需要注意，user自带login权限，role不带]
创建用户、角色（createuser/role）
权限继承（inherit）
创建数据库（createdb）
超级用户（superuser）
等等
举例：
highgo=# create role trole with createrole inh</div></a></li>  <li class="right-item cebian_item" data-track-click="{&quot;mod&quot;:&quot;popu_725&quot;,&quot;con&quot;:&quot;,https://blog.csdn.net/zhou6343178/article/details/79498093,-&quot;}"><a href="https://blog.csdn.net/zhou6343178/article/details/79498093" target="_blank"><div class="content clearfix"><h5 class="" title="基于" rbac="" &#31616;&#21333;&#23454;&#29616;&#21160;&#24577;&#33756;&#21333;&#21450;&#26435;&#38480;&#31649;&#29702;="">基于 RBAC 简单实现动态菜单及权限管理</h5><span class="time">2018-03-09</span><span class="read so_read"> <svg class="icon no-active hover-hide" aria-hidden="true"><use xlink:href="#yuedushu"></use></svg>2340</span></div><div class="right-item-desc">RBAC(Role-Based Access Control, 基于角色访问控制) 原理及设计逻辑参考：点击打开链接项目地址：GitHub：点击打开链接项目介绍：1、基于 SpringBoot&nbsp;2、基于 JWT 实现前后分离,Spring Security 安全控制3、前端采用 topjui （基于 easyui 的美化框架 ）4、实现了三级动态菜单、页面按钮动态授权功能5、实现了用户管理、菜单管...</div></a></li></ul>
</div></div></div>
            <div class="persion_article">

            <div class="right_box footer_box csdn-tracking-statistics" data-mod="popu_475" data-dsm="post">        <div class="contact-box" id="footer-contact-box"><div class="img-box"><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/csdn-cxrs.png" alt="程序人生" style="padding: 6px;"><p class="app-text">程序人生</p></div><div class="img-box fr"><a href="https://blog.csdn.net/csdnnews?utm_source=csdn_footer" target="_blank"><img style="padding:6px;" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/csdn-zx.png" alt="CSDN资讯"></a><p class="app-text">CSDN资讯</p></div></div>        <div class="contact-info">        <p><svg width="16" height="16" xmlns="http://www.w3.org/2000/svg"><path d="M2.167 2h11.666C14.478 2 15 2.576 15 3.286v9.428c0 .71-.522 1.286-1.167 1.286H2.167C1.522 14 1 13.424 1 12.714V3.286C1 2.576 1.522 2 2.167 2zm-.164 3v1L8 10l6-4V5L8 9 2.003 5z" fill="#5c5c5c" fill-rule="evenodd"></path></svg><a href="mailto:webmaster@csdn.net" target="_blank"><span class="txt">kefu@csdn.net</span></a>        <em class="width126"><svg t="1538013544186" width="17" height="17" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="23556" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css"></style></defs><path d="M902.60033922 650.96445566c-18.0718526-100.84369837-94.08399771-166.87723736-94.08399771-166.87723737 10.87530062-91.53186599-28.94715402-107.78733693-28.94715401-107.78733691C771.20003413 93.08221664 517.34798062 98.02553561 511.98620441 98.16348824 506.65661791 98.02553561 252.75857992 93.08221664 244.43541101 376.29988138c0 0-39.79946279 16.25547094-28.947154 107.78733691 0 0-75.98915247 66.03353901-94.0839977 166.87723737 0 0-9.63372291 170.35365477 86.84146124 20.85850523 0 0 21.70461757 56.79068296 61.50407954 107.78733692 0 0-71.1607951 23.19910867-65.11385185 83.46161052 0 0-2.43717093 67.16015592 151.93232126 62.56172014 0 0 108.5460788-8.0932473 141.10300432-52.14626271H526.33792324c32.57991817 44.05301539 141.10300431 52.1462627 141.10300431 52.14626271 154.3235077 4.59843579 151.95071457-62.56172013 151.95071457-62.56172014 6.00095876-60.26250183-65.11385185-83.46161053-65.11385185-83.46161052 39.77647014-50.99665395 61.4810877-107.78733693 61.4810877-107.78733692 96.45219231 149.49514952 86.84146124-20.85850523 86.84146125-20.85850523" p-id="23557" fill="#5c5c5c"></path></svg><a href="http://wpa.b.qq.com/cgi/wpa.php?ln=1&amp;key=XzgwMDE4MDEwNl80ODc3MzVfODAwMTgwMTA2XzJf" class="qqcustomer_s" target="_blank"><span class="txt">QQ客服</span></a></em></p>        <p><em class="width126"><svg t="1538012951761" width="17" height="17" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="23083" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css"></style></defs><path d="M466.4934485 880.02006511C264.6019863 859.18313878 107.13744214 688.54706608 107.13744214 481.14947309 107.13744214 259.68965394 286.68049114 80.14660493 508.14031029 80.14660493s401.00286817 179.54304901 401.00286814 401.00286816v1.67343191C908.30646249 737.58941724 715.26799489 943.85339507 477.28978337 943.85339507c-31.71423369 0-62.61874229-3.67075386-92.38963569-10.60739903 30.09478346-11.01226158 56.84270313-29.63593923 81.5933008-53.22593095z m-205.13036267-398.87059202a246.77722444 246.77722444 0 0 0 493.5544489 0 30.85052691 30.85052691 0 0 0-61.70105383 0 185.07617062 185.07617062 0 0 1-370.15234125 0 30.85052691 30.85052691 0 0 0-61.70105382 0z" p-id="23084" fill="#5c5c5c"></path></svg><a href="http://bbs.csdn.net/forums/Service" target="_blank"><span class="txt">客服论坛</span></a></em>        <svg t="1538013874294" width="17" height="17" style="" viewBox="0 0 1194 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="23784" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><style type="text/css"></style></defs><path d="M1031.29689505 943.85339507h-863.70679012A71.98456279 71.98456279 0 0 1 95.60554212 871.86883228v-150.85178906c0-28.58329658 16.92325492-54.46750945 43.13135785-65.93861527l227.99160176-99.75813425c10.55341735-4.61543317 18.24580594-14.0082445 20.72896295-25.23643277l23.21211998-105.53417343a71.95757195 71.95757195 0 0 1 70.28414006-56.51881307h236.95255971c33.79252817 0 63.02360485 23.5090192 70.28414004 56.51881307l23.21211997 105.53417343c2.48315701 11.25517912 10.17554562 20.62099961 20.72896296 25.23643277l227.99160177 99.75813425a71.98456279 71.98456279 0 0 1 43.13135783 65.93861527v150.85178906A71.98456279 71.98456279 0 0 1 1031.26990421 943.85339507z m-431.85339506-143.94213475c143.94213474 0 143.94213474-48.34058941 143.94213474-107.96334876s-64.45411922-107.96334877-143.94213474-107.96334877c-79.51500637 0-143.94213474 48.34058941-143.94213475 107.96334877s0 107.96334877 143.94213475 107.96334876zM1103.254467 296.07330247v148.9894213a35.97878598 35.97878598 0 0 1-44.15700966 35.03410667l-143.94213473-33.57660146a36.0057768 36.0057768 0 0 1-27.80056231-35.03410668V296.1002933c-35.97878598-47.98970852-131.95820302-71.98456279-287.91126031-71.98456279S347.53801649 248.11058478 311.53223967 296.1002933v115.385829c0 16.73431906-11.52508749 31.25538946-27.80056233 35.03410668l-143.94213473 33.57660146A35.97878598 35.97878598 0 0 1 95.63253297 445.06272377V296.07330247C162.81272673 152.13116772 330.77670658 80.14660493 599.47049084 80.14660493s436.63077325 71.98456279 503.81096699 215.92669754z" p-id="23785" fill="#5c5c5c"></path></svg>400-660-0108 </p>        <p style="text-align:center">工作时间 8:30-22:00</p>        </div>        <div class="bg-gray">            <div class="feed_copyright">            <p><a class="right-dotte" href="https://www.csdn.net/company/index.html#about" target="_blank">关于我们</a><a href="https://www.csdn.net/company/index.html#recruit" target="_blank" class="right-dotte">招聘</a><a href="https://www.csdn.net/company/index.html#contact" target="_blank" class="right-dotte">广告服务</a>            <a href="https://www.csdn.net/gather/A" target="_blank" class="footer_baidu">            网站地图</a></p>            <p class="fz12_baidu"><a href="https://zn.baidu.com/cse/home/index" target="_blank"><svg width="13" height="14" xmlns="http://www.w3.org/2000/svg"><path d="M8.392 7.013c1.014 1.454 2.753 2.8 2.753 2.8s1.303 1.017.47 2.98c-.833 1.962-3.876.942-3.876.942s-1.122-.36-2.424-.072c-1.303.291-2.426.181-2.426.181s-1.523.037-1.957-1.888c-.434-1.927 1.52-2.982 1.666-3.161.145-.183 1.159-.873 1.81-1.963.653-1.09 2.608-1.962 3.984.181zm1.23 5.706V9.346H8.64v2.534h-.937s-.3-.044-.356-.285V9.33l-.925.015v2.518s.042.627.925.855h2.277zm-3.685.013V7.951l-.896-.014v1.295H3.987s-1.054.086-1.422 1.28c-.129.798.114 1.266.156 1.368.043.099.383.682 1.238.852h1.978zm-2.433-1.45c-.087-.286.013-.613.057-.741.042-.128.228-.427.61-.54h.855v1.948h-.797s-.555-.029-.725-.668zm6.877-8.775c-.143.909-.865 2.108-1.99 1.962-1.121-.144-1.375-1.16-1.267-2.179C7.214 1.458 8.21.18 9.007.364c.796.18 1.52 1.235 1.374 2.143zm-4.09-.345c0 1.197-.68 2.164-1.52 2.164S3.25 3.36 3.25 2.162C3.25.967 3.932 0 4.77 0c.842 0 1.52.967 1.52 2.162zm4.854 2.09c1.34 0 1.701 1.309 1.701 1.743 0 .438.182 2.29-1.485 2.326-1.667.037-1.737-1.126-1.737-1.96 0-.874.179-2.11 1.52-2.11zm-7.93.581c.045.398.253 2.217-1.27 2.544C.427 7.704-.14 5.947.028 5.124c0 0 .18-1.78 1.412-1.89.98-.085 1.7.986 1.774 1.6z" fill="#999" fill-rule="evenodd"></path></svg><em>百度提供站内搜索</em></a>&nbsp;<a href="http://www.miibeian.gov.cn/" target="_blank" class="ml14">京ICP证19004658号</a></p>            <p class="fz12_baidu">©1999-2019 北京创新乐知网络技术有限公司 </p>            </div>        </div>        <div class="allow-info-box">        <p><span>经营性网站备案信息</span>        <em class="width126"><a href="http://www.cyberpolice.cn/" target="_blank"><span>网络110报警服务</span></a></em></p>        <p><a href="http://www.bjjubao.org/" target="_blank"><span>北京互联网违法和不良信息举报中心</span></a></p>        <p><a href="http://www.12377.cn/" target="_blank"><span>中国互联网举报中心</span></a></p>        </div>        </div></div>
          </div>
        </div>
            <script>
        setTimeout(function () {
          var naviga_offsetTop = 0;

          function onload_function() {
            naviga_offsetTop = jQuery("#nav_show_top_stop").position().top;
            jQuery(window).bind("scroll", naviga_stay_top);
            jQuery(window).bind("mousewheel", naviga_stay_top);
            jQuery(document).bind("scroll", naviga_stay_top);
            jQuery(document).bind("mousewheel", naviga_stay_top);
          }

          function naviga_stay_top() {

            var scrollTop = jQuery(document).scrollTop();
            if (scrollTop > (naviga_offsetTop + 250)) {
              jQuery("#nav_show_top_stop").css({
                "position": "fixed"
              });
              jQuery("#nav_show_top_stop").css({
                "top": "0px"
              });
            } else {
              jQuery("#nav_show_top_stop").css({
                "position": "fixed"
              });
              jQuery("#nav_show_top_stop").css({
                "top": naviga_offsetTop + 250 - scrollTop + "px"
              });
            }
          }
          jQuery(document).ready(onload_function());
        }, 200);
      </script>
    </div>
          <script>
          setTimeout(function () {
              not_loading = true;
              pageNum = 3;
              oList = jQuery("#album_detail_wrap");
              jQuery(window).scroll(function() {
                  var scrollTop = jQuery(this).scrollTop();
                  var scrollHeight = jQuery(document).height() ;
                  var windowHeight = jQuery(this).height();
                  if (scrollTop + windowHeight >= scrollHeight) {
                      if(not_loading){
                          refreshMore();
                          setTimeout(function(){
                              getMore();
                          },100);
                      }else{
                          jQuery(".dl_more").remove();
                      }
                  }
              });

              function getMore(){
                  not_loading = false;
                  console.log("getMore......");
                  jQuery.ajax({
                      type: 'get',
                      url: "/blog/ajax_get_blog_recommends/2429172",
                      data:{
                          page:pageNum
                      },
                      //async: false,
                      dataType: 'json',
                      success: function (resobj) {
                          var totalNum = resobj.total_pages;
                          if(pageNum <= totalNum && resobj.oHtml != '' ){
                              jQuery(".dl_more").remove();
                              oList.find('ul').append(resobj.oHtml);
                              refreshMore();
                              not_loading = true;
                              pageNum++;
                          }else{
                              not_loading = false;
                              noMore();
                          }
                      },
                      error: function (err) {
                          console.log(err);
                      }
                  });
              }

              function noMore(){
                  jQuery(".dl_more").remove();
                  if(oList.find(".dl_no_more").length ==0){
                      oList.append('<div class="dl_no_more" style="font-size:14px; color:#0F8AC6; text-align:center;padding-top:10px; ">我们是很有底线的</div>');
                  }
              }

              function refreshMore(){
                  if(oList.find(".dl_more").length ==0){
                      oList.append('<div class="dl_more" style="font-size:14px; color:#0F8AC6; text-align:center;padding-top:10px;">上滑加载更多</div>');
                  }
              }
          }, 200);
      </script>
  
    <div id="footer" class="clearfix">
      <!-- <div id="copyright">
        <hr />
        声明：ITeye文章版权属于作者，受法律保护。没有作者书面许可不得转载。若作者同意转载，必须以超链接形式标明文章原始出处和作者。<br />
        &copy; 2003-
        2019 ITeye.com. All rights reserved. [ 京ICP证110151号 京公网安备110105010620 ]
      </div> -->
      <div id="ad_pop">
        <div class="J_adv" data-view="true" data-mod="ad_popu_64" data-mtp="62" data-order="21" data-con="ad_content_2070">
          <script id="popuLayer_js_q" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/popuLayer.js" defer="" type="text/javascript"></script>
          <!-- 广告位：PC端-iteye博客详情右侧弹窗-300*250 -->
          
          
        </div>
      </div>
    </div>
  </div>
  <script type="text/javascript">
  document.write("<img src='https://stat.iteye.com/?url="+ encodeURIComponent(document.location.href) + "&referrer=" + encodeURIComponent(document.referrer) + "&user_id=' width='0' height='0' />");
</script><img src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/saved_resource" width="0" height="0">



   Global site tag (gtag.js) - Google Analytics
  <script async="" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/js"></script>
  <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'UA-127895514-6');
  </script>

  
  
  <link href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/content_toolbar.css" rel="stylesheet">
<script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/jquery-1.11.1.min.js" type="text/javascript"></script>
<script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/publib_footer-1.0.3.js" data-isfootertrack="false" type="text/javascript"></script><link rel="stylesheet" type="text/css" href="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/pub_footer_1.0.3.css">
<script id="csdn-toolbar-id" btnid="header_notice_num" wrapid="note1" count="5" subcount="5" type="text/javascript" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/content_toolbar.js"></script><script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/notify.js"></script><script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/main.js"></script>
<script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/tracking-1.0.1.js" type="text/javascript"></script>
<script language="javascript" type="text/javascript" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/async-1.0.1.js"></script>
<script type="text/javascript" charset="utf-8" src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/track.js"></script>
<style>
  .userinfo {display: none !important;}
  .persion_article h3{
    background: none !important;
    border-bottom: none!important;
    padding: 0!important;
    margin-bottom: 0!important;
    line-height: 1!important;
  }
  .persion_article .right_box{
    margin-top: 0!important;
  }
  .persion_article .footer_box .feed_new_tit span{
    padding-left: 0!important;
  }
</style>
<script>
(function($){
  var windowHeight = $(window).height(),
      contentHeight = $(".hide-main-content").height()
      windowHeight = windowHeight * 1.2 //获得可视区域高度
      if(contentHeight > windowHeight){
        $(".hide-article-box").show()
        $(".hide-main-content").css({'height': windowHeight,'overflow':'hidden'})
        $(".hide-article-box").find("#btn-readmore").click(function(){
          $(this).parents('.hide-main-content').removeAttr('style')
          $(this).parent().hide()
        })
      }
})(jQuery)
</script>
<script type="text/javascript">var $csdn_iteye_jq = jQuery.noConflict();// 解决jq与prototype.js命名空间冲突的问题</script>
  
  
  <script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/web-storage-cache.min.js" type="text/javascript"></script>
  <script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/replace.min.js" type="text/javascript"></script>
  


<script>
  var jQuery = jQuery.noConflict();
  setTimeout(function($){
    window.csdn.fixedSidebar({
        targetBox: $('.persion_article'), //判断到达底部的div,公共footer可选 $('.persion_article'),$('.public_pc_right_footer2018')
        mainBox: $("#main"), //侧边栏旁边的主体div,默认 $("main")
        sidebar: $(".blog-sidebar-fixed"), //侧边栏,默认 $("aside")
        direction: 'right', //侧边栏浮动方向,可选'right','left',
        position: 'fixed',//定位方式
        bottom: 0,
        zIndex: 99,
        sidebarRightMargin: 8,//direction为left,侧边栏距离mainbox的右边距
        sidebarLeftMargin: 37,//direction为right,侧边栏距离mainbox的左边距
    })
  },200,jQuery)
  </script>

<script src="./springBoot+security+mybatis 实现用户权限的数据库动态管理 - Veiking的博客 - ITeye博客_files/c(1).js" async="" defer=""></script></body></html>