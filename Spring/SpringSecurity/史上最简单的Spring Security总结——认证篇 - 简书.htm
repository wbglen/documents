<!DOCTYPE html>
<!-- saved from url=(0038)https://www.jianshu.com/p/24c6a65c3913 -->
<html><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta http-equiv="X-UA-Compatible" content="IE=Edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0,user-scalable=no">

  <!-- Start of Baidu Transcode -->
  <meta http-equiv="Cache-Control" content="no-siteapp">
  <meta http-equiv="Cache-Control" content="no-transform">
  <meta name="applicable-device" content="pc,mobile">
  <meta name="MobileOptimized" content="width">
  <meta name="HandheldFriendly" content="true">
  <meta name="mobile-agent" content="format=html5;url=https://www.jianshu.com/p/24c6a65c3913">
  <!-- End of Baidu Transcode -->

    <meta name="description" content="Spring Security是一款强大的安全认证服务框架，它的原理就是在访问我们的系统前加了一系列的过滤器，可以称为过滤器链。它的两大核心就是认证和授权，本文主要描述的是认证篇，授权篇请看https://www.jianshu.com/p/cba56572fec5。那废话不多说，我用一个例子介绍怎么去用，然后基于源码分析他具体的实现过程。好吧那我们接下来就开始开车吧(新手司机，请坐稳！） ...">

  <meta name="360-site-verification" content="604a14b53c6b871206001285921e81d8">
  <meta property="wb:webmaster" content="294ec9de89e7fadb">
  <meta property="qc:admins" content="104102651453316562112116375">
  <meta property="qc:admins" content="11635613706305617">
  <meta property="qc:admins" content="1163561616621163056375">
  <meta name="google-site-verification" content="cV4-qkUJZR6gmFeajx_UyPe47GW9vY6cnCrYtCHYNh4">
  <meta name="google-site-verification" content="HF7lfF8YEGs1qtCE-kPml8Z469e2RHhGajy6JPVy5XI">
  <meta http-equiv="mobile-agent" content="format=html5; url=https://www.jianshu.com/p/24c6a65c3913">

  <!-- Apple -->
  <meta name="apple-mobile-web-app-title" content="简书">

    <!--  Meta for Smart App Banner -->
  <meta name="apple-itunes-app" content="app-id=888237539, app-argument=jianshu://notes/23978218">
  <!-- End -->

  <!--  Meta for Twitter Card -->
  <meta content="summary" property="twitter:card">
  <meta content="@jianshucom" property="twitter:site">
  <meta content="史上最简单的Spring Security总结——认证篇" property="twitter:title">
  <meta content="Spring Security是一款强大的安全认证服务框架，它的原理就是在访问我们的系统前加了一系列的过滤器，可以称为过滤器链。它的两大核心就是认证和授权，本文主要描述的是认..." property="twitter:description">
  <meta content="https://www.jianshu.com/p/24c6a65c3913" property="twitter:url">
  <!-- End -->

  <!--  Meta for OpenGraph -->
  <meta property="fb:app_id" content="865829053512461">
  <meta property="og:site_name" content="简书">
  <meta property="og:title" content="史上最简单的Spring Security总结——认证篇">
  <meta property="og:type" content="article">
  <meta property="og:url" content="https://www.jianshu.com/p/24c6a65c3913">
  <meta property="og:description" content="Spring Security是一款强大的安全认证服务框架，它的原理就是在访问我们的系统前加了一系列的过滤器，可以称为过滤器链。它的两大核心就是认证和授权，本文主要描述的是认证篇，授权篇请看ht...">
  <!-- End -->

  <!--  Meta for Facebook Applinks -->
  <meta property="al:ios:url" content="jianshu://notes/23978218">
  <meta property="al:ios:app_store_id" content="888237539">
  <meta property="al:ios:app_name" content="简书">

  <meta property="al:android:url" content="jianshu://notes/23978218">
  <meta property="al:android:package" content="com.jianshu.haruki">
  <meta property="al:android:app_name" content="简书">
  <!-- End -->


    <title>史上最简单的Spring Security总结——认证篇 - 简书</title>

  <meta name="csrf-param" content="authenticity_token">
<meta name="csrf-token" content="wyFEg/5oAi/T2KY3VwayHGPQ7XVwRYY4qs+I3VgEZFDMC8BPjrfy8Ibe/pVb3dw11ZN8rWxOUx1AJ1POAdPJsA==">

  <link rel="stylesheet" media="all" href="./史上最简单的Spring Security总结——认证篇 - 简书_files/web-30728a1164102859481d.css">
  
  <link rel="stylesheet" media="all" href="./史上最简单的Spring Security总结——认证篇 - 简书_files/entry-aa75deb505b1b600256a.css">

  <link href="https://cdn2.jianshu.io/assets/favicons/favicon-e743bfb1821442341c3ab15bdbe804f7ad97676bd07a770ccc9483473aa76f06.ico" rel="shortcut icon" type="image/x-icon">
      <link rel="apple-touch-icon-precomposed" href="https://cdn2.jianshu.io/assets/apple-touch-icons/57-a6f1f1ee62ace44f6dc2f6a08575abd3c3b163288881c78dd8d75247682a4b27.png" sizes="57x57">
      <link rel="apple-touch-icon-precomposed" href="https://cdn2.jianshu.io/assets/apple-touch-icons/72-fb9834bcfce738fd7b9c5e31363e79443e09a81a8e931170b58bc815387c1562.png" sizes="72x72">
      <link rel="apple-touch-icon-precomposed" href="https://cdn2.jianshu.io/assets/apple-touch-icons/76-49d88e539ff2489475d603994988d871219141ecaa0b1a7a9a1914f4fe3182d6.png" sizes="76x76">
      <link rel="apple-touch-icon-precomposed" href="https://cdn2.jianshu.io/assets/apple-touch-icons/114-24252fe693524ed3a9d0905e49bff3cbd0228f25a320aa09053c2ebb4955de97.png" sizes="114x114">
      <link rel="apple-touch-icon-precomposed" href="https://cdn2.jianshu.io/assets/apple-touch-icons/120-1bb7371f5e87f93ce780a5f1a05ff1b176828ee0d1d130e768575918a2e05834.png" sizes="120x120">
      <link rel="apple-touch-icon-precomposed" href="https://cdn2.jianshu.io/assets/apple-touch-icons/152-bf209460fc1c17bfd3e2b84c8e758bc11ca3e570fd411c3bbd84149b97453b99.png" sizes="152x152">

  <!-- Start of 访问统计 -->
    <script src="./史上最简单的Spring Security总结——认证篇 - 简书_files/push.js"></script><script src="./史上最简单的Spring Security总结——认证篇 - 简书_files/hm.js"></script><script>
    var _hmt = _hmt || [];
    (function() {
      var hm = document.createElement("script");
      hm.src = "//hm.baidu.com/hm.js?0c0e9d9b1e7d617b3e6842e85b9fb068";
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(hm, s);
    })();
  </script>

  <!-- End of 访问统计 -->
<style type="text/css">@charset "UTF-8";.image-package .image-container{position:relative;z-index:2;background-color:#eee;-webkit-transition:background-color .1s linear;-o-transition:background-color .1s linear;transition:background-color .1s linear;margin:0 auto}body.reader-night-mode .image-package .image-container{background-color:#545454}.image-package .image-container-fill{z-index:1}.image-package .image-container .image-view{position:absolute;top:0;left:0;width:100%;height:100%;overflow:hidden}.image-package .image-container .image-view-error:after{content:"图片获取失败，请点击重试";position:absolute;top:50%;left:50%;width:100%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);color:#888;font-size:14px}.image-package .image-container .image-view img.image-loading{opacity:.3}.image-package .image-container .image-view img{-webkit-transition:all .15s linear;-o-transition:all .15s linear;transition:all .15s linear;z-index:2;opacity:1}</style><style type="text/css">fieldset[disabled] .multiselect {
  pointer-events: none;
}

.multiselect__spinner {
  position: absolute;
  right: 1px;
  top: 1px;
  width: 48px;
  height: 35px;
  background: #fff;
  display: block;
}

.multiselect__spinner:after,
.multiselect__spinner:before {
  position: absolute;
  content: "";
  top: 50%;
  left: 50%;
  margin: -8px 0 0 -8px;
  width: 16px;
  height: 16px;
  border-radius: 100%;
  border-color: #41b883 transparent transparent;
  border-style: solid;
  border-width: 2px;
  box-shadow: 0 0 0 1px transparent;
}

.multiselect__spinner:before {
  animation: a 2.4s cubic-bezier(.41,.26,.2,.62);
  animation-iteration-count: infinite;
}

.multiselect__spinner:after {
  animation: a 2.4s cubic-bezier(.51,.09,.21,.8);
  animation-iteration-count: infinite;
}

.multiselect__loading-enter-active,
.multiselect__loading-leave-active {
  transition: opacity .4s ease-in-out;
  opacity: 1;
}

.multiselect__loading-enter,
.multiselect__loading-leave-active {
  opacity: 0;
}

.multiselect,
.multiselect__input,
.multiselect__single {
  font-family: inherit;
  font-size: 14px;
  -ms-touch-action: manipulation;
  touch-action: manipulation;
}

.multiselect {
  box-sizing: content-box;
  display: block;
  position: relative;
  width: 100%;
  min-height: 40px;
  text-align: left;
  color: #35495e;
}

.multiselect * {
  box-sizing: border-box;
}

.multiselect:focus {
  outline: none;
}

.multiselect--disabled {
  opacity: .6;
}

.multiselect--active {
  z-index: 1;
}

.multiselect--active:not(.multiselect--above) .multiselect__current,
.multiselect--active:not(.multiselect--above) .multiselect__input,
.multiselect--active:not(.multiselect--above) .multiselect__tags {
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}

.multiselect--active .multiselect__select {
  transform: rotate(180deg);
}

.multiselect--above.multiselect--active .multiselect__current,
.multiselect--above.multiselect--active .multiselect__input,
.multiselect--above.multiselect--active .multiselect__tags {
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}

.multiselect__input,
.multiselect__single {
  position: relative;
  display: inline-block;
  min-height: 20px;
  line-height: 20px;
  border: none;
  border-radius: 5px;
  background: #fff;
  padding: 0 0 0 5px;
  width: 100%;
  transition: border .1s ease;
  box-sizing: border-box;
  margin-bottom: 8px;
  vertical-align: top;
}

.multiselect__tag~.multiselect__input,
.multiselect__tag~.multiselect__single {
  width: auto;
}

.multiselect__input:hover,
.multiselect__single:hover {
  border-color: #cfcfcf;
}

.multiselect__input:focus,
.multiselect__single:focus {
  border-color: #a8a8a8;
  outline: none;
}

.multiselect__single {
  padding-left: 6px;
  margin-bottom: 8px;
}

.multiselect__tags-wrap {
  display: inline;
}

.multiselect__tags {
  min-height: 40px;
  display: block;
  padding: 8px 40px 0 8px;
  border-radius: 5px;
  border: 1px solid #e8e8e8;
  background: #fff;
}

.multiselect__tag {
  position: relative;
  display: inline-block;
  padding: 4px 26px 4px 10px;
  border-radius: 5px;
  margin-right: 10px;
  color: #fff;
  line-height: 1;
  background: #41b883;
  margin-bottom: 5px;
  white-space: nowrap;
  overflow: hidden;
  max-width: 100%;
  text-overflow: ellipsis;
}

.multiselect__tag-icon {
  cursor: pointer;
  margin-left: 7px;
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  font-weight: 700;
  font-style: normal;
  width: 22px;
  text-align: center;
  line-height: 22px;
  transition: all .2s ease;
  border-radius: 5px;
}

.multiselect__tag-icon:after {
  content: "\D7";
  color: #266d4d;
  font-size: 14px;
}

.multiselect__tag-icon:focus,
.multiselect__tag-icon:hover {
  background: #369a6e;
}

.multiselect__tag-icon:focus:after,
.multiselect__tag-icon:hover:after {
  color: #fff;
}

.multiselect__current {
  min-height: 40px;
  overflow: hidden;
  padding: 8px 12px 0;
  padding-right: 30px;
  white-space: nowrap;
  border-radius: 5px;
  border: 1px solid #e8e8e8;
}

.multiselect__current,
.multiselect__select {
  line-height: 16px;
  box-sizing: border-box;
  display: block;
  margin: 0;
  text-decoration: none;
  cursor: pointer;
}

.multiselect__select {
  position: absolute;
  width: 40px;
  height: 38px;
  right: 1px;
  top: 1px;
  padding: 4px 8px;
  text-align: center;
  transition: transform .2s ease;
}

.multiselect__select:before {
  position: relative;
  right: 0;
  top: 65%;
  color: #999;
  margin-top: 4px;
  border-style: solid;
  border-width: 5px 5px 0;
  border-color: #999 transparent transparent;
  content: "";
}

.multiselect__placeholder {
  color: #adadad;
  display: inline-block;
  margin-bottom: 10px;
  padding-top: 2px;
}

.multiselect--active .multiselect__placeholder {
  display: none;
}

.multiselect__content-wrapper {
  position: absolute;
  display: block;
  background: #fff;
  width: 100%;
  max-height: 240px;
  overflow: auto;
  border: 1px solid #e8e8e8;
  border-top: none;
  border-bottom-left-radius: 5px;
  border-bottom-right-radius: 5px;
  z-index: 1;
  -webkit-overflow-scrolling: touch;
}

.multiselect__content {
  list-style: none;
  display: inline-block;
  padding: 0;
  margin: 0;
  min-width: 100%;
  vertical-align: top;
}

.multiselect--above .multiselect__content-wrapper {
  bottom: 100%;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
  border-bottom: none;
  border-top: 1px solid #e8e8e8;
}

.multiselect__content::webkit-scrollbar {
  display: none;
}

.multiselect__element {
  display: block;
}

.multiselect__option {
  display: block;
  padding: 12px;
  min-height: 40px;
  line-height: 16px;
  text-decoration: none;
  text-transform: none;
  vertical-align: middle;
  position: relative;
  cursor: pointer;
  white-space: nowrap;
}

.multiselect__option:after {
  top: 0;
  right: 0;
  position: absolute;
  line-height: 40px;
  padding-right: 12px;
  padding-left: 20px;
}

.multiselect__option--highlight {
  background: #41b883;
  outline: none;
  color: #fff;
}

.multiselect__option--highlight:after {
  content: attr(data-select);
  background: #41b883;
  color: #fff;
}

.multiselect__option--selected {
  background: #f3f3f3;
  color: #35495e;
  font-weight: 700;
}

.multiselect__option--selected:after {
  content: attr(data-selected);
  color: silver;
}

.multiselect__option--selected.multiselect__option--highlight {
  background: #ff6a6a;
  color: #fff;
}

.multiselect__option--selected.multiselect__option--highlight:after {
  background: #ff6a6a;
  content: attr(data-deselect);
  color: #fff;
}

.multiselect--disabled {
  background: #ededed;
  pointer-events: none;
}

.multiselect--disabled .multiselect__current,
.multiselect--disabled .multiselect__select,
.multiselect__option--disabled {
  background: #ededed;
  color: #a6a6a6;
}

.multiselect__option--disabled {
  cursor: text;
  pointer-events: none;
}

.multiselect__option--disabled.multiselect__option--highlight {
  background: #dedede!important;
}

.multiselect-enter-active,
.multiselect-leave-active {
  transition: all .15s ease;
}

.multiselect-enter,
.multiselect-leave-active {
  opacity: 0;
}

.multiselect__strong {
  margin-bottom: 8px;
  line-height: 20px;
  display: inline-block;
  vertical-align: top;
}

[dir=rtl] .multiselect {
  text-align: right;
}

[dir=rtl] .multiselect__select {
  right: auto;
  left: 1px;
}

[dir=rtl] .multiselect__tags {
  padding: 8px 8px 0 40px;
}

[dir=rtl] .multiselect__content {
  text-align: right;
}

[dir=rtl] .multiselect__option:after {
  right: auto;
  left: 0;
}

[dir=rtl] .multiselect__clear {
  right: auto;
  left: 12px;
}

[dir=rtl] .multiselect__spinner {
  right: auto;
  left: 1px;
}

@keyframes a {
  0% {
    transform: rotate(0);
  }

  to {
    transform: rotate(2turn);
  }
}</style><style type="text/css">
#free-reward-panel .reward-users-modal main {
  padding: 0;
}
</style><style type="text/css">
@charset "UTF-8";
/*
 * 变量
*/
.reward-note-modal .v-modal {
  width: 620px;
  text-align: center;
}
.reward-note-modal .v-modal form {
    margin: 0 auto 25px auto;
    padding: 0 40px;
}
.reward-note-modal .v-modal .reward-intro {
    margin-top: 20px;
    margin-bottom: 20px;
    font-size: 16px;
}
.reward-note-modal .v-modal .reward-intro .avatar {
      cursor: default !important;
      width: 36px;
      height: 36px;
      margin-right: 10px;
      display: inline-block;
}
.reward-note-modal .v-modal .reward-intro .intro {
      margin-right: 5px;
      font-weight: bold;
      vertical-align: middle;
}
.reward-note-modal .v-modal .reward-intro i {
      color: #EA6F5A;
      vertical-align: middle;
}
.reward-note-modal .v-modal .main-inputs {
    margin: 25px 0;
}
.reward-note-modal .v-modal .main-inputs .amount-group {
      margin: 0 -5px;
}
.reward-note-modal .v-modal .main-inputs .amount-group input {
        display: none;
}
.reward-note-modal .v-modal .main-inputs .amount-group input:checked + .option {
        color: #EA6F5A;
        border-color: #EA6F5A;
}
.reward-note-modal .v-modal .main-inputs .amount-group .custom-amount:checked + .option .custom-text {
        opacity: 0;
}
.reward-note-modal .v-modal .main-inputs .amount-group .custom-amount:checked + .option .custom-amount-input {
        opacity: 1;
}
.reward-note-modal .v-modal .main-inputs .amount-group .option {
        position: relative;
        margin: 0 5px 15px;
        width: 156px;
        height: 56px;
        line-height: 54px;
        border: 1px solid #E6E6E6;
        border-radius: 4px;
        font-weight: normal;
        color: #999999;
        cursor: pointer;
}
.reward-note-modal .v-modal .main-inputs .amount-group .option i {
          font-size: 16px;
          vertical-align: middle;
}
.reward-note-modal .v-modal .main-inputs .amount-group .option .amount {
          font-size: 28px;
          vertical-align: middle;
}
.reward-note-modal .v-modal .main-inputs .amount-group .option .piece {
          font-size: 13px;
          vertical-align: sub;
}
.reward-note-modal .v-modal .main-inputs .amount-group .option .custom-amount-input {
          position: absolute;
          top: 0;
          z-index: -1;
          width: 100%;
          opacity: 0;
}
.reward-note-modal .v-modal .main-inputs .amount-group .option .custom-amount-input i {
            position: absolute;
            top: 0;
            left: 10px;
}
.reward-note-modal .v-modal .main-inputs .amount-group .option .custom-amount-input .piece {
            position: absolute;
            top: 4px;
            right: 10px;
}
.reward-note-modal .v-modal .main-inputs .amount-group .option .custom-amount-input input {
            display: block;
            margin: 0 auto;
            width: 80px;
            height: 54px;
            line-height: 54px;
            border: none;
            font-size: 28px;
            text-align: center;
            background: transparent;
            -moz-appearance: textfield;
}
.reward-note-modal .v-modal .main-inputs .amount-group .option .custom-amount-input input::-webkit-outer-spin-button, .reward-note-modal .v-modal .main-inputs .amount-group .option .custom-amount-input input::-webkit-inner-spin-button {
              -webkit-appearance: none !important;
}
.reward-note-modal .v-modal .main-inputs .message {
      padding: 15px 20px;
      margin-bottom: 0;
      font-size: 14px;
      border: 1px solid #E6E6E6;
      color: #333333;
      border-radius: 4px;
      background-color: rgba(180, 180, 180, 0.1);
}
.reward-note-modal .v-modal .main-inputs .message textarea {
        width: 100%;
        height: 44px;
        padding: 0;
        margin: 0;
        resize: none;
        background: none !important;
        border: none !important;
        -webkit-box-sizing: border-box;
                box-sizing: border-box;
        -webkit-box-shadow: none;
                box-shadow: none;
}
.reward-note-modal .v-modal .main-inputs .message textarea:focus {
          outline: none;
}
.reward-note-modal .v-modal .reward-info .amount {
    font-size: 28px;
    font-weight: bold;
    color: #EA6F5A;
}
.reward-note-modal .v-modal .reward-info .pay-method {
    font-size: 14px;
}
.reward-note-modal .v-modal .reward-info .pay-method a {
      color: #3194D0;
}
.reward-note-modal .v-modal .choose-pay {
    margin: 0 -5px;
}
.reward-note-modal .v-modal .choose-pay input {
      display: none;
}
.reward-note-modal .v-modal .choose-pay input:checked + .option {
      color: #EA6F5A;
      border-color: #EA6F5A;
}
.reward-note-modal .v-modal .choose-pay .option {
      margin: 20px 5px 10px;
      width: 156px;
      height: 56px;
      line-height: 54px;
      text-align: center;
      border: 1px solid #E6E6E6;
      border-radius: 4px;
      cursor: pointer;
}
.reward-note-modal .v-modal .choose-pay .option img {
        height: 30px;
}
.reward-note-modal .v-modal .choose-pay .option img.day.alipay, .reward-note-modal .v-modal .choose-pay .option img.night.alipay {
        min-width: 85px;
}
.reward-note-modal .v-modal .choose-pay .option img.day.wechat, .reward-note-modal .v-modal .choose-pay .option img.night.wechat {
        min-width: 112px;
}
.reward-note-modal .v-modal .choose-pay .option img.night {
        display: none;
}
body.reader-night-mode .reward-note-modal .v-modal .choose-pay .option img.night {
        display: inline-block;
}
body.reader-night-mode .reward-note-modal .v-modal .choose-pay .option img.day {
        display: none;
}
.reward-note-modal .v-modal .choose-pay .tooltip {
      width: 230px;
}
.reward-note-modal .v-modal .modal-footer {
    padding: 0 15px 20px;
    border: none;
    background-color: transparent;
    text-align: center;
}
.reward-note-modal .v-modal .modal-footer .btn {
      padding: 8px 45px;
      font-size: 24px;
}
.reward-note-modal .v-modal .btn-pay {
    padding: 8px 25px;
    font-size: 16px;
    color: #ffffff;
    background-color: #F5A623;
}
.weixin-pay, .success-pay {
  text-align: center;
}
.weixin-pay .v-modal, .success-pay .v-modal {
    width: 350px;
}
.weixin-pay .ic-successed, .success-pay .ic-successed {
    font-size: 60px;
    color: #3db922;
}
.weixin-pay h2, .weixin-pay h3, .success-pay h2, .success-pay h3 {
    margin-bottom: 20px;
    color: #333333;
}
.weixin-pay h2, .success-pay h2 {
    margin: 0 0 40px 0;
    font-size: 24px;
}
.weixin-pay .bind-text, .success-pay .bind-text {
    position: relative;
    margin-bottom: 30px;
    font-size: 14px;
    color: #999999;
}
.weixin-pay .bind-text:before, .weixin-pay .bind-text:after, .success-pay .bind-text:before, .success-pay .bind-text:after {
      content: "";
      border-top: 1px solid #999;
      display: block;
      position: absolute;
      width: 40px;
      top: 8px;
}
.weixin-pay .bind-text:before, .success-pay .bind-text:before {
      left: 30px;
}
.weixin-pay .bind-text:after, .success-pay .bind-text:after {
      right: 30px;
}
.weixin-pay .share-bind, .success-pay .share-bind {
    display: block;
    margin-bottom: 30px;
}
.weixin-pay .share-bind i, .success-pay .share-bind i {
      margin-right: 4px;
      font-size: 22px;
      vertical-align: middle;
}
.weixin-pay .share-bind.wechat i, .success-pay .share-bind.wechat i {
      color: #00BB29;
}
.weixin-pay .share-bind.weibo i, .success-pay .share-bind.weibo i {
      color: #E05244;
}
.weixin-pay .wx-qr-code, .success-pay .wx-qr-code {
    display: inline-block;
}
.weixin-pay .wx-qr-code img, .success-pay .wx-qr-code img {
      margin: 0 auto;
      padding: 10px;
      width: 200px;
      background-color: #ffffff;
}
.weixin-pay .pay-amount, .success-pay .pay-amount {
    margin: 20px 0;
    color: #787878;
}
.weixin-pay .pay-amount span, .success-pay .pay-amount span {
      color: #F5A623;
}
</style><style type="text/css">
@charset "UTF-8";
/*
 * 变量
*/
.v-modal-wrap {
  position: fixed;
  left: 0;
  top: 0;
  right: 0;
  bottom: 0;
  z-index: 9999;
  background-color: transparent;
}
.v-modal-wrap.modal-leave-active {
    -webkit-transition: opacity 0.3s;
    -o-transition: opacity 0.3s;
    transition: opacity 0.3s;
}
.v-modal-wrap.modal-enter-active .v-modal-mask, .v-modal-wrap.modal-leave-active .v-modal-mask {
    opacity: 0;
}
.v-modal-wrap.modal-enter-active .v-modal, .v-modal-wrap.modal-leave-active .v-modal {
    -webkit-transform: translate(-50%, -70%);
        -ms-transform: translate(-50%, -70%);
            transform: translate(-50%, -70%);
    opacity: 0;
}
.v-modal-wrap .v-modal-mask {
    background-color: rgba(255, 255, 255, 0.7);
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    -webkit-transition: opacity 0.3s;
    -o-transition: opacity 0.3s;
    transition: opacity 0.3s;
    opacity: 1;
}
.v-modal-wrap .v-modal {
    position: absolute;
    left: 50%;
    top: 50%;
    -webkit-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
    border-radius: 6px;
    border: 1px solid rgba(0, 0, 0, 0.1);
    background-color: #fff;
    -webkit-box-shadow: 0 5px 25px rgba(0, 0, 0, 0.1);
            box-shadow: 0 5px 25px rgba(0, 0, 0, 0.1);
    -webkit-transition: opacity 0.3s, -webkit-transform 0.3s;
    transition: opacity 0.3s, -webkit-transform 0.3s;
    -o-transition: opacity 0.3s, transform 0.3s;
    transition: opacity 0.3s, transform 0.3s;
    transition: opacity 0.3s, transform 0.3s, -webkit-transform 0.3s;
    opacity: 1;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
    -webkit-flex-direction: column;
        -ms-flex-direction: column;
            flex-direction: column;
    overflow: hidden;
}
.v-modal-wrap .v-modal > header:before, .v-modal-wrap .v-modal > header:after, .v-modal-wrap .v-modal > main:before, .v-modal-wrap .v-modal > main:after, .v-modal-wrap .v-modal > footer:before, .v-modal-wrap .v-modal > footer:after {
      content: '';
      clear: both;
      display: table;
}
.v-modal-wrap .v-modal > header {
      padding: 20px;
      border-bottom: 1px solid #F0F0F0;
}
.v-modal-wrap .v-modal > header h4 {
        margin: 0;
        color: #333;
        text-align: left;
}
.v-modal-wrap .v-modal .close {
      position: absolute;
      right: 16px;
      top: 20px;
      font-size: 26px;
      line-height: 20px;
      color: rgba(0, 0, 0, 0.8);
}
.v-modal-wrap .v-modal .close:hover {
        color: #000000;
}
.v-modal-wrap .v-modal > main {
      padding: 20px 20px 20px 20px;
      font-size: 15px;
      color: #333;
      -webkit-box-flex: 1;
      -webkit-flex-grow: 1;
          -ms-flex-positive: 1;
              flex-grow: 1;
      overflow-x: hidden;
      overflow-y: auto;
}
.v-modal-wrap .v-modal > footer {
      padding: 20px;
      background-color: #fff;
}
.v-modal-wrap .v-modal > footer button {
        padding: 0;
        margin: 0;
        background-color: transparent;
        border: 0;
        float: right;
}
.v-modal-wrap .v-modal > footer button:focus {
          outline: 0;
}
.v-modal-wrap .v-modal > footer .submit {
        padding: 4px 12px;
        border: 1px solid;
        border-radius: 20px;
}
.v-modal-wrap .v-modal > footer .cancel {
        margin-top: 5px;
}
.v-modal-wrap .v-modal > footer .cancel:hover {
          color: #333333;
}
.reader-night-mode .v-modal-wrap .v-modal-mask {
  background-color: rgba(63, 63, 63, 0.7);
}
.reader-night-mode .v-modal-wrap .v-modal {
  background-color: #3f3f3f;
}
.reader-night-mode .v-modal-wrap .v-modal header {
    border-color: #2F2F2F;
}
.reader-night-mode .v-modal-wrap .v-modal header h4 {
      color: #C8C8C8;
}
.reader-night-mode .v-modal-wrap .v-modal .close {
    color: #C8C8C8;
}
.reader-night-mode .v-modal-wrap .v-modal .close:hover {
      color: #ffffff;
}
.reader-night-mode .v-modal-wrap .v-modal main {
    color: #C8C8C8;
}
.reader-night-mode .v-modal-wrap .v-modal footer {
    background-color: #3f3f3f;
}
.reader-night-mode .v-modal-wrap .v-modal footer .cancel:hover {
      color: #C8C8C8;
}
</style><style type="text/css">
.nqzzJ71pC-jOnJKAfdtr6_0 {
  float: right;
  height: 55px;
  padding: 15px 0px;
  margin: 0 12px;
}
._3tScN0zmSdGLaUAH4SxTbM_0 {
    width: 100%;
    height: 100%;
}
.nqzzJ71pC-jOnJKAfdtr6_0 ._3f806byixOPpOPWnx8HiQP_0 {
    height: 25px;
}
.nqzzJ71pC-jOnJKAfdtr6_0 ._2MIQ6sBppQZAKea91We0qf_0 {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    width: 100%;
    height: 100%;
    background-color: #000;
    opacity: 0.6;
    z-index: 1000;
}
.nqzzJ71pC-jOnJKAfdtr6_0 ._1RppgOJ_CQiXgzd3ke-sbJ_0 {
    position: fixed;
    left: -webkit-calc( 50% - 190px);
    left: calc( 50% - 190px);
    top: -webkit-calc( 50% - 300px);
    top: calc( 50% - 300px);
    width: 380px;
    height: 425px;
    background-color: #fff;
    padding: 40px 72px 0;
    -webkit-box-align: center;
    -webkit-align-items: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-box-pack: center;
    -webkit-justify-content: center;
        -ms-flex-pack: center;
            justify-content: center;
    z-index: 1000;
    text-align: center;
}
body.reader-night-mode .nqzzJ71pC-jOnJKAfdtr6_0 ._1RppgOJ_CQiXgzd3ke-sbJ_0 {
      background-color: #3f3f3f;
      color: #c8c8c8;
}
.nqzzJ71pC-jOnJKAfdtr6_0 ._1RppgOJ_CQiXgzd3ke-sbJ_0 h4 {
      margin: 0;
      line-height: 25px;
}
.nqzzJ71pC-jOnJKAfdtr6_0 ._1RppgOJ_CQiXgzd3ke-sbJ_0 h4 span {
        color: #e9634c;
}
.nqzzJ71pC-jOnJKAfdtr6_0 ._1RppgOJ_CQiXgzd3ke-sbJ_0 img {
      width: 190px;
      height: 190px;
      margin: 12px 0 8px 0;
}
.nqzzJ71pC-jOnJKAfdtr6_0 ._1RppgOJ_CQiXgzd3ke-sbJ_0 p {
      font-size: 14px;
      line-height: 20px;
      margin: 0;
}
.nqzzJ71pC-jOnJKAfdtr6_0 ._1RppgOJ_CQiXgzd3ke-sbJ_0 ._2WUz9DZJO5DIC_O5sD1kac_0 {
      background-color: #e9634c;
      color: #fff;
      margin: 25px auto 0;
      width: 190px;
      height: 40px;
      border-radius: 20px;
      line-height: 40px;
      font-size: 14px;
      cursor: pointer;
      -webkit-user-select: none;
         -moz-user-select: none;
          -ms-user-select: none;
              user-select: none;
}
</style><style type="text/css">
@charset "UTF-8";
/*
 * 变量
*/
.youdao-fixed-ad {
  display: block;
  position: relative;
  width: 180px;
  height: 180px;
  border: 1px solid #e8eae9;
}
.youdao-fixed-ad .img {
    display: block;
    width: 100%;
    height: 100%;
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
}
.youdao-fixed-ad .ad-badge {
    position: absolute;
    bottom: 0;
    right: 0;
    display: block;
    font-size: 12px;
    padding: 2px 5px 0 6px;
    background-color: rgba(0, 0, 0, 0.5);
    color: #fff;
    cursor: pointer;
}
.qingteng-ads {
  border: 1px solid #e8e8e8;
  width: 180px;
}
</style><style type="text/css">
.yuxi-fixed-ad {
  position: relative;
  width: 180px;
  height: 180px;
}
.yuxi-fixed-ad .img {
    display: block;
    width: 100%;
    height: 100%;
    background-repeat: no-repeat;
    background-position: center;
    background-size: cover;
    background-image: url(//cdn2.jianshu.io/assets/web/yuxi-ads-d73b364baf42dfeca32d518c819a0136.jpg);
}
.yuxi-fixed-ad .ad-badge {
    position: absolute;
    bottom: 0;
    right: 0;
    display: block;
    font-size: 12px;
    padding: 2px 5px 0 6px;
    background-color: rgba(0, 0, 0, 0.5);
    color: #fff;
    cursor: pointer;
}
</style><style type="text/css">
@charset "UTF-8";
/*
 * 变量
*/
.like[data-v-6ddd02c6] {
  display: inline-block;
}
.like .like-group[data-v-6ddd02c6] {
    position: relative;
    padding: 13px 0 15px 0;
    font-size: 0;
    border: 1px solid #EA6F5A;
    border-radius: 40px;
}
.like .like-group[data-v-6ddd02c6]:hover {
      background-color: rgba(236, 97, 73, 0.05);
}
.like .like-group .btn-like[data-v-6ddd02c6] {
      display: inline-block;
      font-size: 19px;
}
.like .like-group .btn-like[data-v-6ddd02c6]:before {
        content: '';
        position: absolute;
        left: 12px;
        top: 2px;
        width: 50px;
        height: 50px;
        background-image: url(//cdn2.jianshu.io/assets/web/like_animation_steps-62a00a7b52377d3069927cdb8e61fd34.png);
        background-position: left;
        background-repeat: no-repeat;
        background-size: 1000px 50px;
}
.like .like-group .btn-like a[data-v-6ddd02c6] {
        position: relative;
        padding: 18px 30px 18px 55px;
        color: #EA6F5A;
}
.like .like-group .modal-wrap[data-v-6ddd02c6] {
      font-size: 18px;
      border-left: 1px solid rgba(236, 97, 73, 0.4);
      display: inline-block;
      margin-left: -15px;
}
.like .like-group .modal-wrap a[data-v-6ddd02c6] {
        color: #EA6F5A;
        padding: 18px 26px 18px 18px;
}
.like .like-group.like-animation[data-v-6ddd02c6], .like .like-group.active[data-v-6ddd02c6] {
      background-color: #EA6F5A;
}
.like .like-group.like-animation .btn-like a[data-v-6ddd02c6], .like .like-group.active .btn-like a[data-v-6ddd02c6] {
        color: white;
}
.like .like-group.like-animation .modal-wrap[data-v-6ddd02c6], .like .like-group.active .modal-wrap[data-v-6ddd02c6] {
        border-left: 1px solid white;
}
.like .like-group.like-animation .modal-wrap a[data-v-6ddd02c6], .like .like-group.active .modal-wrap a[data-v-6ddd02c6] {
          color: white;
}
.like .like-group.like-animation .btn-like[data-v-6ddd02c6]:before {
      -webkit-animation: likeBlast-data-v-6ddd02c6 0.6s 1 steps(19);
              animation: likeBlast-data-v-6ddd02c6 0.6s 1 steps(19);
      background-position: right;
}
@-webkit-keyframes likeBlast {
0% {
    background-position: left;
}
100% {
    background-position: right;
}
}
@keyframes likeBlast-data-v-6ddd02c6 {
0% {
    background-position: left;
}
100% {
    background-position: right;
}
}
.like .like-group.active .btn-like[data-v-6ddd02c6]:before {
      background-position: right;
}
</style><style type="text/css">
@charset "UTF-8";
/*
 * 变量
*/
.main {
  position: relative;
  margin: 0 auto;
  padding: 0 0 30px 0;
  width: 620px;
}
.main .title {
    padding-left: 8px;
    border-left: 3px solid #EA6F5A;
    line-height: 1;
    font-size: 15px;
}
.main .collection-settings {
    position: absolute;
    top: 2px;
    right: 0;
    font-size: 13px;
    color: #A0A0A0;
}
.main .collection-settings span {
      padding-left: 4px;
}
.main .include-collection {
    width: 100%;
    padding-top: 20px;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    -webkit-flex-direction: row;
        -ms-flex-direction: row;
            flex-direction: row;
    -webkit-box-pack: start;
    -webkit-justify-content: flex-start;
        -ms-flex-pack: start;
            justify-content: flex-start;
    -webkit-box-align: center;
    -webkit-align-items: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
            flex-wrap: wrap;
}
.main .include-collection .item {
      display: inline-block;
      margin: 0 12px 12px 0;
      min-height: 32px;
      background-color: white;
      border: 1px solid #DCDCDC;
      border-radius: 4px;
      vertical-align: top;
      overflow: hidden;
}
.main .include-collection .item img {
        width: 32px;
        height: 32px;
}
.main .include-collection .item .name {
        display: inline-block;
        padding: 0 10px;
        font-size: 14px;
}
.main .include-collection .add-collection-wrap {
      margin: 0 12px 12px 0;
}
.main .include-collection .add-collection {
      padding: 8px 12px;
      font-size: 14px;
      border: 1px solid #DCDCDC;
      border-radius: 4px;
}
.main .include-collection .add-collection i {
        margin-right: 4px;
        color: #969696;
}
.main .recommend-note a {
    position: relative;
    margin: 20px 2px 0 0;
    width: 200px;
    height: 160px;
    display: inline-block;
}
.main .recommend-note a:after {
      content: "";
      position: absolute;
      width: 200px;
      height: 160px;
      border-radius: 0 0 4px 4px;
      -webkit-box-shadow: inset 0px -80px 50px -22px rgba(0, 0, 0, 0.6);
              box-shadow: inset 0px -80px 50px -22px rgba(0, 0, 0, 0.6);
      top: 0;
      left: 0;
      z-index: 1;
}
.main .recommend-note .name {
    position: absolute;
    bottom: 40px;
    left: 10px;
    right: 10px;
    font-size: 17px;
    font-weight: bold;
    color: #ffffff;
    z-index: 2;
}
.main .recommend-note .author {
    position: absolute;
    bottom: 10px;
    left: 10px;
    right: 10px;
    z-index: 2;
}
.main .recommend-note .avatar {
    width: 20px;
    height: 20px;
    display: inline-block;
}
.main .recommend-note .avatar img {
      border-radius: 50%;
}
.main .recommend-note .author-name {
    font-size: 12px;
    color: #ffffff;
    display: inline-block;
    vertical-align: -1px;
}
.main .show-more {
    margin: 0 12px 12px 0;
    font-size: 14px;
    color: #A0A0A0;
}
</style><style type="text/css">
#featured-comment-list {
  margin-top: 30px;
  margin-bottom: -15px;
}
</style><style type="text/css">
@charset "UTF-8";
/*
 * 变量
*/
.pc-bind-phone-modal .modal-content, .pc-bind-phone-modal .modal-body {
  overflow: visible;
}
.pc-bind-phone-modal .modal-body {
  padding-top: 14px;
}
.pc-bind-phone-modal .dropdown-menu {
  max-height: 300px;
  overflow: auto;
}
.pc-bind-phone-modal .dropdown-menu .tag {
    background-color: #efefef;
    color: #4A4A4A;
    height: 28px;
    line-height: 28px;
    padding-left: 25px;
    font-size: 12px;
}
.pc-bind-phone-modal .tips {
  color: #999999;
  font-size: 13px;
  font-weight: 500;
  line-height: 18px;
  margin-bottom: 14px;
}
.pc-bind-phone-modal .tips a {
    color: #3194D0;
}
.reader-night-mode .pc-bind-phone-modal .dropdown-menu .tag {
  background-color: #2F2F2F;
  color: #999999;
}
</style><style type="text/css">
@charset "UTF-8";
/*
 * 变量
*/
.recommend-note {
  margin-bottom: 20px;
}
.recommend-note .meta, .recommend-note .list {
    width: 620px;
    margin: 0 auto;
}
.recommend-note .meta .title {
    padding-left: 8px;
    border-left: 3px solid #EA6F5A;
    line-height: 1;
    font-size: 15px;
}
.recommend-note .meta .title .more {
      float: right;
      font-size: 14px;
      color: #A0A0A0;
}
.recommend-note .list {
    margin-top: 20px;
}
.recommend-note .list .note {
      display: block;
      margin-bottom: 25px;
      padding: 0 0 25px 0;
      border-bottom: 1px solid #DDDDDD;
}
.recommend-note .list .note.have-img {
        min-height: 136px;
}
.recommend-note .list .note.have-img.no-user .description {
          -webkit-line-clamp: 3;
}
.recommend-note .list .note .cover {
        float: right;
        margin: -5px 0 0 15px;
        width: 150px;
        height: 120px;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        border-radius: 6px;
}
.recommend-note .list .note .title {
        display: inherit;
        margin-bottom: 4px;
        font-size: 18px;
        line-height: 27px;
        font-weight: bold;
        color: #333333;
        overflow: hidden;
        -o-text-overflow: ellipsis;
           text-overflow: ellipsis;
        white-space: nowrap;
}
.recommend-note .list .note .title:hover {
          text-decoration: underline;
}
.recommend-note .list .note .title:visited {
          color: #999999;
}
.recommend-note .list .note .description {
        margin-bottom: 12px;
        font-size: 13px;
        line-height: 23px;
        color: #333333;
        overflow: hidden;
        -o-text-overflow: ellipsis;
           text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
}
.recommend-note .list .note .author .avatar {
        display: inline-block;
        width: 24px;
        height: 24px;
        margin-right: 3px;
        border-radius: 50%;
        background-position: center;
        background-repeat: no-repeat;
        background-size: cover;
        vertical-align: middle;
}
.recommend-note .list .note .author .name {
        font-size: 13px;
        color: #333333;
        vertical-align: middle;
}
</style><style type="text/css">
@charset "UTF-8";
/*
 * 变量
*/
.youdao-recommended-ad {
  position: relative;
  display: block;
}
.youdao-recommended-ad .img {
    display: block;
    float: right;
    width: 150px;
    height: 120px;
    background-position: center;
    background-repeat: no-repeat;
    background-size: cover;
    background-color: RGB(241, 243, 244);
    border-radius: 6px;
    margin: -5px 0 0 15px;
}
body.reader-night-mode .youdao-recommended-ad .img {
      background-color: #4f4f4f;
}
.youdao-recommended-ad .info {
    overflow: hidden;
}
.youdao-recommended-ad .info .title {
      display: block;
      color: #333;
      line-height: 27px;
      font-size: 18px;
      font-weight: 700;
      margin-top: -4px;
      cursor: pointer;
}
body.reader-night-mode .youdao-recommended-ad .info .title {
        color: #969696;
}
.youdao-recommended-ad .info .intro {
      display: block;
      font-size: 13px;
      color: #999;
      overflow: hidden;
      -o-text-overflow: ellipsis;
         text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      line-height: 24px;
      max-height: 48px;
      -webkit-box-sizing: content-box;
              box-sizing: content-box;
      white-space: normal;
}
.youdao-recommended-ad .info .ad-badge {
      position: absolute;
      left: 0;
      top: 95px;
      display: block;
      width: 38px;
      height: 18px;
      line-height: 16px;
      text-align: center;
      border-radius: 2px;
      border: solid 1px #999999;
      color: #999999;
      font-size: 12px;
}
</style></head>

  <!-- 只给10%的用户添加代码 -->
  <!-- ###第四范式-智能推荐：代码直接复制 无需修改参数### -->
  <!-- ###功能：上报内容并反馈用户行为### -->
  <!--
  -->
  <body lang="zh-CN" class="reader-black-font">
    <!-- 全局顶部导航栏 -->
<nav class="navbar navbar-default navbar-fixed-top" role="navigation">
  <div class="width-limit">
    <!-- 左上方 Logo -->
    <a class="logo" href="https://www.jianshu.com/"><img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/nav-logo-4c7bbafe27adc892f3046e6978459bac.png" alt="Nav logo"></a>

    <!-- 右上角 -->
      <!-- 未登录显示登录/注册/写文章 -->
      <a class="btn write-btn" target="_blank" href="https://www.jianshu.com/writer#/">
        <i class="iconfont ic-write"></i>写文章
</a>      <a class="btn sign-up" id="sign_up" href="https://www.jianshu.com/sign_up">注册</a>
      <a class="btn log-in" id="sign_in" href="https://www.jianshu.com/sign_in">登录</a>

    <!-- 如果用户登录，显示下拉菜单 -->

    <div class="nqzzJ71pC-jOnJKAfdtr6_0"><a class="_3tScN0zmSdGLaUAH4SxTbM_0"><img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/nav_jsds_beta-eeb44d165b8ba37680fdb7e65ae17ae4.png" class="_3f806byixOPpOPWnx8HiQP_0"></a> <!----></div>

    <div class="style-mode"><a class="style-mode-btn"><i class="iconfont ic-navigation-mode"></i></a> <div class="popover-modal" style="left: 0px; display: none;"><div class="meta"><i class="iconfont ic-navigation-night"></i><span>夜间模式</span></div> <div class="switch day-night-group"><a class="switch-btn">开</a> <a class="switch-btn active">关</a></div> <hr> <div class="switch font-family-group"><a class="switch-btn font-song">宋体</a> <a class="switch-btn font-hei active">黑体</a></div> <div class="switch"><a class="switch-btn active">简</a> <a class="switch-btn">繁</a></div></div></div>
    <div class="container">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#menu" aria-expanded="false">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
      </div>
      <div class="collapse navbar-collapse" id="menu">
        <ul class="nav navbar-nav">
            <li class="tab ">
              <a href="https://www.jianshu.com/">
                <span class="menu-text">首页</span><i class="iconfont ic-navigation-discover menu-icon"></i>
</a>            </li>
            <li class="tab ">
              <a id="web-nav-app-download-btn" class="app-download-btn" href="https://www.jianshu.com/apps?utm_medium=desktop&amp;utm_source=navbar-apps"><span class="menu-text">下载App</span><i class="iconfont ic-navigation-download menu-icon"></i></a>
            </li>
          <li class="search">
            <form target="_blank" action="https://www.jianshu.com/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="✓">
              <input type="text" name="q" id="q" value="" autocomplete="off" placeholder="搜索" class="search-input">
              <a class="search-btn" href="javascript:void(null)"><i class="iconfont ic-search"></i></a>
</form>          </li>
        </ul>
      </div>
    </div>
  </div>
</nav>

    
<div class="note">
  <div id="note-fixed-ad-container">
    <div id="fixed-ad-container">
      <div style="display: block;"><a target="_blank" href="https://www.jianshu.com/apps/redirect?utm_source=side-banner-click" id="web-note-ad-fixed"><span class="close">×</span></a></div>
      <div><a href="https://dsp-click.youdao.com/clk/request.s?slot=30edd91dd8637d9f645baa8448ba90b3&amp;k=Ng5n%2F0MpRN%2FMw4EhW1wJe2ltvThxtkZEBFoPG21YvcbXxo%2BoRxcJpjjAgKuViCqvIxCHqA9N%2F2c%2F9Be%2FcwcSr6Q7aPgq%2FKJGJHUxf6FBqPeDdBY%2F%2FLyINAjGjK7ShTfVNT5F1F%2B0qmByPmg3QxSgG2z5e2EPyQPIKkBx5NOacn4FeGRyUzC2c0O28sEmaM8CdQ6xzCHA6LbCjhJesRfNbrBB%2B%2FsQXwKVl54XVE7fdVcrYeYhn6D7pat9vXoe89QSSfw8EzOdbocVm1S%2Bs9X8PXUOh6RyqG6Eek4VgNfkGmuGpGUWhROEByf9m5%2FBhkb7CqZIfzsZdBqI78r8u1xr21NSiu7R%2FGglmFCjKZ7g3fNzMVAcyTI0%2Bz04ZLMQNvVBZKBmfGCn2JFyK93kk937FOINVUwWpRpDsODv18hxF43iBJmsDPjrhfSXfG84YQ9sAOw4iMr29gGpEb0yOTHq%2FuSdrOLT8251auBICLMft21%2FhFREZ%2B98XaOhtUIEI0RZJyP54jW41%2F%2Bc3Uo6Ql%2Bo6W9Dyijjx%2B%2BJAu6blxCFWVYR7GQNJjVMQLRpcapb0oUWcbMg1UXNontcAYlXhwrOfJUPOFURd0LeSU5YguCApmTMuHN2yKCHmDuAcBwi3cUFGhvhBqybKwH6plhpia%2BVBXhUe22vRbdQ8Nze9htcVfPmMxO%2BHOKATbqqA0YNGVZHBGt0h3e5McsF5Ie4R4G%2FjNQvGg8Tk4NxfGeRWwH57VnJVjSvwGXIwKgh%2BSmn2IeMsvpqPdnNuKcCbrQ1Hz64QfOBYak7a0rk4lp8x4zWlEfvG63Lzl7OYQeoQ%2BUI6tSlIh1snwUpPG0GWKd5AuFQkQCYurSePcOb603O5fNrq78mVFIyqnYCHrw7mQfrLQn%2Ft5eKe3S7fNKKbH4ksyqIc9fGj6hHFwmmOMCAq5WIKq%2FXxo%2BoRxcJpjjAgKuViCqv18aPqEcXCaY4wICrlYgqryVr%2F0zpTNCixYX89DRM89c%3D&amp;isrd=1&amp;youdao_bid=e189fff6-bec2-4af7-9f9b-0b656ef7f236&amp;iid=%7B%22-2383745018770780680%22%3A4%7D&amp;sid=17024" target="_blank" class="youdao-fixed-ad"><div class="img" style="background-image: url(&quot;https://oimageb1.ydstatic.com/image?id=-2383745018770780680&amp;product=adpublish&amp;w=360&amp;h=360&amp;sc=0&amp;rm=2&amp;gsb=0&amp;gsbd=60&quot;);"></div> <span class="ad-badge">广告</span></a> <!----></div>
      <a href="http://e.cn.miaozhen.com/r/k=2110413&amp;p=7L9Gn&amp;dx=__IPDX__&amp;rt=2&amp;ns=__IP__&amp;ni=__IESID__&amp;v=__LOC__&amp;xa=__ADPLATFORM__&amp;tr=__REQUESTID__&amp;mo=__OS__&amp;m0=__OPENUDID__&amp;m0a=__DUID__&amp;m1=__ANDROIDID1__&amp;m1a=__ANDROIDID__&amp;m2=__IMEI__&amp;m4=__AAID__&amp;m5=__IDFA__&amp;m6=__MAC1__&amp;m6a=__MAC__&amp;vo=3f2e070eb&amp;vr=2&amp;o=https%3A%2F%2Fwww.jianshu.com%2Fp%2Fee05f7eff678" target="_blank" class="yuxi-fixed-ad" style="display: none;"><div class="img"></div> <span class="ad-badge">广告</span></a>
      <div id="_so_pdsBy_0"></div>
    </div>
  </div>
  <div class="post">
    <div class="article">
        <h1 class="title">史上最简单的Spring Security总结——认证篇</h1>

        <!-- 作者区域 -->
        <div class="author">
          <a class="avatar" href="https://www.jianshu.com/u/5c791fdd83f1">
            <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/c722130c-f86a-432a-b3be-88791213ba92.jpg" alt="96">
</a>          <div class="info">
            <span class="name"><a href="https://www.jianshu.com/u/5c791fdd83f1">catalina_</a></span>
            <!-- 关注用户按钮 -->
            <a class="btn btn-success follow"><i class="iconfont ic-follow"></i><span>关注</span></a>
            <!-- 文章数据信息 -->
            <div class="meta">
              <!-- 简书钻 -->
                <span class="jsd-meta">
                  <i class="iconfont ic-paid1"></i> 0.8
                </span>
              <!-- 如果文章更新时间大于发布时间，那么使用 tooltip 显示更新时间 -->
                <span class="publish-time" data-toggle="tooltip" data-placement="bottom" title="" data-original-title="最后编辑于 2018.05.06 22:55">2018.05.06 22:51*</span>
              <span class="wordage">字数 1135</span>
            <span class="views-count">阅读 4622</span><span class="comments-count">评论 0</span><span class="likes-count">喜欢 18</span></div>
          </div>
          <!-- 如果是当前作者，加入编辑按钮 -->
        </div>


        <!-- 文章内容 -->
        <div data-note-content="" class="show-content">
          <div class="show-content-free">
            <p>Spring Security是一款强大的安全认证服务框架，它的原理就是在访问我们的系统前加了一系列的过滤器，可以称为过滤器链。它的两大核心就是认证和授权，本文主要描述的是认证篇，授权篇请看<a href="https://www.jianshu.com/p/cba56572fec5" target="_blank">https://www.jianshu.com/p/cba56572fec5</a>。那废话不多说，我用一个例子介绍怎么去用，然后基于源码分析他具体的实现过程。好吧那我们接下来就开始开车吧(新手司机，请坐稳！）</p>
<h5>搭建工程</h5>
<p>新建一个springboot工程，pom里添加springsecurity的依赖。</p>
<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
</code></pre>
<p>然后新建一个html页面，我这里建的是hello.html</p>
<pre class="hljs xml"><code class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>SpringSecurity<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>登录页面<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">"/admin/login"</span> <span class="hljs-attr">method</span>=<span class="hljs-string">"post"</span>&gt;</span>
    用户名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"username"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>
    密码：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"password"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">""</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"submit"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>

<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<p>目录结构：</p>
<br>
<div class="image-package">
<div class="image-container" style="max-width: 303px; max-height: 347px; background-color: transparent;">
<div class="image-container-fill" style="padding-bottom: 114.52%;"></div>
<div class="image-view" data-width="303" data-height="347"><img data-original-src="//upload-images.jianshu.io/upload_images/8826822-908dcc0a7cbfa4f0.png" data-original-width="303" data-original-height="347" data-original-format="" data-original-filesize="16757" style="cursor: zoom-in;" class="" src="./史上最简单的Spring Security总结——认证篇 - 简书_files/8826822-908dcc0a7cbfa4f0.png"></div>
</div>
<div class="image-caption">image.png</div>
</div>
<p>在SpringSecurityApplication里配置访问html的controller</p>
<pre class="hljs java"><code class="java"><span class="hljs-meta">@SpringBootApplication</span>
<span class="hljs-meta">@RestController</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringSecurityApplication</span> </span>{

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
        SpringApplication.run(SpringSecurityApplication.class, args);
    }
    <span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/hello"</span>)
    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">hello</span><span class="hljs-params">()</span></span>{
        <span class="hljs-keyword">return</span> <span class="hljs-string">"hello"</span>;
    }
}
</code></pre>
<p>然后访问<a href="https://link.jianshu.com/?t=http%3A%2F%2Flocalhost%3A8080%2Fhello" target="_blank" rel="nofollow">http://localhost:8080/hello</a>会出现如下的身份验证框<br>
</p><div class="image-package">
<div class="image-container" style="max-width: 700px; max-height: 313px; background-color: transparent;">
<div class="image-container-fill" style="padding-bottom: 35.57%;"></div>
<div class="image-view" data-width="880" data-height="313"><img data-original-src="//upload-images.jianshu.io/upload_images/8826822-b6214104e60f4555.png" data-original-width="880" data-original-height="313" data-original-format="" data-original-filesize="17497" style="cursor: zoom-in;" class="" src="./史上最简单的Spring Security总结——认证篇 - 简书_files/8826822-b6214104e60f4555.png"></div>
</div>
<div class="image-caption">image.png</div>
</div><br>
这就是springsecurity加的默认的拦截，在不进行配置的情况下，默认拦截所有的请求。那在实际中这种默认配置肯定满足不了我们的业务需求，所以我们需要根据自己业务来进行一些配置。接下来我就模拟一个表单登录的例子。<p></p>
<p>新建一个配置类MySecurityConfig，这个类需要继承WebSecurityConfigurerAdapter，然后重写他的configure方法,代码如下</p>
<pre class="hljs java"><code class="java"><span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>{
        http.formLogin()
                .and()
                .authorizeRequests()
                .anyRequest()
                .authenticated();
    }
}
</code></pre>
<p>接下来我们在启动项目访问<a href="https://link.jianshu.com/?t=http%3A%2F%2Flocalhost%3A8080%2Fuser" target="_blank" rel="nofollow">http://localhost:8080/user</a>，可以看到springsecurity会给我们跳到一个路径是<a href="https://link.jianshu.com/?t=http%3A%2F%2Flocalhost%3A8080%2Flogin" target="_blank" rel="nofollow">http://localhost:8080/login</a>的页面，如下<br>
</p><div class="image-package">
<div class="image-container" style="max-width: 339px; max-height: 177px; background-color: transparent;">
<div class="image-container-fill" style="padding-bottom: 52.21%;"></div>
<div class="image-view" data-width="339" data-height="177"><img data-original-src="//upload-images.jianshu.io/upload_images/8826822-3f15d2eb5dafeb09.png" data-original-width="339" data-original-height="177" data-original-format="" data-original-filesize="9598" style="cursor: zoom-in;" class="" src="./史上最简单的Spring Security总结——认证篇 - 简书_files/8826822-3f15d2eb5dafeb09.png"></div>
</div>
<div class="image-caption">image.png</div>
</div><p></p>
<h5>自定义认证逻辑</h5>
<p>这个页面是springsecurity默认的一个登录页面，我们可以配置自己的登录页面，以及自己的校验逻辑。配置自己的登录页面需要在配置类MySecurityConfig中指定登录页面，如下</p>
<pre class="hljs java"><code class="java"><span class="hljs-meta">@Configuration</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>{
<span class="hljs-comment">//        http.httpBasic()</span>
        http.authorizeRequests()
                .antMatchers(<span class="hljs-string">"/hello.html"</span>)
                .permitAll()<span class="hljs-comment">//注意这里hello.html需要配置成不需要身份认证，否则会报重定向次数过多</span>
                .and()
                .formLogin()
                .loginPage(<span class="hljs-string">"/hello.html"</span>)<span class="hljs-comment">//指定我们自己的登录页面</span>
                .loginProcessingUrl(<span class="hljs-string">"/admin/login"</span>)<span class="hljs-comment">//指定让UsernamePasswordAuthenticationFilter拦截器拦截的路径</span>
                .defaultSuccessUrl(<span class="hljs-string">"/index"</span>)<span class="hljs-comment">//默认登录成功后跳转的页面</span>
                .and()
                .authorizeRequests()
                .anyRequest()
                .authenticated();
        http.csrf().disable();
        http.headers().frameOptions().sameOrigin();
    }
    <span class="hljs-meta">@Bean</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span></span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> BCryptPasswordEncoder();
    }
</code></pre>
<p>添加用户自己的处理逻辑，需要实现UserDetailsService接口</p>
<pre class="hljs java"><code class="java"><span class="hljs-meta">@Component</span>
<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyUserDetailService</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>{
    <span class="hljs-meta">@Autowired</span>
    <span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;
    <span class="hljs-meta">@Override</span>
    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String name)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(name,passwordEncoder.encode(<span class="hljs-string">"123456"</span>), AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="hljs-string">"admin"</span>));
    }
}
</code></pre>
<p>这里实际项目应该是从数据库查询用户信息，然后封装在UserDetails里，这里用户信息我就写死在这里了。注意这里UserDetails是一个接口，这里我返回的是springsecurity里的一个User类，User类实现了UserDetail接口，实际项目中我们也可以自己写相应的UserDetials实现类处理自己的业务逻辑。</p>
<h5>自定义登录成功处理</h5>
<p>自定义登录成功处理需要实现AuthenticationSuccessHandler接口，AuthenticationSuccessHandler里面只有一个onAuthenticationSuccess方法，参数有个Authentication，我们可以拿到这个Authentication 然后自定义自己的处理逻辑。</p>
<pre class="hljs java"><code class="java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AuthenticationSuccessHandler</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2, Authentication var3)</span> <span class="hljs-keyword">throws</span> IOException, ServletException</span>;
}

</code></pre>
<p>springsecurity里面也是有一个默认的成功处理类 SavedRequestAwareAuthenticationSuccessHandler</p>
<pre class="hljs java"><code class="java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SavedRequestAwareAuthenticationSuccessHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleUrlAuthenticationSuccessHandler</span> </span>{
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Log logger = LogFactory.getLog(<span class="hljs-keyword">this</span>.getClass());
    <span class="hljs-keyword">private</span> RequestCache requestCache = <span class="hljs-keyword">new</span> HttpSessionRequestCache();

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SavedRequestAwareAuthenticationSuccessHandler</span><span class="hljs-params">()</span> </span>{
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationSuccess</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>{
        SavedRequest savedRequest = <span class="hljs-keyword">this</span>.requestCache.getRequest(request, response);
        <span class="hljs-keyword">if</span> (savedRequest == <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">super</span>.onAuthenticationSuccess(request, response, authentication);
        } <span class="hljs-keyword">else</span> {
            String targetUrlParameter = <span class="hljs-keyword">this</span>.getTargetUrlParameter();
            <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.isAlwaysUseDefaultTargetUrl() &amp;&amp; (targetUrlParameter == <span class="hljs-keyword">null</span> || !StringUtils.hasText(request.getParameter(targetUrlParameter)))) {
                <span class="hljs-keyword">this</span>.clearAuthenticationAttributes(request);
                String targetUrl = savedRequest.getRedirectUrl();
                <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Redirecting to DefaultSavedRequest Url: "</span> + targetUrl);
                <span class="hljs-keyword">this</span>.getRedirectStrategy().sendRedirect(request, response, targetUrl);
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">this</span>.requestCache.removeRequest(request, response);
                <span class="hljs-keyword">super</span>.onAuthenticationSuccess(request, response, authentication);
            }
        }
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRequestCache</span><span class="hljs-params">(RequestCache requestCache)</span> </span>{
        <span class="hljs-keyword">this</span>.requestCache = requestCache;
    }
}
</code></pre>
<p>可以看到这里面主要就是重定向我们之前的请求页面。</p>
<h5>自定义登录失败处理</h5>
<p>自定以失败处理同样需要实现AuthenticationFailureHandler接口，里面有一个onAuthenticationFailure方法，不同的是参数是一个AuthenticationException</p>
<pre class="hljs java"><code class="java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AuthenticationFailureHandler</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest var1, HttpServletResponse var2, AuthenticationException var3)</span> <span class="hljs-keyword">throws</span> IOException, ServletException</span>;
}
</code></pre>
<p>而springsecurity默认的登录失败处理类是SimpleUrlAuthenticationFailureHandler部分源码如下：</p>
<pre class="hljs java"><code class="java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onAuthenticationFailure</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.defaultFailureUrl == <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"No failure URL set, sending 401 Unauthorized error"</span>);
            response.sendError(<span class="hljs-number">401</span>, <span class="hljs-string">"Authentication Failed: "</span> + exception.getMessage());
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">this</span>.saveException(request, exception);
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.forwardToDestination) {
                <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Forwarding to "</span> + <span class="hljs-keyword">this</span>.defaultFailureUrl);
                request.getRequestDispatcher(<span class="hljs-keyword">this</span>.defaultFailureUrl).forward(request, response);
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Redirecting to "</span> + <span class="hljs-keyword">this</span>.defaultFailureUrl);
                <span class="hljs-keyword">this</span>.redirectStrategy.sendRedirect(request, response, <span class="hljs-keyword">this</span>.defaultFailureUrl);
            }
        }

    }
</code></pre>
<p>可以看挑战到一个错误页面。</p>
<h5>认证源码解析</h5>
<p>到这里已经简单的实现了表单登录的功能，我们来分析一下源码，首先，点击登录，会进入UsernamePasswordAuthenticationFilter类，源码如下</p>
<pre class="hljs java"><code class="java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsernamePasswordAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractAuthenticationProcessingFilter</span> </span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SPRING_SECURITY_FORM_USERNAME_KEY = <span class="hljs-string">"username"</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String SPRING_SECURITY_FORM_PASSWORD_KEY = <span class="hljs-string">"password"</span>;
    <span class="hljs-keyword">private</span> String usernameParameter = <span class="hljs-string">"username"</span>;
    <span class="hljs-keyword">private</span> String passwordParameter = <span class="hljs-string">"password"</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> postOnly = <span class="hljs-keyword">true</span>;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UsernamePasswordAuthenticationFilter</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">super</span>(<span class="hljs-keyword">new</span> AntPathRequestMatcher(<span class="hljs-string">"/login"</span>, <span class="hljs-string">"POST"</span>));
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class="hljs-string">"POST"</span>)) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthenticationServiceException(<span class="hljs-string">"Authentication method not supported: "</span> + request.getMethod());
        } <span class="hljs-keyword">else</span> {
            String username = <span class="hljs-keyword">this</span>.obtainUsername(request);
            String password = <span class="hljs-keyword">this</span>.obtainPassword(request);
            <span class="hljs-keyword">if</span> (username == <span class="hljs-keyword">null</span>) {
                username = <span class="hljs-string">""</span>;
            }

            <span class="hljs-keyword">if</span> (password == <span class="hljs-keyword">null</span>) {
                password = <span class="hljs-string">""</span>;
            }

            username = username.trim();
            <span class="hljs-comment">//--------注释1----------</span>
            UsernamePasswordAuthenticationToken authRequest = <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(username, password);
            <span class="hljs-keyword">this</span>.setDetails(request, authRequest);
            <span class="hljs-comment">//-------注释2----------</span>
            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getAuthenticationManager().authenticate(authRequest);
        }
    }

    <span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">obtainPassword</span><span class="hljs-params">(HttpServletRequest request)</span> </span>{
        <span class="hljs-keyword">return</span> request.getParameter(<span class="hljs-keyword">this</span>.passwordParameter);
    }

    <span class="hljs-function"><span class="hljs-keyword">protected</span> String <span class="hljs-title">obtainUsername</span><span class="hljs-params">(HttpServletRequest request)</span> </span>{
        <span class="hljs-keyword">return</span> request.getParameter(<span class="hljs-keyword">this</span>.usernameParameter);
    }

    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setDetails</span><span class="hljs-params">(HttpServletRequest request, UsernamePasswordAuthenticationToken authRequest)</span> </span>{
        authRequest.setDetails(<span class="hljs-keyword">this</span>.authenticationDetailsSource.buildDetails(request));
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setUsernameParameter</span><span class="hljs-params">(String usernameParameter)</span> </span>{
        Assert.hasText(usernameParameter, <span class="hljs-string">"Username parameter must not be empty or null"</span>);
        <span class="hljs-keyword">this</span>.usernameParameter = usernameParameter;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPasswordParameter</span><span class="hljs-params">(String passwordParameter)</span> </span>{
        Assert.hasText(passwordParameter, <span class="hljs-string">"Password parameter must not be empty or null"</span>);
        <span class="hljs-keyword">this</span>.passwordParameter = passwordParameter;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPostOnly</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> postOnly)</span> </span>{
        <span class="hljs-keyword">this</span>.postOnly = postOnly;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getUsernameParameter</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.usernameParameter;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title">getPasswordParameter</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.passwordParameter;
    }
</code></pre>
<p>注释1处跟进到UsernamePasswordAuthenticationToken</p>
<pre class="hljs java"><code class="java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsernamePasswordAuthenticationToken</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractAuthenticationToken</span> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">420L</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object principal;
    <span class="hljs-keyword">private</span> Object credentials;

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UsernamePasswordAuthenticationToken</span><span class="hljs-params">(Object principal, Object credentials)</span> </span>{
        <span class="hljs-keyword">super</span>((Collection)<span class="hljs-keyword">null</span>);<span class="hljs-comment">//父类构造函数需要一组权限，此时还没有校验不知道权限，所以传的是null</span>
        <span class="hljs-keyword">this</span>.principal = principal;
        <span class="hljs-keyword">this</span>.credentials = credentials;
        <span class="hljs-keyword">this</span>.setAuthenticated(<span class="hljs-keyword">false</span>);<span class="hljs-comment">//这个构造器这里设为false，因为此时还不知道用户的权限</span>
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UsernamePasswordAuthenticationToken</span><span class="hljs-params">(Object principal, Object credentials, Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>{
        <span class="hljs-keyword">super</span>(authorities);
        <span class="hljs-keyword">this</span>.principal = principal;
        <span class="hljs-keyword">this</span>.credentials = credentials;
        <span class="hljs-keyword">super</span>.setAuthenticated(<span class="hljs-keyword">true</span>);
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getCredentials</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.credentials;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getPrincipal</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.principal;
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAuthenticated</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> isAuthenticated)</span> <span class="hljs-keyword">throws</span> IllegalArgumentException </span>{
        <span class="hljs-keyword">if</span> (isAuthenticated) {
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">"Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead"</span>);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">super</span>.setAuthenticated(<span class="hljs-keyword">false</span>);
        }
    }

    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eraseCredentials</span><span class="hljs-params">()</span> </span>{
        <span class="hljs-keyword">super</span>.eraseCredentials();
        <span class="hljs-keyword">this</span>.credentials = <span class="hljs-keyword">null</span>;
    }
}
</code></pre>
<p>跟进注释2处进入ProviderManager的authenticate方法，这个方法就是从一堆的AuthenticationProvider 中选择与当前匹配的AuthenticationProvider ，再去调authenticate方法，部分源码如下：</p>
<pre class="hljs java"><code class="java"><span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>{
        Class&lt;? extends Authentication&gt; toTest = authentication.getClass();
        AuthenticationException lastException = <span class="hljs-keyword">null</span>;
        Authentication result = <span class="hljs-keyword">null</span>;
        <span class="hljs-keyword">boolean</span> debug = logger.isDebugEnabled();
        Iterator var6 = <span class="hljs-keyword">this</span>.getProviders().iterator();

        <span class="hljs-keyword">while</span>(var6.hasNext()) {
            AuthenticationProvider provider = (AuthenticationProvider)var6.next();
            <span class="hljs-keyword">if</span> (provider.supports(toTest)) {
                <span class="hljs-keyword">if</span> (debug) {
                    logger.debug(<span class="hljs-string">"Authentication attempt using "</span> + provider.getClass().getName());
                }

                <span class="hljs-keyword">try</span> {
                    result = provider.authenticate(authentication);<span class="hljs-comment">//选出当前匹配的AuthenticationProvider调authenticate</span>
                    <span class="hljs-keyword">if</span> (result != <span class="hljs-keyword">null</span>) {
                        <span class="hljs-keyword">this</span>.copyDetails(authentication, result);
                        <span class="hljs-keyword">break</span>;
                    }
                } <span class="hljs-keyword">catch</span> (AccountStatusException var11) {
                    <span class="hljs-keyword">this</span>.prepareException(var11, authentication);
                    <span class="hljs-keyword">throw</span> var11;
                } <span class="hljs-keyword">catch</span> (InternalAuthenticationServiceException var12) {
                    <span class="hljs-keyword">this</span>.prepareException(var12, authentication);
                    <span class="hljs-keyword">throw</span> var12;
                } <span class="hljs-keyword">catch</span> (AuthenticationException var13) {
                    lastException = var13;
                }
            }
        }
</code></pre>
<p>进入到authenticate方法，这个方法先会去调我们之前自己写的MyUserDetailService实现类的loadUserByUsername方法，然后进行一系列的检查，包括用户名，密码，是否过期，是否锁定等等，部分源码如下：</p>
<pre class="hljs java"><code class="java"><span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>{
        Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, <span class="hljs-keyword">this</span>.messages.getMessage(<span class="hljs-string">"AbstractUserDetailsAuthenticationProvider.onlySupports"</span>, <span class="hljs-string">"Only UsernamePasswordAuthenticationToken is supported"</span>));
        String username = authentication.getPrincipal() == <span class="hljs-keyword">null</span> ? <span class="hljs-string">"NONE_PROVIDED"</span> : authentication.getName();
        <span class="hljs-keyword">boolean</span> cacheWasUsed = <span class="hljs-keyword">true</span>;
        UserDetails user = <span class="hljs-keyword">this</span>.userCache.getUserFromCache(username);
        <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) {
            cacheWasUsed = <span class="hljs-keyword">false</span>;

            <span class="hljs-keyword">try</span> {
                user = <span class="hljs-keyword">this</span>.retrieveUser(username, (UsernamePasswordAuthenticationToken)authentication);
            } <span class="hljs-keyword">catch</span> (UsernameNotFoundException var6) {
                <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"User '"</span> + username + <span class="hljs-string">"' not found"</span>);
                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.hideUserNotFoundExceptions) {
                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BadCredentialsException(<span class="hljs-keyword">this</span>.messages.getMessage(<span class="hljs-string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>, <span class="hljs-string">"Bad credentials"</span>));
                }

                <span class="hljs-keyword">throw</span> var6;
            }

            Assert.notNull(user, <span class="hljs-string">"retrieveUser returned null - a violation of the interface contract"</span>);
        }

        <span class="hljs-keyword">try</span> {
            <span class="hljs-keyword">this</span>.preAuthenticationChecks.check(user);
            <span class="hljs-keyword">this</span>.additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken)authentication);
        } <span class="hljs-keyword">catch</span> (AuthenticationException var7) {
            <span class="hljs-keyword">if</span> (!cacheWasUsed) {
                <span class="hljs-keyword">throw</span> var7;
            }

            cacheWasUsed = <span class="hljs-keyword">false</span>;
            user = <span class="hljs-keyword">this</span>.retrieveUser(username, (UsernamePasswordAuthenticationToken)authentication);
            <span class="hljs-keyword">this</span>.preAuthenticationChecks.check(user);
            <span class="hljs-keyword">this</span>.additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken)authentication);
        }

        <span class="hljs-keyword">this</span>.postAuthenticationChecks.check(user);
        <span class="hljs-keyword">if</span> (!cacheWasUsed) {
            <span class="hljs-keyword">this</span>.userCache.putUserInCache(user);
        }

        Object principalToReturn = user;
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.forcePrincipalAsString) {
            principalToReturn = user.getUsername();
        }

        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.createSuccessAuthentication(principalToReturn, authentication, user);
    }
</code></pre>
<p>最后进入createSuccessAuthentication方法，可以看到这里有重新new 了一个带权限的UsernamePasswordAuthenticationToken，这个构造器把Authenticated设置了true，也就是验证通过</p>
<pre class="hljs cpp"><code class="cpp"><span class="hljs-function"><span class="hljs-keyword">protected</span> Authentication <span class="hljs-title">createSuccessAuthentication</span><span class="hljs-params">(Object principal, Authentication authentication, UserDetails user)</span> </span>{
        UsernamePasswordAuthenticationToken result = <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(principal, authentication.getCredentials(), <span class="hljs-keyword">this</span>.authoritiesMapper.mapAuthorities(user.getAuthorities()));
        result.setDetails(authentication.getDetails());
        <span class="hljs-keyword">return</span> result;
    }
</code></pre>
<p>到此认证流程结束最后回到AbstractAuthenticationProcessingFilter这个抽象类里的doFilter方法</p>
<pre class="hljs java"><code class="java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>{
        HttpServletRequest request = (HttpServletRequest)req;
        HttpServletResponse response = (HttpServletResponse)res;
        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.requiresAuthentication(request, response)) {
            chain.doFilter(request, response);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) {
                <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Request is to process authentication"</span>);
            }

            Authentication authResult;
            <span class="hljs-keyword">try</span> {
                authResult = <span class="hljs-keyword">this</span>.attemptAuthentication(request, response);
                <span class="hljs-keyword">if</span> (authResult == <span class="hljs-keyword">null</span>) {
                    <span class="hljs-keyword">return</span>;
                }

                <span class="hljs-keyword">this</span>.sessionStrategy.onAuthentication(authResult, request, response);
            } <span class="hljs-keyword">catch</span> (InternalAuthenticationServiceException var8) {
                <span class="hljs-keyword">this</span>.logger.error(<span class="hljs-string">"An internal error occurred while trying to authenticate the user."</span>, var8);
                <span class="hljs-keyword">this</span>.unsuccessfulAuthentication(request, response, var8);
                <span class="hljs-keyword">return</span>;
            } <span class="hljs-keyword">catch</span> (AuthenticationException var9) {
                <span class="hljs-keyword">this</span>.unsuccessfulAuthentication(request, response, var9);
                <span class="hljs-keyword">return</span>;
            }

            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.continueChainBeforeSuccessfulAuthentication) {
                chain.doFilter(request, response);
            }

            <span class="hljs-keyword">this</span>.successfulAuthentication(request, response, chain, authResult);
        }
    }
</code></pre>
<p>这里面最后调了successfulAuthentication方法，部分源码如下：</p>
<pre class="hljs java"><code class="java">    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">successfulAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>{
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) {
            <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Authentication success. Updating SecurityContextHolder to contain: "</span> + authResult);
        }

        SecurityContextHolder.getContext().setAuthentication(authResult);
        <span class="hljs-keyword">this</span>.rememberMeServices.loginSuccess(request, response, authResult);
        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.eventPublisher != <span class="hljs-keyword">null</span>) {
            <span class="hljs-keyword">this</span>.eventPublisher.publishEvent(<span class="hljs-keyword">new</span> InteractiveAuthenticationSuccessEvent(authResult, <span class="hljs-keyword">this</span>.getClass()));
        }

        <span class="hljs-keyword">this</span>.successHandler.onAuthenticationSuccess(request, response, authResult);
    }
</code></pre>
<p>这里就是在调我们自己写的登陆成功处理器了。<br>
这系列流程可以总结如下的流程图：</p>
<br>
<div class="image-package">
<div class="image-container" style="max-width: 509px; max-height: 422px; background-color: transparent;">
<div class="image-container-fill" style="padding-bottom: 82.91%;"></div>
<div class="image-view" data-width="509" data-height="422"><img data-original-src="//upload-images.jianshu.io/upload_images/8826822-6651ca7e6899210f.png" data-original-width="509" data-original-height="422" data-original-format="" data-original-filesize="23085" style="cursor: zoom-in;" class="" src="./史上最简单的Spring Security总结——认证篇 - 简书_files/8826822-6651ca7e6899210f.png"></div>
</div>
<div class="image-caption">image.png</div>
</div><br>
<p>接着看上面successfulAuthentication方法的源码里有这样一句</p>

<pre class="hljs css"><code class="css"><span class="hljs-selector-tag">SecurityContextHolder</span><span class="hljs-selector-class">.getContext</span>()<span class="hljs-selector-class">.setAuthentication</span>(<span class="hljs-selector-tag">authResult</span>);
</code></pre>
<p>这里把我们认证的Authentication放到了SecurityContextHolder里。而springsecurity在所有拦截器链的最前端有个叫<br>
SecurityContextPersistenceFilter这样的一个拦截器，源码如下：</p>
<pre class="hljs java"><code class="java"> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>{
        HttpServletRequest request = (HttpServletRequest)req;
        HttpServletResponse response = (HttpServletResponse)res;
        <span class="hljs-keyword">if</span> (request.getAttribute(<span class="hljs-string">"__spring_security_scpf_applied"</span>) != <span class="hljs-keyword">null</span>) {
            chain.doFilter(request, response);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">boolean</span> debug = <span class="hljs-keyword">this</span>.logger.isDebugEnabled();
            request.setAttribute(<span class="hljs-string">"__spring_security_scpf_applied"</span>, Boolean.TRUE);
            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.forceEagerSessionCreation) {
                HttpSession session = request.getSession();
                <span class="hljs-keyword">if</span> (debug &amp;&amp; session.isNew()) {
                    <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"Eagerly created session: "</span> + session.getId());
                }
            }

            HttpRequestResponseHolder holder = <span class="hljs-keyword">new</span> HttpRequestResponseHolder(request, response);
            SecurityContext contextBeforeChainExecution = <span class="hljs-keyword">this</span>.repo.loadContext(holder);
            <span class="hljs-keyword">boolean</span> var13 = <span class="hljs-keyword">false</span>;

            <span class="hljs-keyword">try</span> {
                var13 = <span class="hljs-keyword">true</span>;
                SecurityContextHolder.setContext(contextBeforeChainExecution);
                chain.doFilter(holder.getRequest(), holder.getResponse());
                var13 = <span class="hljs-keyword">false</span>;
            } <span class="hljs-keyword">finally</span> {
                <span class="hljs-keyword">if</span> (var13) {
                    SecurityContext contextAfterChainExecution = SecurityContextHolder.getContext();
                    SecurityContextHolder.clearContext();
                    <span class="hljs-keyword">this</span>.repo.saveContext(contextAfterChainExecution, holder.getRequest(), holder.getResponse());
                    request.removeAttribute(<span class="hljs-string">"__spring_security_scpf_applied"</span>);
                    <span class="hljs-keyword">if</span> (debug) {
                        <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"SecurityContextHolder now cleared, as request processing completed"</span>);
                    }

                }
            }

            SecurityContext contextAfterChainExecution = SecurityContextHolder.getContext();
            SecurityContextHolder.clearContext();
            <span class="hljs-keyword">this</span>.repo.saveContext(contextAfterChainExecution, holder.getRequest(), holder.getResponse());
            request.removeAttribute(<span class="hljs-string">"__spring_security_scpf_applied"</span>);
            <span class="hljs-keyword">if</span> (debug) {
                <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">"SecurityContextHolder now cleared, as request processing completed"</span>);
            }

        }
    }
</code></pre>
<p>这个拦截器的作用是每次请求进来先去session里拿SecurityContext放到SecurityContextHolder里，这样在程序任何地方我们都能通过SecurityContextHolder拿到相应的Authentication，从而保证认证信息的共享问题。<br>
获取认证信息可以在controller中这样写：</p>
<pre class="hljs java"><code class="java"><span class="hljs-meta">@GetMapping</span>(<span class="hljs-string">"/authentication"</span>)
    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getCurrentUser</span><span class="hljs-params">(@AuthenticationPrincipal UserDetails user)</span> </span>{
        <span class="hljs-keyword">return</span> user;
    }
</code></pre>

          </div>
        </div>
    </div>

    <!-- 如果是付费文章，未购买，则显示购买按钮 -->

    <!-- 连载目录项 -->

    <!-- 如果是付费文章 -->
      <!-- 如果是付费连载，已购买，且作者允许赞赏，则显示付费信息和赞赏 -->
        <div id="free-reward-panel" class="support-author"><p>小礼物走一走，来简书关注我</p> <div class="btn btn-pay">赞赏支持</div> <div class="supporter"><ul class="support-list"></ul> <!----></div> <!----> <!----></div>

      <div class="show-foot">
        <a class="notebook" href="https://www.jianshu.com/nb/18417610">
          <i class="iconfont ic-search-notebook"></i>
          <span>笔记</span>
</a>        <div class="copyright" data-toggle="tooltip" data-html="true" data-original-title="转载请联系作者获得授权，并标注“简书作者”。">
          © 著作权归作者所有
        </div>
        <div class="modal-wrap" data-report-note="">
          <a id="report-modal">举报文章</a>
        </div>
      </div>

      <!-- 文章底部作者信息 -->
        <div class="follow-detail">
          <div class="info">
            <a class="avatar" href="https://www.jianshu.com/u/5c791fdd83f1">
              <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/c722130c-f86a-432a-b3be-88791213ba92.jpg" alt="96">
</a>            <a class="btn btn-success follow"><i class="iconfont ic-follow"></i><span>关注</span></a>
            <a class="title" href="https://www.jianshu.com/u/5c791fdd83f1">catalina_</a>
              <i class="iconfont ic-man"></i>
          <p>写了 15773 字，被 36 人关注，获得了 144 个喜欢</p></div>
        </div>

    <div class="meta-bottom">
      <div data-v-6ddd02c6="" class="like"><div data-v-6ddd02c6="" class="btn like-group"><div data-v-6ddd02c6="" class="btn-like"><a data-v-6ddd02c6="">喜欢</a></div> <div data-v-6ddd02c6="" class="modal-wrap"><a data-v-6ddd02c6="">18</a></div></div> <!----></div>
      <div class="share-group">
        <a class="share-circle" data-action="weixin-share" data-toggle="tooltip" data-original-title="分享到微信">
          <i class="iconfont ic-wechat"></i>
        </a>
        <a class="share-circle" data-action="weibo-share" data-toggle="tooltip" href="javascript:void((function(s,d,e,r,l,p,t,z,c){var%20f=&#39;http://v.t.sina.com.cn/share/share.php?appkey=1881139527&#39;,u=z||d.location,p=[&#39;&amp;url=&#39;,e(u),&#39;&amp;title=&#39;,e(t||d.title),&#39;&amp;source=&#39;,e(r),&#39;&amp;sourceUrl=&#39;,e(l),&#39;&amp;content=&#39;,c||&#39;gb2312&#39;,&#39;&amp;pic=&#39;,e(p||&#39;&#39;)].join(&#39;&#39;);function%20a(){if(!window.open([f,p].join(&#39;&#39;),&#39;mb&#39;,[&#39;toolbar=0,status=0,resizable=1,width=440,height=430,left=&#39;,(s.width-440)/2,&#39;,top=&#39;,(s.height-430)/2].join(&#39;&#39;)))u.href=[f,p].join(&#39;&#39;);};if(/Firefox/.test(navigator.userAgent))setTimeout(a,0);else%20a();})(screen,document,encodeURIComponent,&#39;&#39;,&#39;&#39;,&#39;&#39;, &#39;推荐 catalina_ 的文章《史上最简单的Spring Security总结——认证篇》（ 分享自 @简书 ）&#39;,&#39;https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=weibo&#39;,&#39;页面编码gb2312|utf-8默认gb2312&#39;));" data-original-title="分享到微博">
          <i class="iconfont ic-weibo"></i>
        </a>
        <a class="share-circle" data-toggle="tooltip" id="longshare" target="_blank" data-original-title="" title="">
            <div class="qrcode" id="qrcode">
             <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/download-index-side-qrcode-cb13fc9106a478795f8d10f9f632fccf.png" alt="Download index side qrcode">
             <p>下载app生成长微博图片</p>
             </div>
          <i class="iconfont ic-picture"></i>
        </a>
        <a class="share-circle more-share" tabindex="0" data-toggle="popover" data-placement="top" data-html="true" data-trigger="focus" href="javascript:void(0);" data-content="
          &lt;ul class=&quot;share-list&quot;&gt;
            &lt;li&gt;&lt;a href=&quot;javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=&#39;+e(&#39;https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qzone&#39;)+&#39;&amp;title=&#39;+e(&#39;推荐 catalina_ 的文章《史上最简单的Spring Security总结——认证篇》&#39;),x=function(){if(!window.open(r,&#39;qzone&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=600,height=600&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();&quot;&gt;&lt;i class=&quot;social-icon-sprite social-icon-zone&quot;&gt;&lt;/i&gt;&lt;span&gt;分享到QQ空间&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;https://twitter.com/share?url=&#39;+e(&#39;https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=twitter&#39;)+&#39;&amp;text=&#39;+e(&#39;推荐 catalina_ 的文章《史上最简单的Spring Security总结——认证篇》（ 分享自 @jianshucom ）&#39;)+&#39;&amp;related=&#39;+e(&#39;jianshucom&#39;),x=function(){if(!window.open(r,&#39;twitter&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=600,height=600&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();&quot;&gt;&lt;i class=&quot;social-icon-sprite social-icon-twitter&quot;&gt;&lt;/i&gt;&lt;span&gt;分享到Twitter&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;https://www.facebook.com/dialog/share?app_id=483126645039390&amp;display=popup&amp;href=https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=facebook&#39;,x=function(){if(!window.open(r,&#39;facebook&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=450,height=330&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();&quot;&gt;&lt;i class=&quot;social-icon-sprite social-icon-facebook&quot;&gt;&lt;/i&gt;&lt;span&gt;分享到Facebook&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;https://plus.google.com/share?url=&#39;+e(&#39;https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=google_plus&#39;),x=function(){if(!window.open(r,&#39;google_plus&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=450,height=330&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();&quot;&gt;&lt;i class=&quot;social-icon-sprite social-icon-google&quot;&gt;&lt;/i&gt;&lt;span&gt;分享到Google+&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href=&quot;javascript:void(function(){var d=document,e=encodeURIComponent,s1=window.getSelection,s2=d.getSelection,s3=d.selection,s=s1?s1():s2?s2():s3?s3.createRange().text:&#39;&#39;,r=&#39;http://www.douban.com/recommend/?url=&#39;+e(&#39;https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=douban&#39;)+&#39;&amp;title=&#39;+e(&#39;史上最简单的Spring Security总结——认证篇&#39;)+&#39;&amp;sel=&#39;+e(s)+&#39;&amp;v=1&#39;,x=function(){if(!window.open(r,&#39;douban&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=450,height=330&#39;))location.href=r+&#39;&amp;r=1&#39;};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})()&quot;&gt;&lt;i class=&quot;social-icon-sprite social-icon-douban&quot;&gt;&lt;/i&gt;&lt;span&gt;分享到豆瓣&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;/ul&gt;
        " data-original-title="" title="">更多分享</a>
      </div>
    </div>

      <a id="web-note-ad-1" target="_blank" href="https://www.jianshu.com/apps/redirect?utm_source=note-bottom-click"><img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/web-note-ad-1-c2e1746859dbf03abe49248893c9bea4.png" alt="Web note ad 1"></a>

    <!--
    <div id="note-comment-above-ad-container">
      <span id="youdao-comment-ad" class="ad-badge">广告</span>
    </div>
    -->
    <div><div id="comment-list" class="comment-list"><div><form class="new-comment"><a class="avatar"><img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/avatar_default-78d4d1f68984cd6d4379508dd94b4210.png"></a> <div class="sign-container"><a href="https://www.jianshu.com/sign_in?utm_source=desktop&amp;utm_medium=not-signed-in-comment-form" class="btn btn-sign">登录</a> <span>后发表评论</span></div></form> <!----></div> <!----> <div class="comments-placeholder" style="display: none;"><div class="author"><div class="avatar"></div> <div class="info"><div class="name"></div> <div class="meta"></div></div></div> <div class="text"></div> <div class="text animation-delay"></div> <div class="tool-group"><i class="iconfont ic-zan-active"></i><div class="zan"></div> <i class="iconfont ic-list-comments"></i><div class="zan"></div></div></div> <div id="normal-comment-list" class="normal-comment-list"><div><!----> <div><div class="top-title"><span>评论</span> <a class="close-btn" style="display: none;">关闭评论</a></div> <div class="no-comment"></div> <div class="text">
            智慧如你，不想<a href="https://www.jianshu.com/sign_in?utm_source=desktop&amp;utm_medium=not-signed-in-nocomments-text">发表一点想法</a>咩~
          </div></div> <!----> <div class="comments-placeholder" style="display: none;"><div class="author"><div class="avatar"></div> <div class="info"><div class="name"></div> <div class="meta"></div></div></div> <div class="text"></div> <div class="text animation-delay"></div> <div class="tool-group"><i class="iconfont ic-zan-active"></i><div class="zan"></div> <i class="iconfont ic-list-comments"></i><div class="zan"></div></div></div> </div></div> <!----> <div><!----></div></div></div>
  </div>

  <div class="side-tool"><ul><li data-placement="left" data-toggle="tooltip" data-container="body" data-original-title="回到顶部" style=""><a class="function-button"><i class="iconfont ic-backtop"></i></a></li> <!----> <!----> <!----> <!----> <li data-placement="left" data-toggle="tooltip" data-container="body" data-original-title="分享文章" id="share"><a tabindex="0" role="button" data-toggle="popover" data-placement="left" data-html="true" data-trigger="focus" href="javascript:void(0);" data-content="&lt;ul class=&#39;share-list&#39; style=&quot;width:220px&quot;&gt;
                  &lt;li&gt;&lt;a class=&quot;weixin-share&quot;&gt;&lt;i class=&quot;social-icon-sprite social-icon-weixin&quot;&gt;&lt;/i&gt;&lt;span&gt;分享到微信&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;javascript:void((function(s,d,e,r,l,p,t,z,c){var%20f=&#39;http://v.t.sina.com.cn/share/share.php?appkey=1881139527&#39;,u=z||d.location,p=[&#39;&amp;url=&#39;,e(u),&#39;&amp;title=&#39;,e(t||d.title),&#39;&amp;source=&#39;,e(r),&#39;&amp;sourceUrl=&#39;,e(l),&#39;&amp;content=&#39;,c||&#39;gb2312&#39;,&#39;&amp;pic=&#39;,e(p||&#39;&#39;)].join(&#39;&#39;);function%20a(){if(!window.open([f,p].join(&#39;&#39;),&#39;mb&#39;,[&#39;toolbar=0,status=0,resizable=1,width=440,height=430,left=&#39;,(s.width-440)/2,&#39;,top=&#39;,(s.height-430)/2].join(&#39;&#39;)))u.href=[f,p].join(&#39;&#39;);};if(/Firefox/.test(navigator.userAgent))setTimeout(a,0);else%20a();})(screen,document,encodeURIComponent,&#39;&#39;,&#39;&#39;,&#39;&#39;, &#39;推荐 catalina_ 的文章《史上最简单的Spring Security总结——认证篇》（ 分享自 @简书 ）&#39;,&#39;https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=weibo&#39;,&#39;页面编码gb2312|utf-8默认gb2312&#39;));&quot;&gt;&lt;i class=&#39;social-icon-sprite social-icon-weibo&#39;&gt;&lt;/i&gt;&lt;span&gt;分享到微博&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  
                  &lt;li&gt;&lt;a href=&quot;javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url=&#39;+e(&#39;https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=qzone&#39;)+&#39;&amp;title=&#39;+e(&#39;推荐 catalina_ 的文章《史上最简单的Spring Security总结——认证篇》&#39;),x=function(){if(!window.open(r,&#39;qzone&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=600,height=600&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();&quot;&gt;&lt;i class=&#39;social-icon-sprite social-icon-zone&#39;&gt;&lt;/i&gt;&lt;span&gt;分享到QQ空间&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;https://twitter.com/share?url=&#39;+e(&#39;https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=twitter&#39;)+&#39;&amp;text=&#39;+e(&#39;推荐 catalina_ 的文章《史上最简单的Spring Security总结——认证篇》（ 分享自 @jianshucom ）&#39;)+&#39;&amp;related=&#39;+e(&#39;jianshucom&#39;),x=function(){if(!window.open(r,&#39;twitter&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=600,height=600&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();&quot;&gt;&lt;i class=&#39;social-icon-sprite social-icon-twitter&#39;&gt;&lt;/i&gt;&lt;span&gt;分享到Twitter&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;https://www.facebook.com/dialog/share?app_id=483126645039390&amp;display=popup&amp;href=https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=facebook&#39;,x=function(){if(!window.open(r,&#39;facebook&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=450,height=330&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();&quot;&gt;&lt;i class=&#39;social-icon-sprite social-icon-facebook&#39;&gt;&lt;/i&gt;&lt;span&gt;分享到Facebook&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;javascript:void(function(){var d=document,e=encodeURIComponent,r=&#39;https://plus.google.com/share?url=&#39;+e(&#39;https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=google_plus&#39;),x=function(){if(!window.open(r,&#39;google_plus&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=450,height=330&#39;))location.href=r};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})();&quot;&gt;&lt;i class=&#39;social-icon-sprite social-icon-google&#39;&gt;&lt;/i&gt;&lt;span&gt;分享到Google+&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;a href=&quot;javascript:void(function(){var d=document,e=encodeURIComponent,s1=window.getSelection,s2=d.getSelection,s3=d.selection,s=s1?s1():s2?s2():s3?s3.createRange().text:&#39;&#39;,r=&#39;http://www.douban.com/recommend/?url=&#39;+e(&#39;https://www.jianshu.com/p/24c6a65c3913?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=reader_share&amp;utm_source=douban&#39;)+&#39;&amp;title=&#39;+e(&#39;史上最简单的Spring Security总结——认证篇&#39;)+&#39;&amp;sel=&#39;+e(s)+&#39;&amp;v=1&#39;,x=function(){if(!window.open(r,&#39;douban&#39;,&#39;toolbar=0,resizable=1,scrollbars=yes,status=1,width=450,height=330&#39;))location.href=r+&#39;&amp;r=1&#39;};if(/Firefox/.test(navigator.userAgent)){setTimeout(x,0)}else{x()}})()&quot;&gt;&lt;i class=&#39;social-icon-sprite social-icon-douban&#39;&gt;&lt;/i&gt;&lt;span&gt;分享到豆瓣&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;" data-original-title="" title="" class="function-button"><i class="iconfont ic-share"></i></a> <!----></li> <!----></ul></div>
</div>
<div class="note-bottom">
  <div><div class="main"><div class="title">被以下专题收入，发现更多相似内容</div> <!----> <div class="include-collection"><!----> <a href="https://www.jianshu.com/c/9027206b2185?utm_source=desktop&amp;utm_medium=notes-included-collection" target="_blank" class="item"><img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/1538837314.jpg"><div class="name">Spring ...</div></a><a href="https://www.jianshu.com/c/f3c5b23021bc?utm_source=desktop&amp;utm_medium=notes-included-collection" target="_blank" class="item"><img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/crop1538057571862.jpg"><div class="name">java</div></a><a href="https://www.jianshu.com/c/8edfdfc482a0?utm_source=desktop&amp;utm_medium=notes-included-collection" target="_blank" class="item"><img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/crop1538334446649.jpg"><div class="name">SpringHome</div></a><a href="https://www.jianshu.com/c/0c61309fe15e?utm_source=desktop&amp;utm_medium=notes-included-collection" target="_blank" class="item"><img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/002.PNG"><div class="name">spring ...</div></a> <!----></div></div> <!----> <!----></div>
  <div><div class="recommend-note"><div class="meta"><div class="title">
        推荐阅读
        <a target="_blank" href="https://www.jianshu.com/" class="more">
           更多精彩内容<i class="iconfont ic-link"></i></a></div></div> <div class="list"><div class="note"><a href="https://dsp-click.youdao.com/clk/request.s?slot=f2ac00aef0eb6b673f4e4639046bc6f8&amp;k=Ng5n%2F0MpRN%2FMw4EhW1wJe2ltvThxtkZEBFoPG21YvcbXxo%2BoRxcJpjjAgKuViCqvIxCHqA9N%2F2c%2F9Be%2FcwcSr6Q7aPgq%2FKJGJHUxf6FBqPdIpBzxvFMOxa8Y%2FeDU77MYOvJXMwKsEKv7nYZBr64pe2z5e2EPyQPIKkBx5NOacn4FeGRyUzC2c0O28sEmaM8CdQ6xzCHA6LbCjhJesRfNbsaQg1r5g3glCaU4CVzvUcfSrx2UO76VBl22RXqOjj9ioG%2FQjm0%2BB2EBLiosgyxcgHUOh6RyqG6Eek4VgNfkGmuGpGUWhROEByf9m5%2FBhkb7CqZIfzsZdBqI78r8u1xr21NSiu7R%2FGglmFCjKZ7g3fNzMVAcyTI0%2Bz04ZLMQNvVBcgucNQ%2BF5Pr21H3pfUctfCdfT0ToHc0RNYXrJolz5GbiBJmsDPjrhfSXfG84YQ9sAOw4iMr29gGpEb0yOTHq%2FuSdrOLT8251auBICLMft21%2FhFREZ%2B98XaOhtUIEI0RZJyP54jW41%2F%2Bc3Uo6Ql%2Bo6UB%2BJzx8ULNf3bnJvMIJrRKTzT5i31oboaqHCQAeGZyRd9LRc1zMlZ0OtI8cFyNquZUPOFURd0LeSU5YguCApmTMuHN2yKCHmDuAcBwi3cUFGhvhBqybKwH6plhpia%2BVBXhUe22vRbdQ8Nze9htcVfPmMxO%2BHOKATbqqA0YNGVZHBGt0h3e5McsF5Ie4R4G%2FjNQvGg8Tk4NxfGeRWwH57VnJVjSvwGXIwKgh%2BSmn2IeMsvpqPdnNuKcCbrQ1Hz64QfOBYak7a0rk4lp8x4zWlEfvG63Lzl7OYQeoQ%2BUI6tSlIh1snwUpPG0GWKd5AuFQkQCYurSePcOb603O5fNrq78mVFIyqnYCHrw7mQfrLQn%2Ft5eKe3S7fNKKbH4ksyqIc9fGj6hHFwmmOMCAq5WIKq%2FXxo%2BoRxcJpjjAgKuViCqv18aPqEcXCaY4wICrlYgqr8VmBEMrK%2B9BpCIxjTg7Yls%3D&amp;isrd=1&amp;youdao_bid=b46cf17c-1aaf-4e0a-b046-c18fffc158cf&amp;iid=%7B%227383588599025199180%22%3A1%7D&amp;sid=17836" target="_blank" class="youdao-recommended-ad clearfix"><span class="img" style="background-image: url(&quot;https://oimagec2.ydstatic.com/image?id=7383588599025199180&amp;product=adpublish&amp;w=320&amp;h=240&amp;sc=0&amp;rm=0&quot;);"></span> <div class="info"><span class="title">2019全新工作总结PPT模板免费下载！</span> <span class="intro">商务风PPT、工作汇报PPT、水墨画PPT，更多模板内容点击查看！</span> <span class="ad-badge">广告</span></div></a></div></div></div></div>

  <!-- 相关文章 -->
      <!-- 未登录用户 -->
      <div class="seo-recommended-notes">

            <div class="note ">
                            <a class="title" target="_blank" href="https://www.jianshu.com/p/fb7d48083e5e?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">Java面试宝典Beta5.0</a>
              <p class="description">pdf下载地址：Java面试宝典 第一章内容介绍	20 第二章JavaSE基础	21 一、Java面向对象	21 1. 面向对象都有哪些特性以及你对这些特性的理解	21 2. 访问权限修饰符public、private、protected, 以及不写（默认）时的区别(201...</p>
              <a class="author" target="_blank" href="https://www.jianshu.com/u/773a782d9d83?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <div class="avatar">
                  <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/e7eb1b5f-9375-4d65-a47f-f46719569b93" alt="48">
                </div>
                <span class="name">王震阳</span>
</a>            </div>

            <div class="note ">
                            <a class="title" target="_blank" href="https://www.jianshu.com/p/dad51f6c9c4d?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">Android - 收藏集  </a>
              <p class="description">Android 自定义View的各种姿势1 Activity的显示之ViewRootImpl详解 Activity的显示之ViewRootImpl初探 Activity的显示之Window和View Android系统的创世之初以及Activity的生命周期 图解Andro...</p>
              <a class="author" target="_blank" href="https://www.jianshu.com/u/e946d18f163c?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <div class="avatar">
                  <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/4-3397163ecdb3855a0a4139c34a695885.jpg" alt="48">
                </div>
                <span class="name">passiontim</span>
</a>            </div>

            <div class="note have-img">
              <a class="cover" target="_blank" href="https://www.jianshu.com/p/04b639b3fcb2?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/3871961-410fbc16f195f8f2.png" alt="240">
</a>              <a class="title" target="_blank" href="https://www.jianshu.com/p/04b639b3fcb2?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">Mobile BI 移动商务智能的身份认证</a>
              <p class="description">这篇文章介绍了Mobile BI(移动商务智能)使用过程中涉及的各种身份认证的方式，主要目的是对这些方式的原理进行理解，略少涉及这些原理在Mobile BI中的具体实现。 文章的具体内容包括：序言, IServer Authentication, Mobile Server...</p>
              <a class="author" target="_blank" href="https://www.jianshu.com/u/7c00618450ea?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <div class="avatar">
                  <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/ead736d2b013" alt="48">
                </div>
                <span class="name">雨_树</span>
</a>            </div>

            <div class="note have-img">
              <a class="cover" target="_blank" href="https://www.jianshu.com/p/08cc28921fd0?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/1233356-95b3b7bbd2228b52.png" alt="240">
</a>              <a class="title" target="_blank" href="https://www.jianshu.com/p/08cc28921fd0?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">8.6 Spring Boot集成Spring Security</a>
              <p class="description">8.6 Spring Boot集成Spring Security 开发Web应用，对页面的安全控制通常是必须的。比如：对于没有访问权限的用户需要转到登录表单页面。要实现访问控制的方法多种多样，可以通过Aop、拦截器实现，也可以通过框架实现，例如：Apache Shiro、S...</p>
              <a class="author" target="_blank" href="https://www.jianshu.com/u/c55c7a9c8de6?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <div class="avatar">
                  <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/7babd7d8-2ad8-489b-b739-68db16892840.jpg" alt="48">
                </div>
                <span class="name">一个会写诗的程序员</span>
</a>            </div>

            <div class="note ">
                            <a class="title" target="_blank" href="https://www.jianshu.com/p/4e28a33ffac6?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">Spring Security - 核心类简介 - 获得登录用户的相关信息（转）</a>
              <p class="description">核心类简介 目录 Authentication SecurityContextHolder AuthenticationManager和AuthenticationProvider3.1 认证成功后清除凭证 UserDetailsService4.1 JdbcDaoImpl...</p>
              <a class="author" target="_blank" href="https://www.jianshu.com/u/b54fc7c3fd96?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <div class="avatar">
                  <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/3c448a5756de.jpg" alt="48">
                </div>
                <span class="name">y0ngb1n</span>
</a>            </div>

            <div class="note ">
                            <a class="title" target="_blank" href="https://www.jianshu.com/p/b3fb6842904b?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">使用Masonry布局UITableViewCell的子控件的坑</a>
              <p class="description">/** * 要修改、设置子控件的frame时，都要在layoutSubviews方法中进行。 这个方法专门用来布局子控件，一般在这里设置子控件的frame，即在该方法中对子控件进行布局。当控件本身的尺寸发生改变的时候、当控件即将被展现出来的时候，系统会自动调 用这个方法 。...</p>
              <a class="author" target="_blank" href="https://www.jianshu.com/u/07c412bfff88?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <div class="avatar">
                  <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/f8531a04038e" alt="48">
                </div>
                <span class="name">斐然___FeiRan</span>
</a>            </div>

            <div class="note have-img">
              <a class="cover" target="_blank" href="https://www.jianshu.com/p/94c137bc8666?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/6035685-a616617d5c46ac3d.jpg" alt="240">
</a>              <a class="title" target="_blank" href="https://www.jianshu.com/p/94c137bc8666?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">十年增长十倍速</a>
              <p class="description">我不懂中彩票，中大奖的方法，但我有「长期致富」的秘诀，其实就是提升认知，坚持好的习惯，放弃坏的习惯。 我们若想改变自己的财富水平，就得设立类似「家庭总资产倍增」的计划，按照这个计划去做选择，做改变，做坚持。 我们为什么要改变自己的财富水平？因为年纪过了40，很多焦虑都会因为...</p>
              <a class="author" target="_blank" href="https://www.jianshu.com/u/cb01947f72ce?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <div class="avatar">
                  <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/4c6ae56f-a2b3-4309-94ba-e9735f24adf5.jpg" alt="48">
                </div>
                <span class="name">杨Sir杨光柱</span>
</a>            </div>

            <div class="note ">
                            <a class="title" target="_blank" href="https://www.jianshu.com/p/8280525704cd?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">《结构力思考》第三章读书笔记</a>
              <p class="description">纵向结构分层次 第一节 自上而下——疑问回答做分解 开会vs看电影 一，自上而下疑问回答做分解的两个步骤 第一步：设想问题，从对方角度出发的新模式 第二步：回答问题，提前想好答案事半功倍 二，设想问题，从对方角度出发的新模式 1转换以对方需求为中心的思维模式 2通过5W和2...</p>
              <a class="author" target="_blank" href="https://www.jianshu.com/u/11e08568e77a?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <div class="avatar">
                  <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/9-cceda3cf5072bcdd77e8ca4f21c40998.jpg" alt="48">
                </div>
                <span class="name">小秋在唱歌</span>
</a>            </div>

            <div class="note have-img">
              <a class="cover" target="_blank" href="https://www.jianshu.com/p/080f55720b3d?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/11176601-ee7178a968e1d244.jpg" alt="240">
</a>              <a class="title" target="_blank" href="https://www.jianshu.com/p/080f55720b3d?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">2018-04-06</a>
              <p class="description">自由是什么 自由是把该放的放下，该看开的看开 明知跟朋友吵架会分开 明知跟父母吵架最终还是父母所说的对 那何必跟朋友吵架，跟父母吵架呢 心放开点，做自己就好！</p>
              <a class="author" target="_blank" href="https://www.jianshu.com/u/96c9fb386449?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <div class="avatar">
                  <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/3c846311-9fe0-4163-871f-b803cc9f7b2d" alt="48">
                </div>
                <span class="name">遥望远方的她</span>
</a>            </div>

            <div class="note ">
                            <a class="title" target="_blank" href="https://www.jianshu.com/p/66911998d510?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">《泰坦尼克号》观后感</a>
              <p class="description">几年前看《泰坦尼克号》，我完全看不懂。最近又看一遍，看得我泪眼朦胧。因为，知道底子本是悲的，所以看的时候，心情格外柔软。 杰克赢了船票，那种兴高采烈，却不知道，前方却是死亡。年老的露丝回望年轻时的美丽，回望过往的繁华。让我感动的落泪，为的是仅有一次的生命。 年轻的露丝活在教...</p>
              <a class="author" target="_blank" href="https://www.jianshu.com/u/e65eac78991b?utm_campaign=maleskine&amp;utm_content=user&amp;utm_medium=seo_notes&amp;utm_source=recommendation">
                <div class="avatar">
                  <img src="./史上最简单的Spring Security总结——认证篇 - 简书_files/20f75393fc2f" alt="48">
                </div>
                <span class="name">源心爱</span>
</a>            </div>
      </div>
</div>

    <script type="application/json" data-name="page-data">{"user_signed_in":false,"locale":"zh-CN","os":"mac","read_mode":"day","read_font":"font2","note_show":{"is_author":false,"is_following_author":false,"is_liked_note":false,"follow_state":0,"uuid":"4f270a9c-5998-465c-8098-0318ca0ddb7c"},"note":{"id":23978218,"slug":"24c6a65c3913","user_id":8826822,"notebook_id":18417610,"commentable":true,"likes_count":18,"views_count":4622,"public_wordage":1135,"comments_count":0,"featured_comments_count":0,"total_rewards_count":0,"is_author":false,"paid_type":"free","paid":false,"paid_content_accessible":false,"author":{"nickname":"catalina_","total_wordage":15773,"followers_count":36,"total_likes_count":144}}}</script>
    
    <script src="./史上最简单的Spring Security总结——认证篇 - 简书_files/babel-polyfill-d171e3dec4b6c15634dd.js" crossorigin="anonymous"></script>
    <script src="./史上最简单的Spring Security总结——认证篇 - 简书_files/web-base-b92a6b195ddd667f15ff.js" crossorigin="anonymous"></script>
<script src="./史上最简单的Spring Security总结——认证篇 - 简书_files/web-46c6729d4d8cac92aed8.js" crossorigin="anonymous"></script>
    
    <script src="./史上最简单的Spring Security总结——认证篇 - 简书_files/entry-423d96b5f72345cfc64c.js" crossorigin="anonymous"></script>
    <script>
  (function(){
      var bp = document.createElement('script');
      var curProtocol = window.location.protocol.split(':')[0];
      if (curProtocol === 'https') {
          bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';
      }
      else {
          bp.src = 'http://push.zhanzhang.baidu.com/push.js';
      }
      var s = document.getElementsByTagName("script")[0];
      s.parentNode.insertBefore(bp, s);
  })();
</script>

  

<!----><!----></body></html>