<!DOCTYPE html>
<!-- saved from url=(0066)https://leokongwq.github.io/2018/05/12/spring-rest-controller.html -->
<html lang="zh-Hans" class=""><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

    <!--[if lt IE 9]>
        <style>body {display: none; background: none !important} </style>
        <meta http-equiv="Refresh" Content="0; url=//outdatedbrowser.com/" />
    <![endif]-->


<meta http-equiv="X-UA-Compatible" content="IE=edge, chrome=1">
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
<meta name="format-detection" content="telephone=no">
<meta name="author" content="kongwenqiang">



<meta name="description" content="前言Spring为开发REST服务提供一流的支持。在本文中，我们将使用Spring 4 @RestController注解开发基于Spring 4 MVC的RESTful JSON服务和RESTful XML服务。
Spring在内部使用HttpMessageConverters将响应转换为所需的格式[JSON / XML / etc ..]，这些格式基于类路径中可用的某些库，并可以选择使用请求中">
<meta property="og:type" content="article">
<meta property="og:title" content="基于Spring构建RESTFUL风格的controller">
<meta property="og:url" content="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html">
<meta property="og:site_name" content="戒修-沉迷技术的小沙弥">
<meta property="og:description" content="前言Spring为开发REST服务提供一流的支持。在本文中，我们将使用Spring 4 @RestController注解开发基于Spring 4 MVC的RESTful JSON服务和RESTful XML服务。
Spring在内部使用HttpMessageConverters将响应转换为所需的格式[JSON / XML / etc ..]，这些格式基于类路径中可用的某些库，并可以选择使用请求中">
<meta property="og:updated_time" content="2018-05-30T08:42:42.000Z">
<meta name="twitter:card" content="summary">
<meta name="twitter:title" content="基于Spring构建RESTFUL风格的controller">
<meta name="twitter:description" content="前言Spring为开发REST服务提供一流的支持。在本文中，我们将使用Spring 4 @RestController注解开发基于Spring 4 MVC的RESTful JSON服务和RESTful XML服务。
Spring在内部使用HttpMessageConverters将响应转换为所需的格式[JSON / XML / etc ..]，这些格式基于类路径中可用的某些库，并可以选择使用请求中">

<link rel="apple-touch-icon" href="https://leokongwq.github.io/apple-touch-icon.png">


    <link rel="alternate" href="https://leokongwq.github.io/atom.xml" title="戒修-沉迷技术的小沙弥" type="application/atom+xml">



    <link rel="shortcut icon" href="https://leokongwq.github.io/favicon.png">



    <link href="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/animate.min.css" rel="stylesheet">



    <link href="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/jquery.fancybox.min.css" rel="stylesheet">



    <script src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/pace.min.js"></script>
    <link href="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/pace-theme-minimal.css" rel="stylesheet">


<link rel="stylesheet" href="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/style.css">



<link href="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/font-awesome.min.css" rel="stylesheet">


<title>基于Spring构建RESTFUL风格的controller | 戒修-沉迷技术的小沙弥</title>

<script src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/jquery.min.js"></script>
<script src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/clipboard.min.js"></script>
<script src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/pace.min.js"></script>
<script src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/search.js"></script>
<script>
    var yiliaConfig = {
        fancybox: true,
        animate: true,
        isHome: false,
        isPost: true,
        isArchive: false,
        isTag: false,
        isCategory: false,
        fancybox_js: "//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js",
        scrollreveal: "//cdn.bootcss.com/scrollReveal.js/3.1.4/scrollreveal.min.js",
        search: true
    }
</script>


    <script> yiliaConfig.jquery_ui = [false]; </script>



    <script> yiliaConfig.rootUrl = "\/";</script>






<script src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/share.js"></script><script src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/embed.js" data-timestamp="1552356536938"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="main" src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/main.js"></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="/js/pc.js" src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/pc.js"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="//cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js" src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/jquery.fancybox.min.js"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="toc" src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/toc.js"></script><link rel="stylesheet" href="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/share_style0_24.css"><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="/js/search.js" src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/search.js"></script><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.9974049bf7b0591e5d4f055cb67f3ee3.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.880980e048a2432334f13013030456ac.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.7ca5005d1897180d07d928e89d2628be.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"><style type="text/css">.fancybox-margin{margin-right:10px;}</style><script src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/alfalfa_min.d078e4f2a4721192a99e02601a767617.js" async="" charset="UTF-8"></script></head>

<body class="   pace-done pace-done" style="background: url(&quot;/background/bg-4.jpg&quot;) 0% 0% / cover fixed;"><div id="MathJax_Message" style="display: none;"></div><div class="pace  pace-inactive pace-inactive"><div class="pace-progress" data-progress-text="100%" data-progress="99" style="transform: translate3d(100%, 0px, 0px);">
  <div class="pace-progress-inner"></div>
</div>
<div class="pace-activity"></div></div><div class="pace pace-active"><div class="pace-progress" data-progress-text="0%" data-progress="00" style="transform: translate3d(0%, 0px, 0px);">
  <div class="pace-progress-inner"></div>
</div>
<div class="pace-activity"></div></div>
  <div id="container">
    <div class="left-col">
    <div class="overlay" style="background-color: rgb(77, 77, 77); opacity: 0.3;"></div>
<div class="intrude-less">
    <header id="header" class="inner">
        <a href="https://leokongwq.github.io/" class="profilepic">
            <img src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/avatar.png" class="animated zoomIn">
        </a>
        <hgroup>
          <h1 class="header-author"><a href="https://leokongwq.github.io/">kongwenqiang</a></h1>
        </hgroup>

        
        <p class="header-subtitle">我喜欢GO</p>
        

        
            <form id="search-form">
            <input type="text" id="local-search-input" name="q" placeholder="search..." class="search form-control" autocomplete="off" autocorrect="off" searchonload="false">
            <i class="fa fa-times" onclick="resetSearch()"></i>
            </form>
            <div id="local-search-result"></div>
            <p class="no-result">No results found <i class="fa fa-spinner fa-pulse"></i></p>
        


        
            <div id="switch-btn" class="switch-btn">
                <div class="icon">
                    <div class="icon-ctn">
                        <div class="icon-wrap icon-house" data-idx="0">
                            <div class="birdhouse"></div>
                            <div class="birdhouse_holes"></div>
                        </div>
                        <div class="icon-wrap icon-ribbon hide" data-idx="1">
                            <div class="ribbon"></div>
                        </div>
                        
                        <div class="icon-wrap icon-link hide" data-idx="2">
                            <div class="loopback_l"></div>
                            <div class="loopback_r"></div>
                        </div>
                        
                        
                        <div class="icon-wrap icon-me hide" data-idx="3">
                            <div class="user"></div>
                            <div class="shoulder"></div>
                        </div>
                        
                    </div>
                    
                </div>
                <div class="tips-box hide">
                    <div class="tips-arrow"></div>
                    <ul class="tips-inner">
                        <li>菜单</li>
                        <li>标签</li>
                        
                        <li>友情链接</li>
                        
                        
                        <li>关于我</li>
                        
                    </ul>
                </div>
            </div>
        

        <div id="switch-area" class="switch-area">
            <div class="switch-wrap">
                <section class="switch-part switch-part1">
                    <nav class="header-menu">
                        <ul>
                        
                            <li><a href="https://leokongwq.github.io/">主页</a></li>
                        
                            <li><a href="https://leokongwq.github.io/archives/">所有文章</a></li>
                        
                            <li><a href="https://leokongwq.github.io/tags/">标签云</a></li>
                        
                            <li><a href="https://leokongwq.github.io/about/">关于我</a></li>
                        
                        </ul>
                    </nav>
                    <nav class="header-nav">
                        <ul class="social">
                            
                                <a class="fa Email" href="mailto:leokongwq@gmail.com" title="Email" target="_blank"></a>
                            
                                <a class="fa GitHub" href="https://github.com/leokongwq" title="GitHub" target="_blank"></a>
                            
                                <a class="fa RSS" href="https://leokongwq.github.io/atom.xml" title="RSS" target="_blank"></a>
                            
                        </ul>
                    </nav>
                </section>
                
                
                <section class="switch-part switch-part2">
                    <div class="widget tagcloud" id="js-tagcloud">
                        <ul class="tag-list"><li class="tag-list-item"><a class="tag-list-link color3 color6" href="https://leokongwq.github.io/tags/AOP/">AOP</a></li><li class="tag-list-item"><a class="tag-list-link color4 color6 color3" href="https://leokongwq.github.io/tags/ActiveMQ/">ActiveMQ</a></li><li class="tag-list-item"><a class="tag-list-link color6 color4 color0" href="https://leokongwq.github.io/tags/ActiveQM/">ActiveQM</a></li><li class="tag-list-item"><a class="tag-list-link color6 color2 color0" href="https://leokongwq.github.io/tags/DDD/">DDD</a></li><li class="tag-list-item"><a class="tag-list-link color5 color1 color6" href="https://leokongwq.github.io/tags/DNS/">DNS</a></li><li class="tag-list-item"><a class="tag-list-link color5 color3" href="https://leokongwq.github.io/tags/GO/">GO</a></li><li class="tag-list-item"><a class="tag-list-link color2 color3 color1" href="https://leokongwq.github.io/tags/JDK8/">JDK8</a></li><li class="tag-list-item"><a class="tag-list-link color1 color2 color3" href="https://leokongwq.github.io/tags/MQ/">MQ</a></li><li class="tag-list-item"><a class="tag-list-link color6 color1 color2" href="https://leokongwq.github.io/tags/NET/">NET</a></li><li class="tag-list-item"><a class="tag-list-link color2 color5" href="https://leokongwq.github.io/tags/Nginx/">Nginx</a></li><li class="tag-list-item"><a class="tag-list-link color5 color4" href="https://leokongwq.github.io/tags/OS/">OS</a></li><li class="tag-list-item"><a class="tag-list-link color4 color1 color6" href="https://leokongwq.github.io/tags/Openresy/">Openresy</a></li><li class="tag-list-item"><a class="tag-list-link color1 color3 color0 color4" href="https://leokongwq.github.io/tags/REST/">REST</a></li><li class="tag-list-item"><a class="tag-list-link color2 color1 color4" href="https://leokongwq.github.io/tags/RestTemplate/">RestTemplate</a></li><li class="tag-list-item"><a class="tag-list-link color3 color4 color2" href="https://leokongwq.github.io/tags/TCP/">TCP</a></li><li class="tag-list-item"><a class="tag-list-link color6 color1 color2" href="https://leokongwq.github.io/tags/algo/">algo</a></li><li class="tag-list-item"><a class="tag-list-link color6 color0 color5" href="https://leokongwq.github.io/tags/aop/">aop</a></li><li class="tag-list-item"><a class="tag-list-link color4 color1 color6" href="https://leokongwq.github.io/tags/cache/">cache</a></li><li class="tag-list-item"><a class="tag-list-link color1 color3 color0 color5" href="https://leokongwq.github.io/tags/centos/">centos</a></li><li class="tag-list-item"><a class="tag-list-link color3 color5" href="https://leokongwq.github.io/tags/computer/">computer</a></li><li class="tag-list-item"><a class="tag-list-link color0 color1 color6 color5" href="https://leokongwq.github.io/tags/consul/">consul</a></li><li class="tag-list-item"><a class="tag-list-link color6 color1" href="https://leokongwq.github.io/tags/curator/">curator</a></li><li class="tag-list-item"><a class="tag-list-link color1 color4 color3" href="https://leokongwq.github.io/tags/curl/">curl</a></li><li class="tag-list-item"><a class="tag-list-link color5 color0 color1" href="https://leokongwq.github.io/tags/devops/">devops</a></li><li class="tag-list-item"><a class="tag-list-link color5 color6 color2" href="https://leokongwq.github.io/tags/devtools/">devtools</a></li><li class="tag-list-item"><a class="tag-list-link color3 color1 color5 color2" href="https://leokongwq.github.io/tags/github/">github</a></li><li class="tag-list-item"><a class="tag-list-link color6 color4 color0" href="https://leokongwq.github.io/tags/go/">go</a></li><li class="tag-list-item"><a class="tag-list-link color0 color5" href="https://leokongwq.github.io/tags/golang/">golang</a></li><li class="tag-list-item"><a class="tag-list-link color5 color0 color2" href="https://leokongwq.github.io/tags/gossip/">gossip</a></li><li class="tag-list-item"><a class="tag-list-link color6 color3 color2" href="https://leokongwq.github.io/tags/guava/">guava</a></li><li class="tag-list-item"><a class="tag-list-link color6 color2 color3 color1" href="https://leokongwq.github.io/tags/hadoop/">hadoop</a></li><li class="tag-list-item"><a class="tag-list-link color4 color5 color1" href="https://leokongwq.github.io/tags/hexo/">hexo</a></li><li class="tag-list-item"><a class="tag-list-link color6 color4 color1" href="https://leokongwq.github.io/tags/hive/">hive</a></li><li class="tag-list-item"><a class="tag-list-link color6 color5 color0" href="https://leokongwq.github.io/tags/http/">http</a></li><li class="tag-list-item"><a class="tag-list-link color6 color0 color3" href="https://leokongwq.github.io/tags/java/">java</a></li><li class="tag-list-item"><a class="tag-list-link color0 color6 color2 color5" href="https://leokongwq.github.io/tags/java8/">java8</a></li><li class="tag-list-item"><a class="tag-list-link color6 color1 color0 color5" href="https://leokongwq.github.io/tags/jdk/">jdk</a></li><li class="tag-list-item"><a class="tag-list-link color6 color2 color1" href="https://leokongwq.github.io/tags/jekyll/">jekyll</a></li><li class="tag-list-item"><a class="tag-list-link color2 color4 color1" href="https://leokongwq.github.io/tags/jquery/">jquery</a></li><li class="tag-list-item"><a class="tag-list-link color2 color0 color3" href="https://leokongwq.github.io/tags/json/">json</a></li><li class="tag-list-item"><a class="tag-list-link color6 color3 color0" href="https://leokongwq.github.io/tags/jta/">jta</a></li><li class="tag-list-item"><a class="tag-list-link color5 color2 color6 color3" href="https://leokongwq.github.io/tags/jvm/">jvm</a></li><li class="tag-list-item"><a class="tag-list-link color3 color4 color6" href="https://leokongwq.github.io/tags/kafka/">kafka</a></li><li class="tag-list-item"><a class="tag-list-link color0 color2 color3 color6" href="https://leokongwq.github.io/tags/linux/">linux</a></li><li class="tag-list-item"><a class="tag-list-link color3 color4 color2 color5" href="https://leokongwq.github.io/tags/lua/">lua</a></li><li class="tag-list-item"><a class="tag-list-link color3 color2 color5" href="https://leokongwq.github.io/tags/mac/">mac</a></li><li class="tag-list-item"><a class="tag-list-link color1 color6 color5" href="https://leokongwq.github.io/tags/maven/">maven</a></li><li class="tag-list-item"><a class="tag-list-link color1 color5 color2 color3" href="https://leokongwq.github.io/tags/microservices/">microservices</a></li><li class="tag-list-item"><a class="tag-list-link color3 color0 color4" href="https://leokongwq.github.io/tags/mongodb/">mongodb</a></li><li class="tag-list-item"><a class="tag-list-link color4 color1" href="https://leokongwq.github.io/tags/mq/">mq</a></li><li class="tag-list-item"><a class="tag-list-link color2 color5 color6 color3" href="https://leokongwq.github.io/tags/mysql/">mysql</a></li><li class="tag-list-item"><a class="tag-list-link color6 color2 color0" href="https://leokongwq.github.io/tags/netty/">netty</a></li><li class="tag-list-item"><a class="tag-list-link color0 color4 color3 color5" href="https://leokongwq.github.io/tags/nginx/">nginx</a></li><li class="tag-list-item"><a class="tag-list-link color5 color6" href="https://leokongwq.github.io/tags/node/">node</a></li><li class="tag-list-item"><a class="tag-list-link color5 color3 color6" href="https://leokongwq.github.io/tags/nodejs/">nodejs</a></li><li class="tag-list-item"><a class="tag-list-link color1 color4 color6" href="https://leokongwq.github.io/tags/npm/">npm</a></li><li class="tag-list-item"><a class="tag-list-link color2 color5 color6" href="https://leokongwq.github.io/tags/oauth2/">oauth2</a></li><li class="tag-list-item"><a class="tag-list-link color2 color5" href="https://leokongwq.github.io/tags/openresty/">openresty</a></li><li class="tag-list-item"><a class="tag-list-link color3 color5 color0 color1" href="https://leokongwq.github.io/tags/osx/">osx</a></li><li class="tag-list-item"><a class="tag-list-link color2 color0 color5" href="https://leokongwq.github.io/tags/pig/">pig</a></li><li class="tag-list-item"><a class="tag-list-link color5 color0 color6 color3" href="https://leokongwq.github.io/tags/python/">python</a></li><li class="tag-list-item"><a class="tag-list-link color1 color0 color6" href="https://leokongwq.github.io/tags/redis/">redis</a></li><li class="tag-list-item"><a class="tag-list-link color5 color1 color4 color6" href="https://leokongwq.github.io/tags/resin/">resin</a></li><li class="tag-list-item"><a class="tag-list-link color1 color0 color5" href="https://leokongwq.github.io/tags/servlet3/">servlet3</a></li><li class="tag-list-item"><a class="tag-list-link color4 color6 color3" href="https://leokongwq.github.io/tags/soa/">soa</a></li><li class="tag-list-item"><a class="tag-list-link color3 color5 color6 color1" href="https://leokongwq.github.io/tags/spring/">spring</a></li><li class="tag-list-item"><a class="tag-list-link color4 color6 color1" href="https://leokongwq.github.io/tags/spring-mvc/">spring-mvc</a></li><li class="tag-list-item"><a class="tag-list-link color4 color3 color0" href="https://leokongwq.github.io/tags/springMVC/">springMVC</a></li><li class="tag-list-item"><a class="tag-list-link color2 color0 color1" href="https://leokongwq.github.io/tags/springboot/">springboot</a></li><li class="tag-list-item"><a class="tag-list-link color0 color4 color6" href="https://leokongwq.github.io/tags/springcloud/">springcloud</a></li><li class="tag-list-item"><a class="tag-list-link color2 color1 color0" href="https://leokongwq.github.io/tags/sqoop/">sqoop</a></li><li class="tag-list-item"><a class="tag-list-link color5 color3 color4 color1" href="https://leokongwq.github.io/tags/ssh/">ssh</a></li><li class="tag-list-item"><a class="tag-list-link color6 color4 color1 color0" href="https://leokongwq.github.io/tags/struts2/">struts2</a></li><li class="tag-list-item"><a class="tag-list-link color5 color3 color4" href="https://leokongwq.github.io/tags/tomcat/">tomcat</a></li><li class="tag-list-item"><a class="tag-list-link color4 color1 color6 color2" href="https://leokongwq.github.io/tags/uml/">uml</a></li><li class="tag-list-item"><a class="tag-list-link color0 color4 color5" href="https://leokongwq.github.io/tags/vert-x/">vert.x</a></li><li class="tag-list-item"><a class="tag-list-link color4 color0 color6" href="https://leokongwq.github.io/tags/vim/">vim</a></li><li class="tag-list-item"><a class="tag-list-link color1 color3 color0" href="https://leokongwq.github.io/tags/web/">web</a></li><li class="tag-list-item"><a class="tag-list-link color5 color4 color0" href="https://leokongwq.github.io/tags/web%E5%AE%89%E5%85%A8/">web安全</a></li><li class="tag-list-item task-list check"><a class="tag-list-link color2 color5 color4 color0" href="https://leokongwq.github.io/tags/xa/">xa</a></li><li class="tag-list-item task-list check"><a class="tag-list-link color4 color0 color3 color2" href="https://leokongwq.github.io/tags/xml/">xml</a></li><li class="tag-list-item"><a class="tag-list-link color6 color0 color5 color3" href="https://leokongwq.github.io/tags/zookeeper/">zookeeper</a></li><li class="tag-list-item"><a class="tag-list-link color5 color1 color2 color6" href="https://leokongwq.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/">分布式</a></li><li class="tag-list-item"><a class="tag-list-link color6 color5 color0" href="https://leokongwq.github.io/tags/%E5%B9%B6%E5%8F%91/">并发</a></li><li class="tag-list-item"><a class="tag-list-link color0 color1 color3 color4" href="https://leokongwq.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/">微服务</a></li><li class="tag-list-item"><a class="tag-list-link color6 color5 color1" href="https://leokongwq.github.io/tags/%E6%9E%B6%E6%9E%84/">架构</a></li><li class="tag-list-item"><a class="tag-list-link color4 color3 color1 color5" href="https://leokongwq.github.io/tags/%E7%AE%97%E6%B3%95/">算法</a></li><li class="tag-list-item"><a class="tag-list-link color2 color5 color1" href="https://leokongwq.github.io/tags/%E8%AF%91/">译</a></li><li class="tag-list-item"><a class="tag-list-link color2 color5 color1" href="https://leokongwq.github.io/tags/%E9%9A%8F%E7%AC%94/">随笔</a></li><li class="tag-list-item"><a class="tag-list-link color3 color6 color4 color0" href="https://leokongwq.github.io/tags/%E9%9D%A2%E8%AF%95/">面试</a></li></ul>
                    </div>
                </section>
                
                
                
                <section class="switch-part switch-part3">
                    <div id="js-friends">
                    
                      <a class="main-nav-link switch-friends-link" href="http://www.imhan.com/" target="_blank">Hanny's Blog</a>
                    
                      <a class="main-nav-link switch-friends-link" href="http://www.chepoo.com/" target="_blank">IT技术精华网</a>
                    
                    </div>
                </section>
                

                
                
                <section class="switch-part switch-part4">
                
                    <div id="js-aboutme">只想做个好程序员!</div>
                </section>
                
            </div>
        </div>
    </header>                
</div>
    </div>
    <div class="mid-col">
      <nav id="mobile-nav">
      <div class="overlay" style="background-color: rgb(77, 77, 77); opacity: 0.7;">
          <div class="slider-trigger"></div>
          <h1 class="header-author js-mobile-header hide"><a href="https://leokongwq.github.io/" title="回到主页">kongwenqiang</a></h1>
      </div>
    <div class="intrude-less">
        <header id="header" class="inner">
            <a href="https://leokongwq.github.io/" class="profilepic">
                <img src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/avatar.png" class="animated zoomIn">
            </a>
            <hgroup>
              <h1 class="header-author"><a href="https://leokongwq.github.io/" title="回到主页">kongwenqiang</a></h1>
            </hgroup>
            
            <p class="header-subtitle">我喜欢GO</p>
            
            <nav class="header-menu">
                <ul>
                
                    <li><a href="https://leokongwq.github.io/">主页</a></li>
                
                    <li><a href="https://leokongwq.github.io/archives/">所有文章</a></li>
                
                    <li><a href="https://leokongwq.github.io/tags/">标签云</a></li>
                
                    <li><a href="https://leokongwq.github.io/about/">关于我</a></li>
                
                <div class="clearfix"></div>
                </ul>
            </nav>
            <nav class="header-nav">
                        <ul class="social">
                            
                                <a class="fa Email" target="_blank" href="mailto:leokongwq@gmail.com" title="Email"></a>
                            
                                <a class="fa GitHub" target="_blank" href="https://github.com/leokongwq" title="GitHub"></a>
                            
                                <a class="fa RSS" target="_blank" href="https://leokongwq.github.io/atom.xml" title="RSS"></a>
                            
                        </ul>
            </nav>
        </header>                
    </div>
    <link class="menu-list" tags="标签" friends="友情链接" about="关于我">
</nav>
      <div class="body-wrap"><article id="post-spring-rest-controller" class="article article-type-post" itemscope="" itemprop="blogPost" style="opacity: 1;">
  
    <div class="article-meta">
      <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html" class="article-date">
      <time datetime="2018-05-12T15:23:46.000Z" itemprop="datePublished">2018-05-12</time>
</a>


    </div>
  
  <div class="article-inner">
    
      <input type="hidden" class="isFancy">
    
    
      <header class="article-header">
        
  
    <h1 class="article-title" itemprop="name">
      基于Spring构建RESTFUL风格的controller
    </h1>
  

      </header>
      
      <div class="article-info article-info-post">
        
    <div class="article-category tagcloud">
    <a class="color0" href="https://leokongwq.github.io/categories/web/">web</a>
    </div>


        
    <div class="article-tag tagcloud">
        <ul class="article-tag-list"><li class="article-tag-list-item"><a class="article-tag-list-link color3 color6 color1" href="https://leokongwq.github.io/tags/spring/">spring</a></li></ul>
    </div>

        <div class="clearfix"></div>
      </div>
      
    
    <div class="article-entry" itemprop="articleBody">
      
          
        <h3 id="前言"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E5%89%8D%E8%A8%80" class="headerlink" title="前言"></a>前言</h3><p>Spring为开发REST服务提供一流的支持。在本文中，我们将使用Spring 4 <code>@RestController</code>注解开发基于Spring 4 MVC的RESTful JSON服务和RESTful XML服务。</p>
<p>Spring在内部使用<code>HttpMessageConverters</code>将响应转换为所需的格式[JSON / XML / etc ..]，这些格式基于类路径中可用的某些库，并可以选择使用请求中的<code>Accept Headers</code>。</p>
<p>为了服务JSON，我们将使用Jackson库[jackson-databind.jar]。 对于XML，我们将使用Jackson XML扩展[jackson-dataformat-xml.jar]。 只有在类路径中存在这些库才会触发Spring以所需格式转换输出。 此外，我们将进一步通过使用JAXB批注注释域类来支持XML，以防Jackson的XML扩展库由于某种原因而不可用。</p>
<p><strong>注意</strong>：如果你通过在浏览器中输入网址发送请求，则可以添加后缀[.xml / .json]，以帮助确定要提供的内容的类型。</p>
<a id="more"></a>
<blockquote>
<p>文章使用的是SpringBoot 1.5.2版本，并使用MAVEN3管理项目。</p>
</blockquote>
<h3 id="第一步-添加实体类"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E7%AC%AC%E4%B8%80%E6%AD%A5-%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E7%B1%BB" class="headerlink" title="第一步 添加实体类"></a>第一步 添加实体类</h3><figure class="highlight java"><div class="table-area"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>{</span>
<span class="line"> </span>
<span class="line">    String name;</span>
<span class="line">    String text;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String name, String text)</span> </span>{</span>
<span class="line">        <span class="keyword">this</span>.name = name;</span>
<span class="line">        <span class="keyword">this</span>.text = text;</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span>
<span class="line">        <span class="keyword">return</span> name;</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>{</span>
<span class="line">        <span class="keyword">return</span> text;</span>
<span class="line">    }</span>
<span class="line">}</span>
</pre></td></tr></tbody></table></div></figure>
<h3 id="第二步-添加-Controller"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E6%B7%BB%E5%8A%A0-Controller" class="headerlink" title="第二步 添加 Controller"></a>第二步 添加 Controller</h3><figure class="highlight java"><div class="table-area"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.domain.Message;</span>
<span class="line"> </span>
<span class="line"><span class="meta">@RestController</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldRestController</span> </span>{</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">welcome</span><span class="params">()</span> </span>{</span>
<span class="line">        <span class="keyword">return</span> <span class="string">"Welcome to RestTemplate Example."</span>;</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello/{player}"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">message</span><span class="params">(@PathVariable String player)</span> </span>{</span>
<span class="line">        Message msg = <span class="keyword">new</span> Message(player, <span class="string">"Hello "</span> + player);</span>
<span class="line">        <span class="keyword">return</span> msg;</span>
<span class="line">    }</span>
<span class="line">}</span>
</pre></td></tr></tbody></table></div></figure>
<p>如果jackson-dataformat-xml.jar不可用，并且您仍希望获得XML响应，则只需在模型类（Message）上添加JAXB注释，即可启用XML输出支持。 以下是相同的演示</p>
<figure class="highlight java"><div class="table-area"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlElement;</span>
<span class="line"><span class="keyword">import</span> javax.xml.bind.annotation.XmlRootElement;</span>
<span class="line"></span>
<span class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"player"</span>)</span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>{</span>
<span class="line"> </span>
<span class="line">    String name;</span>
<span class="line">    String text;</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">()</span></span>{</span>
<span class="line">         </span>
<span class="line">    }</span>
<span class="line">     </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String name, String text)</span> </span>{</span>
<span class="line">        <span class="keyword">this</span>.name = name;</span>
<span class="line">        <span class="keyword">this</span>.text = text;</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@XmlElement</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span>
<span class="line">        <span class="keyword">return</span> name;</span>
<span class="line">    }</span>
<span class="line">     </span>
<span class="line">    <span class="meta">@XmlElement</span></span>
<span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getText</span><span class="params">()</span> </span>{</span>
<span class="line">        <span class="keyword">return</span> text;</span>
<span class="line">    }</span>
<span class="line"></span>
<span class="line">}</span>
</pre></td></tr></tbody></table></div></figure>
<p>有了以上的准备，你可以通过下面的请求url来获取指定格式的响应：</p>
<h4 id="json"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#json" class="headerlink" title="json"></a>json</h4><p><a href="http://127.0.0.1:2223/hello/tom" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom</a><br><a href="http://127.0.0.1:2223/hello/tom.json" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom.json</a></p>
<h4 id="xml"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#xml" class="headerlink" title="xml"></a>xml</h4><p><a href="http://127.0.0.1:2223/hello/tom" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom</a> 添加请求头 Accept:application/xml</p>
<p>或 </p>
<p><a href="http://127.0.0.1:2223/hello/tom.xml" target="_blank" rel="external">http://127.0.0.1:2223/hello/tom.xml</a></p>
<h3 id="ContentNegotiationStrategy"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#ContentNegotiationStrategy" class="headerlink" title="ContentNegotiationStrategy"></a>ContentNegotiationStrategy</h3><p><code>ContentNegotiationStrategy</code>是一个策略接口，作用是将给定的请求解析为媒体类型（<code>MediaType</code>）列表。</p>
<p>它有两个重要的实现类，如下所示</p>
<h4 id="ServletPathExtensionContentNegotiationStrategy"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#ServletPathExtensionContentNegotiationStrategy" class="headerlink" title="ServletPathExtensionContentNegotiationStrategy"></a>ServletPathExtensionContentNegotiationStrategy</h4><p>根据请求路径的扩展名来解析</p>
<h4 id="HeaderContentNegotiationStrategy"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#HeaderContentNegotiationStrategy" class="headerlink" title="HeaderContentNegotiationStrategy"></a>HeaderContentNegotiationStrategy</h4><p>根据请求头<code>Accept</code>来解析</p>
<blockquote>
<p>Spring 在内部会根据请求的MediaType信息和HttpMessageConverter支持的MediaType进行匹配，如果能找到支持该请求的MediaType的HttpMessageConverter，则利用该HttpMessageConverter输出响应。</p>
</blockquote>
<h3 id="REST快速理解"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#REST%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3" class="headerlink" title="REST快速理解"></a>REST快速理解</h3><p>REST代表<code>Representational State Transfer</code>。它是一种可用于设计Web服务的架构风格，可从各种客户端使用。 其核心思想是，不使用诸如CORBA，RPC或SOAP之类的复杂机制来连接机器，而是使用简单的HTTP来进行调用。</p>
<p>在基于REST的设计中，对资源的操作是通过一组通用的动词来实现：</p>
<ul>
<li>创建资源：应该使用 HTTP POST</li>
<li>检索资源：应使用 HTTP GET</li>
<li>更新资源：应该使用 HTTP PUT</li>
<li>删除资源：应该使用 HTTP DELETE</li>
</ul>
<p>这意味着，作为REST服务开发人员或调用方，你应该遵守上述标准。</p>
<p>通常基于Rest的Web服务返回JSON或XML作为响应，尽管它不仅限于这些类型。 客户端可以指定（使用HTTP Accept头）他们感兴趣的资源类型，服务器可以返回资源，指定它正在服务的资源的Content-Type。 想要详细了解REST，这个<a href="https://stackoverflow.com/questions/671118/what-exactly-is-restful-programming" target="_blank" rel="external">StackOverflow</a>是必须要阅读的。</p>
<h3 id="RestController"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#RestController" class="headerlink" title="RestController"></a>RestController</h3><p>以下是一个基于Rest的<code>Contrller</code>，实现了REST API。 </p>
<p>该<code>Contrller</code>是提供了如下的API：</p>
<ul>
<li>GET request to /api/user/ returns a list of users</li>
<li>GET request to /api/user/1 returns the user with ID 1</li>
<li>POST request to /api/user/ with a user object as JSON creates a new user</li>
<li>PUT request to /api/user/3 with a user object as JSON updates the user with ID 3</li>
<li>DELETE request to /api/user/4 deletes the user with ID 4</li>
<li>DELETE request to /api/user/ deletes all the users</li>
</ul>
<figure class="highlight java"><div class="table-area"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
<span class="line">84</span>
<span class="line">85</span>
<span class="line">86</span>
<span class="line">87</span>
<span class="line">88</span>
<span class="line">89</span>
<span class="line">90</span>
<span class="line">91</span>
<span class="line">92</span>
<span class="line">93</span>
<span class="line">94</span>
<span class="line">95</span>
<span class="line">96</span>
<span class="line">97</span>
<span class="line">98</span>
<span class="line">99</span>
<span class="line">100</span>
<span class="line">101</span>
<span class="line">102</span>
<span class="line">103</span>
<span class="line">104</span>
<span class="line">105</span>
<span class="line">106</span>
<span class="line">107</span>
<span class="line">108</span>
<span class="line">109</span>
<span class="line">110</span>
<span class="line">111</span>
<span class="line">112</span>
<span class="line">113</span>
<span class="line">114</span>
<span class="line">115</span>
<span class="line">116</span>
<span class="line">117</span>
<span class="line">118</span>
<span class="line">119</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span>
<span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span>
<span class="line"><span class="keyword">import</span> org.springframework.web.util.UriComponentsBuilder;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.model.User;</span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.service.UserService;</span>
<span class="line"> </span>
<span class="line"><span class="meta">@RestController</span></span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldRestController</span> </span>{</span>
<span class="line"> </span>
<span class="line">    <span class="meta">@Autowired</span></span>
<span class="line">    UserService userService;  <span class="comment">//Service which will do all data retrieval/manipulation work</span></span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//-------------------Retrieve All Users--------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/"</span>, method = RequestMethod.GET)</span>
<span class="line">    <span class="keyword">public</span> ResponseEntity&lt;List&lt;User&gt;&gt; listAllUsers() {</span>
<span class="line">        List&lt;User&gt; users = userService.findAllUsers();</span>
<span class="line">        <span class="keyword">if</span>(users.isEmpty()){</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;List&lt;User&gt;&gt;(HttpStatus.NO_CONTENT);<span class="comment">//You many decide to return HttpStatus.NOT_FOUND</span></span>
<span class="line">        }</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;List&lt;User&gt;&gt;(users, HttpStatus.OK);</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="comment">//-------------------Retrieve Single User--------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/{id}"</span>, method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>{</span>
<span class="line">        System.out.println(<span class="string">"Fetching User with id "</span> + id);</span>
<span class="line">        User user = userService.findById(id);</span>
<span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) {</span>
<span class="line">            System.out.println(<span class="string">"User with id "</span> + id + <span class="string">" not found"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</span>
<span class="line">        }</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(user, HttpStatus.OK);</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//-------------------Create a User--------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/"</span>, method = RequestMethod.POST)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">createUser</span><span class="params">(@RequestBody User user,    UriComponentsBuilder ucBuilder)</span> </span>{</span>
<span class="line">        System.out.println(<span class="string">"Creating User "</span> + user.getName());</span>
<span class="line"> </span>
<span class="line">        <span class="keyword">if</span> (userService.isUserExist(user)) {</span>
<span class="line">            System.out.println(<span class="string">"A User with name "</span> + user.getName() + <span class="string">" already exist"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Void&gt;(HttpStatus.CONFLICT);</span>
<span class="line">        }</span>
<span class="line"> </span>
<span class="line">        userService.saveUser(user);</span>
<span class="line"> </span>
<span class="line">        HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span>
<span class="line">        headers.setLocation(ucBuilder.path(<span class="string">"/user/{id}"</span>).buildAndExpand(user.getId()).toUri());</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;Void&gt;(headers, HttpStatus.CREATED);</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//------------------- Update a User --------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/{id}"</span>, method = RequestMethod.PUT)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">updateUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id, @RequestBody User user) </span>{</span>
<span class="line">        System.out.println(<span class="string">"Updating User "</span> + id);</span>
<span class="line">         </span>
<span class="line">        User currentUser = userService.findById(id);</span>
<span class="line">         </span>
<span class="line">        <span class="keyword">if</span> (currentUser==<span class="keyword">null</span>) {</span>
<span class="line">            System.out.println(<span class="string">"User with id "</span> + id + <span class="string">" not found"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</span>
<span class="line">        }</span>
<span class="line"> </span>
<span class="line">        currentUser.setName(user.getName());</span>
<span class="line">        currentUser.setAge(user.getAge());</span>
<span class="line">        currentUser.setSalary(user.getSalary());</span>
<span class="line">         </span>
<span class="line">        userService.updateUser(currentUser);</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(currentUser, HttpStatus.OK);</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">    <span class="comment">//------------------- Delete a User --------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/{id}"</span>, method = RequestMethod.DELETE)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">deleteUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> <span class="keyword">long</span> id) </span>{</span>
<span class="line">        System.out.println(<span class="string">"Fetching &amp; Deleting User with id "</span> + id);</span>
<span class="line"> </span>
<span class="line">        User user = userService.findById(id);</span>
<span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) {</span>
<span class="line">            System.out.println(<span class="string">"Unable to delete. User with id "</span> + id + <span class="string">" not found"</span>);</span>
<span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NOT_FOUND);</span>
<span class="line">        }</span>
<span class="line"> </span>
<span class="line">        userService.deleteUserById(id);</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NO_CONTENT);</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">     </span>
<span class="line">    <span class="comment">//------------------- Delete All Users --------------------------------------------------------</span></span>
<span class="line">     </span>
<span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/"</span>, method = RequestMethod.DELETE)</span>
<span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title">deleteAllUsers</span><span class="params">()</span> </span>{</span>
<span class="line">        System.out.println(<span class="string">"Deleting All Users"</span>);</span>
<span class="line"> </span>
<span class="line">        userService.deleteAllUsers();</span>
<span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;User&gt;(HttpStatus.NO_CONTENT);</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">}</span>
</pre></td></tr></tbody></table></div></figure>
<h4 id="详解"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E8%AF%A6%E8%A7%A3" class="headerlink" title="详解"></a>详解</h4><ul>
<li>@RestController：首先，我们使用Spring 4的新的<code>@RestController</code>注解。此注释避免我们在每个方法上添加<code>@ResponseBody``注解。在Spring-MVC内部下，</code>@RestController<code>本身是用</code>@ResponseBody<code>注解的，可以被认为是</code>@Controller<code>和</code>@ResponseBody`的组合。</li>
<li>@RequestBody：如果一个方法参数使用<code>@RequestBody</code>进行注解，那么Spring会将传入的HTTP请求主体（针对该方法的@RequestMapping中提到的URL）绑定到该参数。原理是Spring内部使用<code>HttpMessageConverter</code>将HTTP请求体转换为域对象[将请求主体反序列化为域对象]，这是基于请求中存在的<code>ACCEPT</code>或<code>Content-Type</code>头。</li>
<li>@ResponseBody：如果一个方法用@ResponseBody注解，Spring会将返回值绑定到传出的HTTP响应正文。在这样做的过程中，Spring将在内部使用<code>HttpMessageConverter</code>将返回值转换为HTTP响应主体[将对象序列化到响应主体]，并基于请求HTTP头中的Content-Type。如前所述，在Spring 4中，你可能会停止使用此注释。</li>
<li>ResponseEntity 它代表整个HTTP响应。好的一点是你可以控制任何进入它的东西。你可以指定状态码，标题和正文。它带有几个构造函数来携带您想要在HTTP响应中发送的信息。</li>
<li>@PathVariable：这个注解表示一个方法参数应该绑定到一个URI模板变量[‘}’]。基本上，<code>@RestController</code>，<code>@RequestBody</code>，<code>ResponseEntity</code>和<code>@PathVariable</code>是你在Spring 4中实现一个REST API所需要知道的。另外，spring提供了几个支持类来帮助你实现一些自定义的东西。</li>
<li>MediaType：使用<code>@RequestMapping</code>注释，你可以另外指定要通过特定控制器方法生成或使用的<code>MediaType</code>（使用生成或消费属性），以进一步缩小映射范围。</li>
</ul>
<h3 id="使用RestTemplate编写REST客户端"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E4%BD%BF%E7%94%A8RestTemplate%E7%BC%96%E5%86%99REST%E5%AE%A2%E6%88%B7%E7%AB%AF" class="headerlink" title="使用RestTemplate编写REST客户端"></a>使用RestTemplate编写REST客户端</h3><p>PostMan是一个很棒用来测试Rest API的客户端。 但是，如果你想要在应用程序中调用基于REST的Web服务，则需要为你的应用程序提供REST客户端。 最受欢迎的HTTP客户端之一是Apache HttpComponents HttpClient。 但是，该客户端提供的功能过于基础，需要自己编写大量符合REST风格的代码。</p>
<p>Spring提供的RestTemplate提供了更高级别的方法，这些方法对应于六种主要的HTTP方法中的每一种，这些方法使得调用许多RESTful服务只需一行代码，并成为实施REST的最佳实践。</p>
<p>下面显示了HTTP方法和相应的RestTemplate方法来处理这种类型的HTTP请求。</p>
<p>HTTP 方法和 RestTemplate 方法对应关系:</p>
<ul>
<li>HTTP GET : getForObject, getForEntity</li>
<li>HTTP PUT : put(String url, Object request, String…​urlVariables)</li>
<li>HTTP DELETE : delete</li>
<li>HTTP POST : postForLocation(String url, Object request, String…​ urlVariables), postForObject(String url, Object request, Class responseType, String…​ uriVariables)</li>
<li>HTTP HEAD : headForHeaders(String url, String…​ urlVariables)</li>
<li>HTTP OPTIONS : optionsForAllow(String url, String…​ urlVariables)</li>
<li>HTTP PATCH and others : exchange execute</li>
</ul>
<h4 id="自定义REST客户端，使用先前创建的REST服务"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E8%87%AA%E5%AE%9A%E4%B9%89REST%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%85%88%E5%89%8D%E5%88%9B%E5%BB%BA%E7%9A%84REST%E6%9C%8D%E5%8A%A1" class="headerlink" title="自定义REST客户端，使用先前创建的REST服务"></a>自定义REST客户端，使用先前创建的REST服务</h4><figure class="highlight java"><div class="table-area"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
<span class="line">33</span>
<span class="line">34</span>
<span class="line">35</span>
<span class="line">36</span>
<span class="line">37</span>
<span class="line">38</span>
<span class="line">39</span>
<span class="line">40</span>
<span class="line">41</span>
<span class="line">42</span>
<span class="line">43</span>
<span class="line">44</span>
<span class="line">45</span>
<span class="line">46</span>
<span class="line">47</span>
<span class="line">48</span>
<span class="line">49</span>
<span class="line">50</span>
<span class="line">51</span>
<span class="line">52</span>
<span class="line">53</span>
<span class="line">54</span>
<span class="line">55</span>
<span class="line">56</span>
<span class="line">57</span>
<span class="line">58</span>
<span class="line">59</span>
<span class="line">60</span>
<span class="line">61</span>
<span class="line">62</span>
<span class="line">63</span>
<span class="line">64</span>
<span class="line">65</span>
<span class="line">66</span>
<span class="line">67</span>
<span class="line">68</span>
<span class="line">69</span>
<span class="line">70</span>
<span class="line">71</span>
<span class="line">72</span>
<span class="line">73</span>
<span class="line">74</span>
<span class="line">75</span>
<span class="line">76</span>
<span class="line">77</span>
<span class="line">78</span>
<span class="line">79</span>
<span class="line">80</span>
<span class="line">81</span>
<span class="line">82</span>
<span class="line">83</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URI;</span>
<span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span>
<span class="line"><span class="keyword">import</span> java.util.List;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">import</span> com.websystique.springmvc.model.User;</span>
<span class="line"> </span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringRestTestClient</span> </span>{</span>
<span class="line"> </span>
<span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REST_SERVICE_URI = <span class="string">"&lt;a class="</span>vglnk<span class="string">" href="</span>http:<span class="comment">//localhost:8080/Spring4MVCCRUDRestService" rel="nofollow"&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;://&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Spring4MVCCRUDRestService&lt;/span&gt;&lt;/a&gt;";</span></span>
<span class="line">     </span>
<span class="line">    <span class="comment">/* GET */</span></span>
<span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">listAllUsers</span><span class="params">()</span></span>{</span>
<span class="line">        System.out.println(<span class="string">"Testing listAllUsers API-----------"</span>);</span>
<span class="line">         </span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        List&lt;LinkedHashMap&lt;String, Object&gt;&gt; usersMap = restTemplate.getForObject(REST_SERVICE_URI+<span class="string">"/user/"</span>, List.class);</span>
<span class="line">         </span>
<span class="line">        <span class="keyword">if</span>(usersMap!=<span class="keyword">null</span>){</span>
<span class="line">            <span class="keyword">for</span>(LinkedHashMap&lt;String, Object&gt; map : usersMap){</span>
<span class="line">                System.out.println(<span class="string">"User : id="</span>+map.get(<span class="string">"id"</span>)+<span class="string">", Name="</span>+map.get(<span class="string">"name"</span>)+<span class="string">", Age="</span>+map.get(<span class="string">"age"</span>)+<span class="string">", Salary="</span>+map.get(<span class="string">"salary"</span>));;</span>
<span class="line">            }</span>
<span class="line">        }<span class="keyword">else</span>{</span>
<span class="line">            System.out.println(<span class="string">"No user exist----------"</span>);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">     </span>
<span class="line">    <span class="comment">/* GET */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>{</span>
<span class="line">        System.out.println(<span class="string">"Testing getUser API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        User user = restTemplate.getForObject(REST_SERVICE_URI+<span class="string">"/user/1"</span>, User.class);</span>
<span class="line">        System.out.println(user);</span>
<span class="line">    }</span>
<span class="line">     </span>
<span class="line">    <span class="comment">/* POST */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span> </span>{</span>
<span class="line">        System.out.println(<span class="string">"Testing create User API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        User user = <span class="keyword">new</span> User(<span class="number">0</span>,<span class="string">"Sarah"</span>,<span class="number">51</span>,<span class="number">134</span>);</span>
<span class="line">        URI uri = restTemplate.postForLocation(REST_SERVICE_URI+<span class="string">"/user/"</span>, user, User.class);</span>
<span class="line">        System.out.println(<span class="string">"Location : "</span>+uri.toASCIIString());</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">    <span class="comment">/* PUT */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">()</span> </span>{</span>
<span class="line">        System.out.println(<span class="string">"Testing update User API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        User user  = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"Tomy"</span>,<span class="number">33</span>, <span class="number">70000</span>);</span>
<span class="line">        restTemplate.put(REST_SERVICE_URI+<span class="string">"/user/1"</span>, user);</span>
<span class="line">        System.out.println(user);</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">    <span class="comment">/* DELETE */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteUser</span><span class="params">()</span> </span>{</span>
<span class="line">        System.out.println(<span class="string">"Testing delete User API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        restTemplate.delete(REST_SERVICE_URI+<span class="string">"/user/3"</span>);</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="comment">/* DELETE */</span></span>
<span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteAllUsers</span><span class="params">()</span> </span>{</span>
<span class="line">        System.out.println(<span class="string">"Testing all delete Users API----------"</span>);</span>
<span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span>
<span class="line">        restTemplate.delete(REST_SERVICE_URI+<span class="string">"/user/"</span>);</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>{</span>
<span class="line">        listAllUsers();</span>
<span class="line">        getUser();</span>
<span class="line">        createUser();</span>
<span class="line">        listAllUsers();</span>
<span class="line">        updateUser();</span>
<span class="line">        listAllUsers();</span>
<span class="line">        deleteUser();</span>
<span class="line">        listAllUsers();</span>
<span class="line">        deleteAllUsers();</span>
<span class="line">        listAllUsers();</span>
<span class="line">    }</span>
<span class="line">}</span>
</pre></td></tr></tbody></table></div></figure>
<p>输出：</p>
<figure class="highlight plain"><div class="table-area"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
<span class="line">28</span>
<span class="line">29</span>
<span class="line">30</span>
<span class="line">31</span>
<span class="line">32</span>
</pre></td><td class="code"><pre><span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Sam, Age=30, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=3, Name=Jerome, Age=45, Salary=30000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">Testing getUser API----------</span>
<span class="line">User [id=1, name=Sam, age=30, salary=70000.0]</span>
<span class="line">Testing create User API----------</span>
<span class="line">Location : &lt;a class="vglnk" href="<a class="vglnk" href="http://localhost:8080/Spring4MVCCRUDRestService/user/5" rel="nofollow"><span>http</span><span>://</span><span>localhost</span><span>:</span><span>8080</span><span>/</span><span>Spring4MVCCRUDRestService</span><span>/</span><span>user</span><span>/</span><span>5</span></a>" rel="nofollow"&gt;&lt;span&gt;http&lt;/span&gt;&lt;span&gt;://&lt;/span&gt;&lt;span&gt;localhost&lt;/span&gt;&lt;span&gt;:&lt;/span&gt;&lt;span&gt;8080&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;Spring4MVCCRUDRestService&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;user&lt;/span&gt;&lt;span&gt;/&lt;/span&gt;&lt;span&gt;5&lt;/span&gt;&lt;/a&gt;</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Sam, Age=30, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=3, Name=Jerome, Age=45, Salary=30000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">User : id=5, Name=Sarah, Age=51, Salary=134.0</span>
<span class="line">Testing update User API----------</span>
<span class="line">User [id=1, name=Tomy, age=33, salary=70000.0]</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Tomy, Age=33, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=3, Name=Jerome, Age=45, Salary=30000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">User : id=5, Name=Sarah, Age=51, Salary=134.0</span>
<span class="line">Testing delete User API----------</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">User : id=1, Name=Tomy, Age=33, Salary=70000.0</span>
<span class="line">User : id=2, Name=Tom, Age=40, Salary=50000.0</span>
<span class="line">User : id=4, Name=Silvia, Age=50, Salary=40000.0</span>
<span class="line">User : id=5, Name=Sarah, Age=51, Salary=134.0</span>
<span class="line">Testing all delete Users API----------</span>
<span class="line">Testing listAllUsers API-----------</span>
<span class="line">No user exist----------</span>
</pre></td></tr></tbody></table></div></figure>
<h3 id="REST-API-添加-CORS-支持"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#REST-API-%E6%B7%BB%E5%8A%A0-CORS-%E6%94%AF%E6%8C%81" class="headerlink" title="REST API 添加 CORS 支持"></a>REST API 添加 CORS 支持</h3><p>在访问REST API时，您可能会面临有关同源策略的问题。</p>
<p>可能的错误如下：</p>
<ul>
<li>“no” Access-Control-Allow-Origin“标题出现在请求的资源上。 原因’<a href="http://127.0.0.1:8080&#39;%E5%9B%A0%E6%AD%A4%E4%B8%8D%E8%A2%AB%E5%85%81%E8%AE%B8%E8%AE%BF%E9%97%AE%E3%80%82%E2%80%9C%E6%88%96/" target="_blank" rel="external">http://127.0.0.1:8080'因此不被允许访问。“或</a></li>
<li>“XMLHttpRequest无法加载<code><a class="vglnk" href="http://abc.com/bla" rel="nofollow"><span>http</span><span>://</span><span>abc</span><span>.</span><span>com</span><span>/</span><span>bla</span></a></code>。 原始<code>http：// localhost：12345</code>不被Access-Control-Allow-Origin允许。“在这种情况下很常见。</li>
</ul>
<p>解决方案是Cross-Origin Resource Sharing(跨源资源共享)。 基本上，在服务器端，我们可以返回额外的CORS访问控制头和响应，这最终将允许进一步的域间通信。</p>
<p>在Spring中，我们可以编写一个简单的过滤器，在每个响应中添加这些CORS特定的响应头信息。</p>
<figure class="highlight java"><div class="table-area"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span>
<span class="line">2</span>
<span class="line">3</span>
<span class="line">4</span>
<span class="line">5</span>
<span class="line">6</span>
<span class="line">7</span>
<span class="line">8</span>
<span class="line">9</span>
<span class="line">10</span>
<span class="line">11</span>
<span class="line">12</span>
<span class="line">13</span>
<span class="line">14</span>
<span class="line">15</span>
<span class="line">16</span>
<span class="line">17</span>
<span class="line">18</span>
<span class="line">19</span>
<span class="line">20</span>
<span class="line">21</span>
<span class="line">22</span>
<span class="line">23</span>
<span class="line">24</span>
<span class="line">25</span>
<span class="line">26</span>
<span class="line">27</span>
</pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span>
<span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span>
<span class="line"> </span>
<span class="line"></span>
<span class="line"><span class="meta">@WebFilter</span> </span>
<span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>{</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>{</span>
<span class="line">        System.out.println(<span class="string">"Filtering on..........................................................."</span>);</span>
<span class="line">        HttpServletResponse response = (HttpServletResponse) res;</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST, GET, PUT, OPTIONS, DELETE"</span>);</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Max-Age"</span>, <span class="string">"3600"</span>);</span>
<span class="line">        response.setHeader(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"x-requested-with"</span>);</span>
<span class="line">        chain.doFilter(req, res);</span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>{}</span>
<span class="line"> </span>
<span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>{}</span>
<span class="line"> </span>
<span class="line">}</span>
</pre></td></tr></tbody></table></div></figure>
<h3 id="参考资料"><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://websystique.com/springmvc/spring-mvc-4-restful-web-services-crud-example-resttemplate/" target="_blank" rel="external">spring-mvc-4-restful-web-services-crud-example-resttemplate</a></p>

      
    </div>
    
  </div>
  
    
    <div class="copyright">
        <p><span>本文标题:</span><a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html">基于Spring构建RESTFUL风格的controller</a></p>
        <p><span>文章作者:</span><a href="https://leokongwq.github.io/" title="回到主页">kongwenqiang</a></p>
        <p><span>发布时间:</span>2018-05-12, 23:23:46</p>
        <p><span>最后更新:</span>2018-05-30, 16:42:42</p>
        <p>
            <span>原始链接:</span><a class="post-url" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html" title="基于Spring构建RESTFUL风格的controller">https://leokongwq.github.io/2018/05/12/spring-rest-controller.html</a>
            <span class="copy-path" data-clipboard-text="原文: https://leokongwq.github.io/2018/05/12/spring-rest-controller.html　　作者: kongwenqiang" title="点击复制文章链接"><i class="fa fa-clipboard"></i></span>
            <script> var clipboard = new Clipboard('.copy-path'); </script>
        </p>
        <p>
            <span>许可协议:</span><i class="fa fa-creative-commons"></i> <a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/4.0/" title="CC BY-NC-SA 4.0 International" target="_blank">"署名-非商用-相同方式共享 4.0"</a> 转载请保留原文链接及作者。
        </p>
    </div>



    <nav id="article-nav">
        
            <div id="article-nav-newer" class="article-nav-title">
                <a href="https://leokongwq.github.io/2018/05/15/spring-boot-deploy.html">
                    SpringBoot应用部署模式
                </a>
            </div>
        
        
            <div id="article-nav-older" class="article-nav-title">
                <a href="https://leokongwq.github.io/2018/05/12/spring-cache.html">
                    spring对缓存的支持及相关注解说明
                </a>
            </div>
        
    </nav>

  
</article>

    <div id="toc" class="toc-article">
        <strong class="toc-title clickable">文章目录</strong>
        
            <ol class="toc"><li class="toc-item toc-level-3"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E5%89%8D%E8%A8%80"><span class="toc-number">1.</span> <span class="toc-text">前言</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E7%AC%AC%E4%B8%80%E6%AD%A5-%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BD%93%E7%B1%BB"><span class="toc-number">2.</span> <span class="toc-text">第一步 添加实体类</span></a></li><li class="toc-item toc-level-3"><i class="fa fa-caret-down"></i><i class="fa fa-caret-right hide"></i><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E7%AC%AC%E4%BA%8C%E6%AD%A5-%E6%B7%BB%E5%8A%A0-Controller"><span class="toc-number">3.</span> <span class="toc-text">第二步 添加 Controller</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#json"><span class="toc-number">3.1.</span> <span class="toc-text">json</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#xml"><span class="toc-number">3.2.</span> <span class="toc-text">xml</span></a></li></ol></li><li class="toc-item toc-level-3"><i class="fa fa-caret-down"></i><i class="fa fa-caret-right hide"></i><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#ContentNegotiationStrategy"><span class="toc-number">4.</span> <span class="toc-text">ContentNegotiationStrategy</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#ServletPathExtensionContentNegotiationStrategy"><span class="toc-number">4.1.</span> <span class="toc-text">ServletPathExtensionContentNegotiationStrategy</span></a></li><li class="toc-item toc-level-4"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#HeaderContentNegotiationStrategy"><span class="toc-number">4.2.</span> <span class="toc-text">HeaderContentNegotiationStrategy</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#REST%E5%BF%AB%E9%80%9F%E7%90%86%E8%A7%A3"><span class="toc-number">5.</span> <span class="toc-text">REST快速理解</span></a></li><li class="toc-item toc-level-3"><i class="fa fa-caret-down"></i><i class="fa fa-caret-right hide"></i><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#RestController"><span class="toc-number">6.</span> <span class="toc-text">RestController</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E8%AF%A6%E8%A7%A3"><span class="toc-number">6.1.</span> <span class="toc-text">详解</span></a></li></ol></li><li class="toc-item toc-level-3"><i class="fa fa-caret-down"></i><i class="fa fa-caret-right hide"></i><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E4%BD%BF%E7%94%A8RestTemplate%E7%BC%96%E5%86%99REST%E5%AE%A2%E6%88%B7%E7%AB%AF"><span class="toc-number">7.</span> <span class="toc-text">使用RestTemplate编写REST客户端</span></a><ol class="toc-child"><li class="toc-item toc-level-4"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E8%87%AA%E5%AE%9A%E4%B9%89REST%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%85%88%E5%89%8D%E5%88%9B%E5%BB%BA%E7%9A%84REST%E6%9C%8D%E5%8A%A1"><span class="toc-number">7.1.</span> <span class="toc-text">自定义REST客户端，使用先前创建的REST服务</span></a></li></ol></li><li class="toc-item toc-level-3"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#REST-API-%E6%B7%BB%E5%8A%A0-CORS-%E6%94%AF%E6%8C%81"><span class="toc-number">8.</span> <span class="toc-text">REST API 添加 CORS 支持</span></a></li><li class="toc-item toc-level-3"><a class="toc-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"><span class="toc-number">9.</span> <span class="toc-text">参考资料</span></a></li></ol>
        
    </div>
    <style>
        .left-col .switch-btn,
        .left-col .switch-area {
            display: none;
        }
        .toc-level-3 i,
        .toc-level-3 ol {
            display: none !important;
        }
    </style>

    <input type="button" id="tocButton" value="隐藏目录" title="点击按钮隐藏或者显示文章目录">

    <script>
        yiliaConfig.toc = ["隐藏目录", "显示目录", !!"false"];
    </script>



    
<div class="share">
    
        <div class="bdsharebuttonbox bdshare-button-style0-24" data-bd-bind="1552356537104">
            <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#" class="fa fa-twitter bds_twi" data-cmd="twi" title="分享到推特"></a>
            <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#" class="fa fa-weibo bds_tsina" data-cmd="tsina" title="分享到新浪微博"></a>
            <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#" class="fa fa-qq bds_sqq" data-cmd="sqq" title="分享给 QQ 好友"></a>
            <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#" class="fa fa-files-o bds_copy" data-cmd="copy" title="复制网址"></a>
            <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#" class="fa fa fa-envelope-o bds_mail" data-cmd="mail" title="通过邮件分享"></a>
            <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#" class="fa fa-weixin bds_weixin" data-cmd="weixin" title="生成文章二维码"></a>
            <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#" class="fa fa-share-alt bds_more" data-cmd="more"></a>
        </div>
        <script>
            window._bd_share_config={
                "common":{"bdSnsKey":{},"bdText":"基于Spring构建RESTFUL风格的controller　| 戒修-沉迷技术的小沙弥　","bdMini":"2","bdMiniList":false,"bdPic":"","bdStyle":"0","bdSize":"24"},"share":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='/static/api/js/share.js'];
        </script>
    

    
</div>







    
        <section id="comments">
    <style> aside.comment-bar { margin: auto 30px; }</style>
    <div id="disqus_thread"><iframe id="dsq-app1073" name="dsq-app1073" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/saved_resource.html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 613px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div>
    <script>
        var disqus_config = function(){
            this.page.url = 'https://leokongwq.github.io/2018/05/12/spring-rest-controller.html';
            this.page.identifier = '2018/05/12/spring-rest-controller.html';
        };
        var loadComment = function(){
            var d = document, s = d.createElement('script');
            s.src = '//leokongwq.disqus.com/embed.js';
            s.setAttribute('data-timestamp', +new Date());
            (d.head || d.body).appendChild(s);
        }
    </script>
    
    <script> loadComment(); </script>

</section>


    


<script type="text/x-mathjax-config;executed=true">
MathJax.Hub.Config({
    tex2jax: {
        inlineMath: [ ['$','$'], ["\\(","\\)"]  ],
        processEscapes: true,
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
    }
});

MathJax.Hub.Queue(function() {
    var all = MathJax.Hub.getAllJax(), i;
    for(i=0; i < all.length; i += 1) {
        all[i].SourceElement().parentNode.className += ' has-jax';                 
    }       
});
</script>

<script src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/MathJax.js">
</script>




    <div class="scroll" id="post-nav-button">
        
            <a href="https://leokongwq.github.io/2018/05/15/spring-boot-deploy.html" title="上一篇: SpringBoot应用部署模式">
                <i class="fa fa-angle-left"></i>
            </a>
        

        <a title="文章列表"><i class="fa fa-bars"></i><i class="fa fa-times"></i></a>

        
            <a href="https://leokongwq.github.io/2018/05/12/spring-cache.html" title="下一篇: spring对缓存的支持及相关注解说明">
                <i class="fa fa-angle-right"></i>
            </a>
        
    </div>

    <ul class="post-list toc-article"><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/11/21/springboot-resttempate-timout.html" target="_blank">RestTemplate超时引发的血案</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/11/17/springboot-servlet3-component.html" target="_blank">springboot 之 Servlet3 web组件</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/11/16/springboot-ConfigurationProperties.html" target="_blank">springboot 之 ConfigurationProperties</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/11/07/struts2-with-jdk8.html" target="_blank">JDK8环境下使用struts2</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/11/03/how-to-make-maven-faster.html" target="_blank">maven加速</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/07/29/consul-command-intro.html" target="_blank">consul 命令介绍</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/07/15/how-to-process-302-in-j2ee-correctly.html" target="_blank">servlet如何正确处理302跳转</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/07/08/consul-acl.html" target="_blank">consul之acl配置</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/07/08/spring-cloud-consul.html" target="_blank">springcloud服务注册之consul</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/06/27/activemq-deleyQueue.html" target="_blank">ActiveMQ 延迟消息</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/06/17/zookeeper-curator.html" target="_blank">zookeeper使用之curator</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/06/01/distributed-system-consitency.html" target="_blank">分布式系统一致性总结</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/05/30/spring-RestTemplate.html" target="_blank">spring中RestTemplate简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/05/28/java-JVM-shutdown.html" target="_blank">Java 虚拟机的关机方式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/05/24/zookeeper-learning-summary.html" target="_blank">Zookeeper简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/05/24/common-dns-records.html" target="_blank">常见DNS记录解释</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/05/22/json-web-token.html" target="_blank">JWT简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/05/19/activemq-redelivery-policy-config.html" target="_blank">ActiveMQ 消息重发策略</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/05/15/rest-version.html" target="_blank">REST API 版本化</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/05/15/spring-boot-deploy.html" target="_blank">SpringBoot应用部署模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html" target="_blank">基于Spring构建RESTFUL风格的controller</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/05/12/spring-cache.html" target="_blank">spring对缓存的支持及相关注解说明</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/03/23/computer-booting-linux.html" target="_blank">linux系统如何启动</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/03/21/computer-booting.html" target="_blank">计算机是如何启动的</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/03/06/spring-extension-point-autoconfig-summary.html" target="_blank">spring扩展点及springboot自动配置总结</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/03/01/kafka-send-msg-profile.html" target="_blank">kafka发送消息过程分析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/02/28/kafka-consume-msg-profile.html" target="_blank">kafka 消费消息过程分析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/02/12/openresy-lua-image-server.html" target="_blank">基于Openresy的图片服务</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/02/06/linux-file-system-schedule.html" target="_blank">Linux文件系统调用算法</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/01/31/openresty-health-check-dynamic-up-down.html" target="_blank">基于openresty的后端应用健康检查-动态上下线</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/01/30/tcp-state-transfer-diagram.html" target="_blank">TCP状态转化总结</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/01/27/openresty-dynamic-upstream.html" target="_blank">openresty动态upstream实现</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/01/19/distribute-lock-some-way.html" target="_blank">分布式锁的几种实现方式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/01/19/distribute-system-consistent.html" target="_blank">分布式系统一致性</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/01/10/kotlin-coroutine-learn.html" target="_blank">kotlin之coroutine学习笔记</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/01/10/mac-autostart.html" target="_blank">mac上禁止jenkins自启动</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/01/01/gossip-intro.html" target="_blank">Gossip算法介绍</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2018/01/01/consul-vs-other-software.html" target="_blank">consul和其它软件的比较</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/31/consul-quick-start.html" target="_blank">consul快速启动</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/22/computer-science-bus-arbitration.html" target="_blank">CPU总线仲裁</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/21/java-agent-instrumentation.html" target="_blank">java Instrumentation 和 Agent</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/21/activemq-monitor-hawtio.html" target="_blank">activemq监控之hawtio</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/20/centos-crond.html" target="_blank">centos下安装crond</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/16/vertx-async-callback-hell.html" target="_blank">vert.x异步回调地狱处理方式总结</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/15/vertx-Future.html" target="_blank">vertx-Future</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/06/vertx-cluster.html" target="_blank">vertx集群模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/06/microservices-gateway.html" target="_blank">微服务之网关</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/05/vertx-command-line-options.html" target="_blank">vertx命令行选项解析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/04/vertx-web-BodyHandler.html" target="_blank">vert.x web开发之BodyHandler</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/02/vertx-web-global-exception.html" target="_blank">vertx中web全局异常处理</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/01/vertx-vertx-jdbc-client.html" target="_blank">vertx中vertx-jdbc-client使用问题总结</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/01/vertx-jdbc-datasource.html" target="_blank">vertx对jdbc数据源的支持</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/12/01/vertx-command-run.html" target="_blank">vert.x run 命令解析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/30/java8-CompletableFuture-1.html" target="_blank">java8中CompletableFuture解析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/22/vertx-http-server-analyze.html" target="_blank">vertx创建http服务器分析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/22/http-content-type.html" target="_blank">http协议之content-type</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/22/vertx-Vertx.html" target="_blank">vert.x之Vertx类解析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/21/vertx-web-route.html" target="_blank">vert.x web开发之route</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/21/vertx-web-router.html" target="_blank">vert.x web开发之router</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/18/vertx-cache.html" target="_blank">配置 Vert.x 缓存</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/18/vertx-Launcher.html" target="_blank">vertx-启动器</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/18/vertx-access-filesystem.html" target="_blank">vertx-访问文件系统</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/18/vertx-cluster-lock-counter.html" target="_blank">vertx-集群范围锁-计数器</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/18/vertx-share-data.html" target="_blank">vertx-共享数据</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/17/vertx-tcp.html" target="_blank">vertx编程tcp服务端和客户端</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/17/vertx-http.html" target="_blank">vertx编程http服务端和客户端</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/17/vertx-buffer.html" target="_blank">vertx中的buffer</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/17/vertx-json.html" target="_blank">vertx中的json</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/17/vertx-event-bus.html" target="_blank">vertx-事件总线</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/17/vertx-timer.html" target="_blank">vertx-执行周期性/延迟性操作</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/17/vertx-context.html" target="_blank">vertx-context</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/17/vertx-verticle.html" target="_blank">vertx-verticle介绍</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/17/vertx-quickstart.html" target="_blank">vert.x入门</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/10/mysql-tools-code.html" target="_blank">mysql常用工具SQL</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/11/06/maven-useful-slices.html" target="_blank">maven使用知识汇总</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/10/21/mysql-read-only-transaction.html" target="_blank">mysql只读事务解析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/30/linux-clean-dns-cache.html" target="_blank">Linux中如何清除DNS缓存</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/28/linux-disk-raid.html" target="_blank">linux磁盘阵列简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/26/linux-centos7-rc-local.html" target="_blank">centos7中rc.local不起作用</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/24/understanding-maven-snapshot.html" target="_blank">理解maven中SNAPSHOT版本的作用</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/22/python-build-in-chapter-one.html" target="_blank">python内置函数-第一篇</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/22/linux-kill-parent-and-child-process.html" target="_blank">linux中kill主进程和所有子进程</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/21/why-enum-singleton-are-serialization-safe.html" target="_blank">为什么用枚举实现的单例模式可以防止反序列化？</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/19/computer-how-float-stored.html" target="_blank">浮点数在计算机中是如何存储的？</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/17/mysql-data-types-date-time.html" target="_blank">mysql数据类型-日期&amp;时间</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/16/mysql-data-types-numeric.html" target="_blank">mysql数据类型-数字类型</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/15/mysql-data-types-set.html" target="_blank">mysql数据类型-集合</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/15/mysql-data-types-enum.html" target="_blank">mysql数据类型-枚举类型</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/12/mysql-data-types-string.html" target="_blank">mysql数据类型-字符串类型</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/11/python-multiprocessing.html" target="_blank">python多进程简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/07/python-package.html" target="_blank">python包机制简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/08/05/python-file-read.html" target="_blank">python文件读写的几种方式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/07/24/python-multi-thread.html" target="_blank">python中的多线程</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/07/23/java-synchronized-detail.html" target="_blank">深入分析synchronized的实现原理</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/07/22/python-useful-codes.html" target="_blank">Python常用的代码</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/07/21/java-baised-locking.html" target="_blank">java中的偏向锁</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/07/06/mysql-deadlock-detection.html" target="_blank">mysql检测和处理</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/07/06/mysql-timeout.html" target="_blank">mysql中重要超时处理机制</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/06/22/maven-resource-plugin.html" target="_blank">maven-resource-plugin</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/06/19/java-Security-Illegal-key-size.html" target="_blank">java-Security-Illegal-key-size</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/06/19/linux-find.html" target="_blank">linux find使用总结</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/06/14/spring-MessageConverter.html" target="_blank">spring中HttpMessageConverter详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/06/14/mysql-transaction.html" target="_blank">mysql和事务</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/06/11/mysql-locks.html" target="_blank">mysql中的锁</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/06/09/linux-task-on-boot.html" target="_blank">linux开机启动任务</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/05/28/springboot-autoconfiguration.html" target="_blank">SpringBoot自动配置分析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/05/24/mysql-batch-update-column.html" target="_blank">mysql批量修改列类型</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/05/19/mongodb-enable-query-log.html" target="_blank">mongodb开启查询日志</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/05/18/best-practices-for-a-pragmatic-restful-api.html" target="_blank">RESTful API 设计最佳实践</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/05/18/rest-introduce.html" target="_blank">rest架构介绍</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/05/17/springboot-mongo.html" target="_blank">springboot-mongo</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/05/16/idea-jvm-options.html" target="_blank">mac下idea虚拟机参数设置</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/05/12/linux-tool-traceroute.html" target="_blank">linux工具之traceroute</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/05/10/curl-learn.html" target="_blank">curl学习笔记</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/04/28/maven-command-line-parameters.html" target="_blank">maven  命令行参数解释</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/04/08/java-enum-abstractMethod.html" target="_blank">java中的枚举是否可以有抽象方法</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/04/07/spring-ExceptionResolver.html" target="_blank">spring错误处理之HandlerExceptionResolver</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/04/07/spring-ErrorPageFilter.html" target="_blank">SpringBoot异常处理之ErrorPageFilter</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/04/05/spring-aop-MethodAnnotation.html" target="_blank">spring中AOP获取方法上的注解信息</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/04/02/spring-expandPoint.html" target="_blank">spring扩展点整理</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/03/29/maven-dependency-scope.html" target="_blank">maven jar包依赖范围总结</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/03/25/java-web-exception.html" target="_blank">java web 开发异常处理总结</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/03/18/springboot-tomcat.html" target="_blank">springboot发布到tomcat</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/03/17/mysql-date-datetime-timestamp.html" target="_blank">mysql中date，datetime，timestamp的区别</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/03/13/raft-protocol.html" target="_blank">raft协议简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/03/13/js-cross-domain.html" target="_blank">js跨域解决方案详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/28/java-netty-idleStateHandler.html" target="_blank">netty如何实现心跳检查</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/28/why-oauth2-use-authorization-code.html" target="_blank">为什么在oauth2认证中需要使用授权码</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/27/java-Executors.html" target="_blank">java线程池工具类Executors</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/27/mq-kafka-producer-partitioner.html" target="_blank">kafka发送消息分区选择策略详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/26/java-thread-dump.html" target="_blank">java中生成线程堆栈</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/26/java-Thread-state.html" target="_blank">java线程生命周期和状态</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/26/java-Thread-join.html" target="_blank">java中线程join方法的用法</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/26/java-ThreadPoolExecutor-RejectedExecutionHandler.html" target="_blank">java线程池-RejectedExecutionHandler</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/25/java-memorymapped-file-and-io.html" target="_blank">java中内存映射文件和IO</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/25/java-difference-between-direct-non-direct-mapped-bytebuffer-nio.html" target="_blank">direct, non-direct, mapped bytebuffer区别</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/25/java-difference-between-stack-and-heap.html" target="_blank">java中栈和堆的区别</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/25/java-how-to-create-immutable-class.html" target="_blank">java中如何创建不可变对象</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/25/java-interview-questions-answers-from-last-5-years.html" target="_blank">过去5年Java面试题精选</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/25/java-why-string-is-immutable-or-final.html" target="_blank">为什么在java中String是不可变或final</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/24/java-lock-and-condition-example-producer-consumer.html" target="_blank">java中使用锁和条件对象实现生产者-消费者模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/24/java-why-wait-notify-called-in-synchronized-block.html" target="_blank">为什么wait和notify必须在同步方法或同步块中调用</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/24/java-why-java-not-support-multi-inheritances.html" target="_blank">为何java不支持多继承</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/24/mysql-locks-intro.html" target="_blank">mysql锁介绍（一）</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/22/java-top10-Tricky-questions.html" target="_blank">诡异的java面试题TOP10</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/22/java-why-wait-notify-and-notifyall-defined-in-object.html" target="_blank">java-为什么wait，notify和notifyall定义在Object中</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/22/java-notify-notifyall.html" target="_blank">java中notify和notifyall的区别</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/18/java-xml-parser.html" target="_blank">java中xml解析器介绍</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/09/smooth-online-offline-service.html" target="_blank">服务节点平滑上下线</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/07/mq-kafka-blogs.html" target="_blank">kafka资料汇总</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/06/mq-kafka-tutorial.html" target="_blank">kafka入门教程</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/06/microservice-links.html" target="_blank">微服务资料汇总</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/02/04/ddd-books.html" target="_blank">领域驱动设计书单</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/23/jms-message-order.html" target="_blank">jms-如何保证消息的顺序</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/22/golang-param-pass-value-or-point.html" target="_blank">值传递, 指针传递 这是一个问题</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/21/golang-how-to-write-go-code.html" target="_blank">如何开发GO代码</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/20/algo-BigData-summary.html" target="_blank">大数据处理总结</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/20/algo-HashSearch.html" target="_blank">algo-HashSearch</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/20/algo-BlockSearch.html" target="_blank">分块查找</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/20/algo-BinaryTreeSearch.html" target="_blank">二叉排序树查找</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/20/algo-BinarySearch.html" target="_blank">二分查找</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/20/SearchAlgo.html" target="_blank">查找算法总结</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/19/algo-HeapSort.html" target="_blank">堆排序</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/19/algo-QuickSort.html" target="_blank">快速排序</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/19/algo-InsertionSort.html" target="_blank">插入排序</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/19/algo-mergesort.html" target="_blank">归并排序</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/19/algo-bucketsort.html" target="_blank">桶排序</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/19/algo-bubblesort.html" target="_blank">冒泡排序</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/17/java8-CompletableFuture.html" target="_blank">java8中CompletableFuture详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/17/java-zookeeper-curator.html" target="_blank">zookeeper客户端之curator</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/16/Java-PriorityQueue.html" target="_blank">Java优先级队列PriorityQueue</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/13/java-LockSupport.html" target="_blank">java-LockSupport详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/12/mq-rocketmq-cluster.html" target="_blank">rocketmq集群搭建</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/12/mq-rocketmq-quickstart.html" target="_blank">rocketmq快速入门</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/12/linux-zero-copy.html" target="_blank">linux零拷贝原理（一）</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/11/java-jdk9-new-features.html" target="_blank">java-jdk9-new-features</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/10/java-Experienced-Developer-Teach-You-Five-Things.html" target="_blank">经验丰富的Java开发者教给你的五件事</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/10/mq-pages.html" target="_blank">MQ资料汇总</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/10/DTP-best-practice.html" target="_blank">分布式事务典型处理方式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/09/spring-xa-transactions-using.html" target="_blank">使用spring处理分布式事务</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/09/mysql-text-defaultValue.html" target="_blank">mysql-text-defaultValue</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/03/transaction-understanding-jta.html" target="_blank">深入理解JTA事务处理</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/03/transaction-jta-deeplearning.html" target="_blank">JTA 深度历险 - 原理与实现</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/03/transaction-management-under-j2ee.html" target="_blank">J2EE事务管理详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/02/java-design-pattern-summary.html" target="_blank">java-design_pattern-summary</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/02/spring-DTP-patterns.html" target="_blank">spring处理分布式事务（使用或不使用XA）</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2017/01/01/mysql-master-slave-thinking.html" target="_blank">mysql-master-slave-thinking</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/31/java-magic-finally.html" target="_blank">java魔法之finally</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/31/java-magic-0xCAFEBABE.html" target="_blank">java魔法之0xCAFEBABE</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/31/java-magic-java-dot-net-dot-url.html" target="_blank">java魔法之java.net.Url</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/31/java-magic-unsafe.html" target="_blank">java魔法之unsafe</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/31/java-AtomicLong.html" target="_blank">java中原子变量之AtomicLong</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/30/distribute-transaction-manage.html" target="_blank">分布式系统的事务处理</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/30/the-pattern-updateCache.html" target="_blank">缓存更新的套路</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/29/java8-lambda.html" target="_blank">java8 lambda表达式详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/28/spring-annotation-value.html" target="_blank">spring中注解@Value解密</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/28/spring-PropertyPlaceholderConfigurer.html" target="_blank">spring扩展点之PropertyPlaceholderConfigurer</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/28/mac-install-python-mysql.html" target="_blank">mac上安装Python-Mysql</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/27/mysql-mofidy-charset.html" target="_blank">mysql修改表-字段-库的字符集</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/25/java8-stream.html" target="_blank">java8-stream</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/23/java8-optional.html" target="_blank">java8-optional</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/23/java-8-features-tutorial.html" target="_blank">java-8-features-tutorial</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/06/java-DesignPatterns-flyweight.html" target="_blank">java-设计模式之-享元模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/05/java-Design-Patterns-builder.html" target="_blank">java-设计模式之-建造者模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/03/java-DesignPatterns-proxy.html" target="_blank">java-设计模式之-代理模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/01/java-DesignPatterns-adapter.html" target="_blank">java-设计模式之-适配器模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/01/golang-execute-file-path.html" target="_blank">java-设计模式之-外观模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/01/java-DesignPatterns-bridge.html" target="_blank">java-设计模式之-桥接模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/12/01/java-DesignPatterns-facade.html" target="_blank">java-设计模式之-外观模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/28/java-DesignPatterns-command.html" target="_blank">java-设计模式之-命令模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/26/java-DesignPatterns-abstractFactory.html" target="_blank">java-设计模式之-抽象工厂模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/26/java-DesignPatterns-factoryMethod.html" target="_blank">java-设计模式之-工程方法模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/25/java-DesignPatterns-simpleFactory.html" target="_blank">java-设计模式之-简单工程模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/25/java-DesignPatterns-decorator.html" target="_blank">java-设计模式之-装饰者模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/25/nginx-cache.html" target="_blank">nginx缓存功能介绍</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/25/java-DesignPatterns-observer.html" target="_blank">java设计模式之-观察者模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/23/nginx-rewrite.html" target="_blank">nginx配置rewrite指令详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/23/java-singleton.html" target="_blank">java实现单例模式的几种方式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/23/java-DesignPatterns-Singleton.html" target="_blank">设计模式之-单例模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/23/java-DesignPatterns-UML.html" target="_blank">设计模式之-UML类图快速入门</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/23/java-DesignPatterns-Strategy.html" target="_blank">设计模式之-策略模式</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/22/java-HashMap-MaxmumEntries.html" target="_blank">java中HashMap的最大容量解析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/18/algo-stack-calculateExp.html" target="_blank">用栈实现后缀表达式的计算</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/16/algo-prime-number.html" target="_blank">素数相关</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/16/algo-gcd.html" target="_blank">求两个整数的最大公约数</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/15/java-HowThreadLocalWork.html" target="_blank">ThreadLocal正解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/15/java-Reference.html" target="_blank">java Reference 详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/15/SpringMVC-annotationDriven.html" target="_blank">mvc:annotation-driver</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/11/golang-effective-go.html" target="_blank">golang-effective-go</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/10/openresty-lua-nginx-module.html" target="_blank">openresty-lua-nginx-module</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/09/linux-max-fd.html" target="_blank">linux中最大文件描述符数</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/09/the-difference-between-301-and-302.html" target="_blank">HTTP301和302的区别</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/08/nodejs-heapdump.html" target="_blank">nodejs调试工具之heapdump简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/08/nodejs-gc.html" target="_blank">Node.js 调试 GC 以及内存暴涨的分析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/07/nodejs-debug.html" target="_blank">NodeJS的代码调试和性能调优</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/07/siege-introduce.html" target="_blank">压测工具siege简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/06/binary-search-tree.html" target="_blank">二叉查找树</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/03/full-print-BinaryTree.html" target="_blank">full-print-BinaryTree</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/02/best-10-practice-from-linkedin.html" target="_blank">LinkedIn关于提高Node.JS服务的10个建议</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/11/02/distributed-id-generation.html" target="_blank">5分钟了解分布式ID生成方案</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/27/java-LinkedList.html" target="_blank">java-LinkedList实现解析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/26/java-LinkedHashMap.html" target="_blank">java-LinkedHashMap知识点汇总</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/26/java-HashMap.html" target="_blank">java-HashMap知识点汇总</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/26/japanese-50-yin.html" target="_blank">日语50音图学习</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/25/linux-netcat.html" target="_blank">Linux Netcat 命令用法简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/24/linux-backlog-maxconn.html" target="_blank">linux网络编程backlog和somaxconn</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/21/npm-11-useful-tips.html" target="_blank">npm11个提供工作效率的用法</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/20/linux-network-io.html" target="_blank">Linux IO模式及 select、poll、epoll详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/20/linux-io-epoll.html" target="_blank">Linux下的I/O复用与epoll详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/20/mac-osx-kernel.html" target="_blank">mac-osx-kernel</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/20/java-real-data-type-size.html" target="_blank">Java中数据类型真实的内存占用</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/19/vim-fileencoding.html" target="_blank">vim-文件编码</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/nodejs-exports-and-module-expots.html" target="_blank">nodejs中exports和module.expots异同</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/nodejs-module-os.html" target="_blank">nodejs模块-os模块</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/nodejs-module-path.html" target="_blank">nodejs模块path简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/Fibers-and-Threads-in-node.html" target="_blank">Fibers-and-Threads-in-node</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/nodejs-module-querystring.html" target="_blank">nodejs模块之querystring</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/nodejs-module-Readline.html" target="_blank">nodejs模块之readline</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/pm2-readme.html" target="_blank">pm2使用简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/jquery-selector.html" target="_blank">jquery选择器详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/fastjson-use.html" target="_blank">fastjson使用简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/character-set.html" target="_blank">字符集详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/linux-hostname.html" target="_blank">linux命令hostname详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/linux-delete-file-not-free-the-space.html" target="_blank">linux删除文件但磁盘空间不释放</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/nodeJs-module-async.html" target="_blank">nodeJs解决异步回调方案之module-async</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/redis-sentinel.html" target="_blank">redis哨兵功能简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/17/http-cache.html" target="_blank">http缓存详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/16/golang-import.html" target="_blank">golang中import语句详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/16/java-thread-profile.html" target="_blank">java线程必备知识</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/16/nodejs-globals.html" target="_blank">Nodejs全局对象</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/16/golang-flag.html" target="_blank">golang命令行参数解析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/16/golang-file.html" target="_blank">golang文件操作</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/16/golang-userinfo.html" target="_blank">golang 用户信息获取</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/16/golang-time.html" target="_blank">golang时间操作</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/16/java-BlockingQueue.html" target="_blank">Java的BlockingQueue详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/16/java-runnable-callable-future.html" target="_blank">Java中的Runnable、Callable、Future、FutureTask的区别与示例</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/java-Queue.html" target="_blank">java队列Queue接口详解</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/strace-learn.html" target="_blank">手把手教你用Strace诊断问题</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/too-many-open-files.html" target="_blank">too-many-open-files</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/linux-strace.html" target="_blank">linux工具-strace</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/http-tranfer-encoding.html" target="_blank">HTTP 协议中的 Transfer-Encoding</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/lombook.html" target="_blank">lombook工具包简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/golang-file-size.html" target="_blank">golang编译后文件编写的技巧</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/golang-cross-compile.html" target="_blank">golang交叉编译</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/golang-performance-optimize-string.html" target="_blank">Go性能优化技巧-string</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/golang-performance-optimize-array.html" target="_blank">Go性能优化技巧-array</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/golang-performance-optimize-map.html" target="_blank">Go性能优化技巧-map</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/golang-defer.html" target="_blank">golang之defer简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/golang-chan.html" target="_blank">golang之chan简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/golang-build-version.html" target="_blank">golang自动生成版本信息</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/15/how-to-get-goroutine-id.html" target="_blank">如何获取goroutine的id</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/14/fifty-common-Mistakes-for-New-Golang-Devs.html" target="_blank">50个go新手开发常见的错误</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/14/ten-best-practise-for-java-exception.html" target="_blank">java异常处理最佳实践</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/14/golang-error-handler.html" target="_blank">golang错误处理</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/14/seven-things-about-golang.html" target="_blank">关于go你必须知道的7件事</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/14/golang-tools-build.html" target="_blank">go自带工具build的用法</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/14/golang-gdb-debug.html" target="_blank">golang程序GDB调试</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/14/hexo-post-asset-folder-html.html" target="_blank">hexo使用post_asset_folder功能文章链接不能以html结尾</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/14/hexo-codeblock-multiblank.html" target="_blank">hexo代码块前后空白行问题</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/13/java-serialization-deepknow.html" target="_blank">java-serialization-deepknow</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/13/golang-unsafe.html" target="_blank">golang的unsafe包简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/13/IDCardNo-algo.html" target="_blank">身份证号验证算法</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/13/byte-order.html" target="_blank">网络字节序</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/13/golang-testing.html" target="_blank">golang代码测试</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/13/linux-tool-dig.html" target="_blank">linux-tool-dig</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/13/golang-md5.html" target="_blank">golang计算字符串MD5</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/13/golang-time-format.html" target="_blank">golang时间格式化</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/13/golang-open-browser.html" target="_blank">golang打开系统浏览器</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/golang-user-define-json-UnmarshalJSON.html" target="_blank">golang进行json数据的解析</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/mq-compare.html" target="_blank">常见MQ产品比较</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/find-join-point-ofTwoIntersectList.html" target="_blank">查找无环单链表的相交节点</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/isIntersectWithLoop.html" target="_blank">单链表-链表有环如何判断相交</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/find-the-join-point-in-list.html" target="_blank">找出单链表有环的入口节点</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/list-hasCircle.html" target="_blank">判断单链表是否有环</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/find-mid-post-in-list.html" target="_blank">找出单链表的中间节点</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/find-the-kth-node-in-list.html" target="_blank">找出单链表倒数第K个节点</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/reverse-one-direction-list.html" target="_blank">单链表逆转</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/delete-listNode-in-O1.html" target="_blank">O(1)时间内删除链表节点</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/reverse-print-list.html" target="_blank">单链表的逆序打印</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/merge-two-sorted-list.html" target="_blank">合并两个升序的单向链表</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/print-NxN-matrix.html" target="_blank">打印NxN矩阵的对角线</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/service-discovery.html" target="_blank">服务发现介绍</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/web-reply-attack.html" target="_blank">web重放攻击介绍和防御方法</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/process-exception-in-web-dev.html" target="_blank">web开发异常统一处理</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/maven-test.html" target="_blank">maven-surefire-plugin简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/spring-aop-pointcut-expression.html" target="_blank">spring aop 切点表达式介绍</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/12/avoid-NullPointException-Java.html" target="_blank">java程序避免NullPointException最佳实践</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2016/10/11/jvm-codecache.html" target="_blank">JVM-codecache内存区域介绍</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/07/13/logstash-input-file.html" target="_blank">logstash-input-file</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/07/12/when-to-use-hadoop-toolbox.html" target="_blank">Hadoop-Hbase-Hive-Pig关系</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/06/14/JVM-Tools.html" target="_blank">有用的JVM工具简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/06/12/IllegalMonitorStateException.html" target="_blank">诡异的异常IllegalMonitorStateException</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/06/11/HowMysqlLoadDataWorks.html" target="_blank">mysql load data infile 简介</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/06/10/why-not-use-finalize.html" target="_blank">为什么不使用finalize</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/05/14/mac-sshd.html" target="_blank">mac-sshd</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/04/22/java-Guava-Joiner.html" target="_blank">Guava-Joiner</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/04/22/java-Guava-Splitor.html" target="_blank">Guava-Spilitor</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/04/22/theDayEndOfJd.html" target="_blank">朝林最后一天</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/04/17/howJekyllWorks.html" target="_blank">How Jekyll works</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/04/17/springMVCOutlines.html" target="_blank">Spring MVC HandlerMapping HandlerAdapter</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/04/16/JVMOptimize.html" target="_blank">JVM常用参数和调优</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/04/16/githubblog.html" target="_blank">Jekyll 快速入门</a></li><li class="post-list-item"><a class="post-list-link" href="https://leokongwq.github.io/2015/04/16/JVMGcAlgorithm.html" target="_blank">JVM垃圾收集算法</a></li></ul>




    <script>
        
    </script>

</div>
      <footer id="footer">
    <div class="outer">
        <div id="footer-info">
            <div class="footer-left">
                <i class="fa fa-copyright"></i> 
                2016-2018 kongwenqiang
            </div>
            <div class="footer-right">
                <a href="http://hexo.io/" target="_blank" title="快速、简洁且高效的博客框架">Hexo</a>  Theme <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank" title="简而不减 Hexo 双栏博客主题  v3.5">Yelee</a> by MOxFIVE <i class="fa fa-heart animated infinite pulse"></i>
            </div>
        </div>
        
            <div class="visit">
                
                    <span id="busuanzi_container_site_pv" style="display:none">
                        <span id="site-visit" title="本站到访数"><i class="fa fa-user" aria-hidden="true"></i><span id="busuanzi_value_site_uv"></span>
                        </span>
                    </span>
                
                
                    <span>| </span>
                
                
                    <span id="busuanzi_container_page_pv" style="display:none">
                        <span id="page-visit" title="本页阅读量"><i class="fa fa-eye animated infinite pulse" aria-hidden="true"></i><span id="busuanzi_value_page_pv"></span>
                        </span>
                    </span>
                
            </div>
        
    </div>
</footer>
    </div>
    
<script data-main="/js/main.js" src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/require.min.js"></script>

    <script>
        $(document).ready(function() {
            var iPad = window.navigator.userAgent.indexOf('iPad');
            if (iPad > -1 || $(".left-col").css("display") === "none") {
                var bgColorList = ["#9db3f4", "#414141", "#e5a859", "#f5dfc6", "#c084a0", "#847e72", "#cd8390", "#996731"];
                var bgColor = Math.ceil(Math.random() * (bgColorList.length - 1));
                $("body").css({"background-color": bgColorList[bgColor], "background-size": "cover"});
            }
            else {
                var backgroundnum = 5;
                var backgroundimg = "url(/background/bg-x.jpg)".replace(/x/gi, Math.ceil(Math.random() * backgroundnum));
                $("body").css({"background": backgroundimg, "background-attachment": "fixed", "background-size": "cover"});
            }
        })
    </script>





<div class="scroll" id="scroll">
    <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#" title="返回顶部"><i class="fa fa-arrow-up"></i></a>
    <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#comments" onclick="load$hide();" title="查看评论"><i class="fa fa-comments-o"></i></a>
    <a href="https://leokongwq.github.io/2018/05/12/spring-rest-controller.html#footer" title="转到底部"><i class="fa fa-arrow-down"></i></a>
</div>
<script>
    // Open in New Window
    
        var oOpenInNew = {
            
            
            
            
            
            
             archives: ".archive-article-title", 
             miniArchives: "a.post-list-link", 
            
             friends: "#js-friends a", 
             socail: ".social a" 
        }
        for (var x in oOpenInNew) {
            $(oOpenInNew[x]).attr("target", "_blank");
        }
    
</script>

    <script>
        var originTitle = document.title;
        var titleTime;
        document.addEventListener("visibilitychange", function() {
            if (document.hidden) {
                document.title = "(つェ⊂) 我藏好了哦~ " + originTitle;
                clearTimeout(titleTime);
            }
            else {
                document.title = "(*´∇｀*) 被你发现啦~ " + originTitle;
                titleTime = setTimeout(function() {
                    document.title = originTitle;
                }, 2000);
            }
        })
    </script>

<script async="" src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/busuanzi.pure.mini.js">
</script>

<script>
    var inputArea = document.querySelector("#local-search-input");
    var getSearchFile = function(){
        var path = "/search.xml";
        alert(11111);
        searchFunc(path, 'local-search-input', 'local-search-result');
    }
    inputArea.onfocus = function(){
      getSearchFile()
    }

    var $resetButton = $("#search-form .fa-times");

    var $resultArea = $("#local-search-result");
    inputArea.oninput = function(){ $resetButton.show(); }

    resetSearch = function(){
        $resultArea.html("");
        document.querySelector("#search-form").reset();
        $resetButton.hide();
        $(".no-result").hide();
    }

    inputArea.onkeydown = function(){
        if(event.keyCode==13) {
          return false
        }
    }

    $resultArea.bind("DOMNodeRemoved DOMNodeInserted", function(e) {
        if (!$(e.target).text()) {
            $(".no-result").show(200);
        } else {
          $(".no-result").hide();
        }
    })

</script>

  </div>

<iframe style="display: none;" src="./基于Spring构建RESTFUL风格的controller _ 戒修-沉迷技术的小沙弥_files/saved_resource(1).html"></iframe></body></html>